{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/lu2@2024.9.2/node_modules/lu2/theme/edge/js/common/ui/Follow.js", "../../../../node_modules/.pnpm/lu2@2024.9.2/node_modules/lu2/theme/edge/js/common/ui/Color.js"],
  "sourcesContent": ["/**\n * @Follow.js\n * @author zhangxinxu\n * @version\n * @Created: 15-06-25\n * @edited:  17-06-19\n * @edited: by littleLionGuoQing:  20-05-14 ES6\n * @edited:  2020-11-29 rewrite by zhangxinxu\n */\n\n/**\n * 绝对定位元素的定位效果\n * 自动含边界判断\n * 可用在Drop, Tips等组件上\n * @example\n\n * 文档见：https://www.zhangxinxu.com/wordpress/?p=1328 position()方法\n **/\n\nHTMLElement.prototype.follow = function (eleTarget, options) {\n    // 默认参数值\n    let defaults  = {\n        offsets: {\n            x: 0,\n            y: 0\n        },\n        safeArea: [0, 0, 0, 0],\n        // eleTrigger-eleTarget\n        position: '4-1',\n        // 边缘位置自动调整\n        edgeAdjust: true\n    };\n\n    // 判断第一个参数是否是DOM元素，不是的话判断是否是对象，是对象则将第一个参数当作options\n    if (eleTarget && Object.prototype.toString.call(eleTarget) === '[object Object]') {\n        options = eleTarget;\n        eleTarget = null;\n    }\n\n    for (var keyOption in (options || (options = {}))) {\n        if (typeof options[keyOption] == 'undefined') {\n            delete options[keyOption];\n        }\n    }\n\n    let objParams = Object.assign({}, defaults, options);\n\n    // eleTarget 非必须，可 eleTrigger 元素 html 属性指定\n    if (!eleTarget) {\n        let strTarget = this.getAttribute('is-follow') || this.dataset.target;\n        if (!strTarget) {\n            return;\n        }\n        eleTarget = document.getElementById(strTarget) || document.querySelector('.' + strTarget) || document.querySelector(strTarget);\n        if (!eleTarget) {\n            return;\n        }\n    }\n\n    // 合法的位置关系数据\n    let arrLegalPosition = ['4-1', '1-4', '5-7', '2-3', '2-1', '6-8', '3-4', '4-3', '8-6', '1-2', '7-5', '3-2'];\n\n    // eleTrigger 元素属性指定 options，传入的 options 参数优先级更高\n    // offsets\n    let dataOffsets = this.dataset.offsets;\n    let arrOffsets = [];\n    if (objParams.offsets.map && objParams.offsets.length) {\n        arrOffsets = objParams.offsets;\n    } else if (typeof objParams.offsets == 'string') {\n        arrOffsets = objParams.offsets.trim().split(/,\\s*|\\s+/);\n    }\n    if (dataOffsets && !options.offsets) {\n        arrOffsets = dataOffsets.trim().split(/,\\s*|\\s+/);\n    }\n\n    // 如果arrOffsets有值\n    if (arrOffsets.length) {\n        objParams.offsets = {};\n        objParams.offsets.x = arrOffsets[0];\n        objParams.offsets.y = arrOffsets[1] || arrOffsets[0];\n    }\n\n    let dataOffsetX = this.dataset.offsetX;\n    let dataOffsetY = this.dataset.offsetY;\n\n    if (dataOffsetX) {\n        objParams.offsets.x = dataOffsetX;\n    }\n    if (dataOffsetY) {\n        objParams.offsets.y = dataOffsetY;\n    }\n\n    // 转数值\n    objParams.offsets.x *= 1;\n    objParams.offsets.y *= 1;\n\n    // position\n    let dataPosition = this.dataset.position;\n    let dataAlign = this.dataset.align;\n    // data-align是否符合合法位置关系\n    let isDataAlignMatch = arrLegalPosition.some((strLegalPosition) => {\n        return strLegalPosition === dataAlign;\n    });\n    // 若没有设置 data-position，设置了 data-align 也行，若都设置了以 data-position 的值为准\n    if (!dataPosition && dataAlign && isDataAlignMatch) {\n        dataPosition = dataAlign;\n    }\n    if (dataPosition && (!options || !options.position)) {\n        objParams.position = dataPosition;\n    }\n\n    // edge-adjust\n    let dataEdgeAdjust = this.dataset.edgeAdjust || objParams.edgeAdjust;\n    // data-edge-adjust 字符串为 0、none、false 认为是 false，其他都是 true\n    let isEdgeAdjust = !((dataEdgeAdjust === '0') || (dataEdgeAdjust === 'none') || (dataEdgeAdjust === 'false') || (dataEdgeAdjust === false));\n    if (typeof dataEdgeAdjust == 'string' && typeof objParams.edgeAdjust != 'boolean') {\n        objParams.edgeAdjust = isEdgeAdjust;\n    }\n\n    // 先绝对定位，以便获取更准确的尺寸\n    let strOriginPosition = eleTarget.style.position;\n    if (strOriginPosition != 'absolute') {\n        eleTarget.style.position = 'absolute';\n    }\n\n    // 触发元素和目标元素的坐标数据\n    let objBoundTrigger = this.getBoundingClientRect();\n    let objBoundTarget = eleTarget.getBoundingClientRect();\n\n    // 如果目标元素隐藏，则不处理\n    if (objBoundTarget.width * objBoundTarget.height === 0) {\n        eleTarget.style.position = strOriginPosition || '';\n        window.console.warn((eleTarget.id ? 'id为' + eleTarget.id + '的' : '') + '目前元素尺寸为0，无法定位');\n        return;\n    }\n\n    // 页面的水平和垂直滚动距离\n    const selectorScroller = this.dataset.scroller;\n    let scroller;\n    if (selectorScroller) {\n        scroller = this.closest(selectorScroller) || this.closest('#' + selectorScroller);\n    }\n    if (!scroller) {\n        scroller = document.scrollingElement || document.documentElement;\n    }\n\n    let numScrollTop = scroller.scrollTop;\n    let numScrollLeft = scroller.scrollLeft;\n\n    // 浏览器窗口的尺寸\n    let numWinWidth = window.innerWidth;\n    let numWinHeight = window.innerHeight;\n\n    // 如果trigger元素全部都在屏幕外，则不进行边缘调整\n    if ((objBoundTrigger.left < 0 && objBoundTrigger.right < 0) || (objBoundTrigger.top < 0 && objBoundTrigger.bottom < 0) || (objBoundTrigger.left > numWinWidth && objBoundTrigger.right > numWinWidth) || (objBoundTrigger.top > numWinHeight && objBoundTrigger.bottom > numWinHeight)) {\n        objParams.edgeAdjust = isEdgeAdjust = false;\n    }\n\n    // target的包含块祖先元素，也就是定位元素\n    let eleOffsetParent = eleTarget.offsetParent;\n    let objBoundOffsetParent = eleOffsetParent.getBoundingClientRect();\n\n    // 暴露给实例\n    const element = {\n        follow: eleTarget\n    };\n\n    this.element = this.element ? Object.assign(this.element, element) : element;\n    this.params = this.params ? Object.assign(this.params, objParams) : objParams;\n\n    // 参数中设置的偏移位置\n    let objOffsets = objParams.offsets;\n    // target元素所在的offset偏移\n    let numOffsetTop = objBoundOffsetParent.top + numScrollTop;\n    let numOffsetLeft = objBoundOffsetParent.left + numScrollLeft;\n\n    // 如果是body元素，同时没有设置定位属性的话，忽略\n    // 因为此时margin有值或者margin重叠时候会有定位bug\n    if (eleOffsetParent === document.body && window.getComputedStyle(eleOffsetParent).position === 'static') {\n        numOffsetTop = 0;\n        numOffsetLeft = 0;\n    }\n\n    // 直接嫁接在offsets对象上，可以大大简化后续处理的逻辑\n    // 减去包含块元素的偏移位置，这样的objOffsets尺寸是精准的定位尺寸\n    // objOffsets.x -= numOffsetLeft;\n    // objOffsets.y -= numOffsetTop;\n\n    // 这是指定位置\n    // 支持具体坐标值\n    let strPosition = objParams.position;\n\n    // 最终定位的left/top坐标\n    let numTargetLeft, numTargetTop;\n\n    // eleTarget元素zIndex实时最大化\n    let zIndex = function () {\n        // 返回eleTarget才是的样式计算对象\n        let objStyleTarget = window.getComputedStyle(eleTarget);\n        // 此时元素的层级\n        let numZIndexTarget = Number(objStyleTarget.zIndex);\n        // 用来对比的层级，也是最小层级\n        let numZIndexNew = 19;\n\n        // 只对同级子元素进行层级最大化计算处理\n        eleOffsetParent.childNodes.forEach((eleChild) => {\n            if (eleChild.nodeType !== 1) return;\n\n            let objStyleChild = window.getComputedStyle(eleChild);\n\n            let numZIndexChild = objStyleChild.zIndex * 1;\n\n            if (numZIndexChild && eleTarget !== eleChild && objStyleChild.display !== 'none') {\n                numZIndexNew = Math.max(numZIndexChild + 1, numZIndexNew);\n            }\n        });\n\n        if (numZIndexNew !== numZIndexTarget) {\n            eleTarget.style.zIndex = numZIndexNew;\n        }\n    };\n\n    // 如果直接指定了坐标\n    if (typeof strPosition !== 'string' && strPosition.length === 2) {\n        let arrPosition = strPosition;\n\n        numTargetLeft = arrPosition[0] + objOffsets.x;\n        numTargetTop = arrPosition[1] + objOffsets.y;\n\n        // 边缘检测\n        if (objParams.edgeAdjust === true) {\n            if (numTargetLeft + objBoundTarget.width > numWinWidth + numScrollLeft) {\n                numTargetLeft = numWinWidth + numScrollLeft - objBoundTarget.width - objOffsets.x;\n            }\n            if (numTargetTop + objBoundTarget.height > numWinHeight + numScrollTop) {\n                numTargetTop = numWinHeight + numScrollTop - objBoundTarget.height - objOffsets.y;\n            }\n        }\n        // 浮动框的定位与显示\n        eleTarget.style.left = `${ numTargetLeft }px`;\n        eleTarget.style.top = `${ numTargetTop }px`;\n        // 记住定位标识码\n        eleTarget.dataset.align = '3-1';\n\n        // z-index自动最高\n        zIndex();\n\n        return;\n    }\n\n\n    // 是否对齐匹配的标志量\n    // 遍历，以确定设定的对齐是否有匹配\n    let isAlignMatch = arrLegalPosition.some((strLegalPosition) => {\n        return strLegalPosition === strPosition;\n    });\n\n    // 如果没有匹配的对齐方式，使用默认的对齐方式\n    if (isAlignMatch === false) {\n        strPosition = defaults.position;\n    }\n\n    // 自动调整距离边缘的安全距离\n    let arrSafeArea = this.dataset.safeArea || getComputedStyle(eleTarget).getPropertyValue('--safe-area') || objParams.safeArea;\n    // 字符串转数组\n    if (typeof arrSafeArea == 'string') {\n        arrSafeArea = arrSafeArea.trim().split(/(?:,\\s*|\\s+)/);\n    }\n    arrSafeArea = arrSafeArea.map(function (val) {\n        return parseFloat(val) || 0;\n    });\n    // 数量的处理\n    if (arrSafeArea.length == 1) {\n        arrSafeArea = arrSafeArea.concat(arrSafeArea[0], arrSafeArea[0], arrSafeArea[0]);\n    } else if (arrSafeArea.length == 2) {\n        arrSafeArea.push(arrSafeArea[0]);\n        arrSafeArea.push(arrSafeArea[1]);\n    } else if (arrSafeArea.length == 3) {\n        arrSafeArea.push(arrSafeArea[1]);\n    }\n\n    // 是否超出边界的判断\n    // 只考虑在视区的情况，页面的滚动距离不处理\n    const objIsOverflow = {\n        // 键使用trigger-target方位表示\n        // 例如'left-right'表示trigger元素的左边缘和target元素右边缘对齐时候是否溢出\n        'left-right': objBoundTarget.width + objOffsets.x + arrSafeArea[3] > objBoundTrigger.left,\n        'top-bottom': objBoundTrigger.top - (objBoundTarget.height + objOffsets.y + arrSafeArea[0]) < 0,\n        'right-left': objBoundTrigger.right + objBoundTarget.width + objOffsets.x + arrSafeArea[1] > numWinWidth,\n        'bottom-top': objBoundTrigger.bottom + objBoundTarget.height + objOffsets.y + arrSafeArea[2] > numWinHeight,\n        // 新增4个方位\n        'right-right': objBoundTarget.width + objOffsets.x + arrSafeArea[3] > objBoundTrigger.right,\n        'left-left': objBoundTrigger.left + objBoundTarget.width + objOffsets.x + arrSafeArea[1] > numWinWidth,\n        'bottom-bottom': objBoundTarget.height + objOffsets.y + arrSafeArea[0] > objBoundTrigger.bottom,\n        'top-top': objBoundTrigger.top + objBoundTarget.height + objOffsets.y + arrSafeArea[2] > numWinHeight\n    };\n\n    let strDirection = 'bottom';\n\n    var funGetPosition = () => {\n        // 定位的处理\n        // 有别于之前的逻辑\n        // 直接枚举处理，覆盖所有的情况，之前是方位调整比较粗放\n        switch (strPosition) {\n            case '1-4': case '5-7': case '2-3': {\n                // 如果在上方显示\n                // top坐标是确定的\n                numTargetTop = objBoundTrigger.top - objBoundTarget.height;\n                // left坐标确定\n                if (strPosition === '1-4') {\n                    numTargetLeft = objBoundTrigger.left;\n                } else if (strPosition === '5-7') {\n                    numTargetLeft = objBoundTrigger.left - (objBoundTarget.width - objBoundTrigger.width) / 2;\n                } else {\n                    numTargetLeft = objBoundTrigger.left - (objBoundTarget.width - objBoundTrigger.width);\n                }\n\n                strDirection = 'top';\n\n                // 如果上方超出，则看看下方有没有空间\n                if (isEdgeAdjust && objIsOverflow['top-bottom']) {\n                    if (!objIsOverflow['bottom-top']) {\n                        strPosition = ({\n                            '1-4': '4-1',\n                            '5-7': '7-5',\n                            '2-3': '3-2'\n                        })[strPosition];\n                        // 再执行一次\n                        funGetPosition();\n                    } else if (!objIsOverflow['left-right'] || !objIsOverflow['right-left']) {\n                        // 上下无空间，但是左侧或右侧有空间\n                        // 随便给个水平方向就好\n                        strPosition = ({\n                            '1-4': '2-1',\n                            '5-7': '6-8',\n                            '2-3': '3-4'\n                        })[strPosition];\n                        funGetPosition();\n                    }\n                }\n\n                break;\n            }\n            case '2-1': case '6-8': case '3-4': {\n                // left坐标固定\n                numTargetLeft = objBoundTrigger.right;\n                // top坐标确定\n                if (strPosition === '2-1') {\n                    numTargetTop = objBoundTrigger.top;\n                } else if (strPosition === '6-8') {\n                    numTargetTop = objBoundTrigger.top - (objBoundTarget.height - objBoundTrigger.height) / 2;\n                } else {\n                    numTargetTop = objBoundTrigger.top - (objBoundTarget.height - objBoundTrigger.height);\n                }\n\n                strDirection = 'right';\n\n                // 如果右侧超出，则看看左方有没有空间\n                if (isEdgeAdjust && objIsOverflow['right-left']) {\n                    if (!objIsOverflow['left-right']) {\n                        strPosition = ({\n                            '2-1': '1-2',\n                            '6-8': '8-6',\n                            '3-4': '4-3'\n                        })[strPosition];\n                        // 再执行一次\n                        funGetPosition();\n                    } else if (!objIsOverflow['top-bottom'] || !objIsOverflow['bottom-top']) {\n                        strPosition = ({\n                            '2-1': '1-4',\n                            '6-8': '5-7',\n                            '3-4': '2-3'\n                        })[strPosition];\n                        // 再执行一次\n                        funGetPosition();\n                    }\n                }\n\n                break;\n            }\n            case '4-1': case '7-5': case '3-2': {\n                // top坐标是确定的\n                numTargetTop = objBoundTrigger.bottom;\n                // left坐标确定\n                if (strPosition === '4-1') {\n                    numTargetLeft = objBoundTrigger.left;\n                } else if (strPosition === '7-5') {\n                    numTargetLeft = objBoundTrigger.left - (objBoundTarget.width - objBoundTrigger.width) / 2;\n                } else {\n                    numTargetLeft = objBoundTrigger.left - (objBoundTarget.width - objBoundTrigger.width);\n                }\n\n                strDirection = 'bottom';\n\n                // 如果下方超出，则看看上方有没有空间\n                if (isEdgeAdjust && objIsOverflow['bottom-top']) {\n                    if (!objIsOverflow['top-bottom']) {\n                        strPosition = ({\n                            '4-1': '1-4',\n                            '7-5': '5-7',\n                            '3-2': '2-3'\n                        })[strPosition];\n                        // 再执行一次\n                        funGetPosition();\n                    } else if (!objIsOverflow['left-right'] || !objIsOverflow['right-left']) {\n                        // 上下无空间，但是左侧或右侧有空间\n                        // 随便给个水平方向就好\n                        strPosition = ({\n                            '4-1': '2-1',\n                            '7-5': '6-8',\n                            '3-2': '3-4'\n                        })[strPosition];\n                        funGetPosition();\n                    }\n                }\n\n                break;\n            }\n            case '1-2': case '8-6': case '4-3': {\n                // left坐标固定\n                numTargetLeft = objBoundTrigger.left - objBoundTarget.width;\n\n                // top坐标确定\n                if (strPosition === '1-2') {\n                    numTargetTop = objBoundTrigger.top;\n                } else if (strPosition === '8-6') {\n                    numTargetTop = objBoundTrigger.top - (objBoundTarget.height - objBoundTrigger.height) / 2;\n                } else {\n                    numTargetTop = objBoundTrigger.top - (objBoundTarget.height - objBoundTrigger.height);\n                }\n\n                strDirection = 'left';\n\n                // 如果左侧超出，则看看右侧有没有空间\n                if (isEdgeAdjust && objIsOverflow['left-right']) {\n                    if (!objIsOverflow['right-left']) {\n                        strPosition = ({\n                            '1-2': '2-1',\n                            '8-6': '6-8',\n                            '4-3': '3-4'\n                        })[strPosition];\n                        // 再执行一次\n                        funGetPosition();\n                    } else if (!objIsOverflow['top-bottom'] || !objIsOverflow['bottom-top']) {\n                        strPosition = ({\n                            '1-2': '1-4',\n                            '8-6': '5-7',\n                            '4-3': '2-3'\n                        })[strPosition];\n                        // 再执行一次\n                        funGetPosition();\n                    }\n                }\n\n                break;\n            }\n        }\n    };\n\n    funGetPosition();\n\n    numTargetLeft = numTargetLeft + objOffsets.x - numOffsetLeft;\n    numTargetTop = numTargetTop + objOffsets.y - numOffsetTop;\n\n    // 边界溢出，当前方位的安全举例处理\n    if (isEdgeAdjust) {\n        // 水平方向的微调\n        if (strDirection == 'top') {\n            numTargetTop = numTargetTop - arrSafeArea[2];\n        } else if (strDirection == 'bottom') {\n            numTargetTop = numTargetTop + arrSafeArea[0];\n        } else if (strDirection == 'left') {\n            numTargetLeft = numTargetLeft - arrSafeArea[1];\n        } else {\n            numTargetLeft = numTargetLeft + arrSafeArea[3];\n        }\n    }\n\n    // 加上滚动距离\n    numTargetTop += numScrollTop;\n    numTargetLeft += numScrollLeft;\n\n    //浮动框显示\n    eleTarget.style.left = `${ Math.round(numTargetLeft) }px`;\n    eleTarget.style.top = `${ Math.round(numTargetTop) }px`;\n\n    // // 此时的eleTarget位置\n    objBoundTarget = eleTarget.getBoundingClientRect();\n    // 对立分享水平方向的微调\n    if (isEdgeAdjust) {\n        if (strDirection == 'top' || strDirection == 'bottom') {\n            if (objBoundTarget.left < arrSafeArea[3]) {\n                numTargetLeft = numTargetLeft + (arrSafeArea[3] - objBoundTarget.left);\n            } else if (objBoundTarget.right + arrSafeArea[1] > numWinWidth) {\n                numTargetLeft = numTargetLeft - (objBoundTarget.right + arrSafeArea[1] - numWinWidth);\n            }\n        } else if (objBoundTarget.top < arrSafeArea[0]) {\n            numTargetTop += arrSafeArea[0] - objBoundTarget.top;\n        } else if (objBoundTarget.bottom + arrSafeArea[2] > numWinHeight) {\n            numTargetTop -= (objBoundTarget.bottom + arrSafeArea[2] - numWinHeight);\n        }\n\n        //浮动框显示\n        eleTarget.style.left = `${ Math.round(numTargetLeft) }px`;\n        eleTarget.style.top = `${ Math.round(numTargetTop) }px`;\n    }\n\n    eleTarget.dataset.align = strPosition;\n    eleTarget.dataset.direction = strDirection;\n\n    // z-index自动最高\n    zIndex();\n\n    if (!eleTarget.zIndex) {\n        eleTarget.zIndex = zIndex;\n    }\n};\n\n[NodeList.prototype, HTMLCollection.prototype].forEach(prop => {\n    prop.follow = function () {\n        [...this].forEach(node => {\n            if (node.nodeType === 1) {\n                node.follow.apply(node, this.arguments);\n            }\n        });\n    };\n});\n", "/**\n * @Color.js\n * @author zhangxinxu\n * @version\n * @created 16-06-03\n * @edited 20-07-16 @Gwokhov\n */\n\nimport './Follow.js';\n\nconst BG_COLOR = 'background-color';\n\nclass Color extends HTMLInputElement {\n    // 指定观察的属性，这样attributeChangedCallback才会起作用\n    static get observedAttributes () {\n        return ['disabled'];\n    }\n\n    constructor () {\n        super();\n        this.setProperty();\n    }\n\n    static addClass (...arg) {\n        return ['ui', 'color', ...arg].join('-');\n    }\n\n    // hsl颜色转换成十六进制颜色\n    static funHslToHex (h, s, l, a) {\n        let r, g, b;\n\n        if (s == 0) {\n        // 非彩色的\n            r = g = b = l;\n        } else {\n            const hue2rgb = function (p, q, t) {\n                if (t < 0) t += 1;\n                if (t > 1) t -= 1;\n                if (t < 1 / 6) return p + (q - p) * 6 * t;\n                if (t < 1 / 2) return q;\n                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n\n                return p;\n            };\n\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1 / 3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1 / 3);\n        }\n\n        const arrRgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n\n        // Alpha值\n        if (a) {\n            arrRgb.push(Math.round(a * 255));\n        }\n\n        return arrRgb.map(rgb => {\n            rgb = rgb.toString(16);\n\n            if (rgb.length == 1) {\n                return '0' + rgb;\n            }\n\n            return rgb;\n        }).join('');\n    }\n\n    // 16进制颜色转换成hsl颜色表示\n    static funHexToHsl (hex) {\n        hex = (hex || '').replace('#', '');\n\n        if (hex.length == 3 || hex.length == 4) {\n            hex = hex.split('').map(function (char) {\n                return char + char;\n            }).join('');\n        }\n\n        const r = parseInt(hex.slice(0, 2), 16) / 255;\n        const g = parseInt(hex.slice(2, 4), 16) / 255;\n        const b = parseInt(hex.slice(4, 6), 16) / 255;\n\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h, s;\n        const l = (max + min) / 2;\n\n        if (max == min) {\n        // 非彩色\n            h = s = 0;\n        } else {\n            const d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n        }\n        if (hex.length == 8) {\n            const a = parseInt(hex.slice(6, 8), 16) / 255;\n            return [h, s, l, a];\n        }\n        return [h, s, l];\n    }\n\n    // rgb/rgba颜色转hex\n    static funRgbToHex (rgb) {\n        if (!rgb) {\n            return Color.defaultValue;\n        }\n        let arr = [];\n        let arrA = [];\n\n        // 如果是不全的hex值，不全\n        // 有没有#都支持\n        rgb = rgb.replace('#', '').toLowerCase();\n        if (/^[0-9A-F]{1,6}$/i.test(rgb)) {\n            return '#' + rgb.repeat(Math.ceil(6 / rgb.length)).slice(0, 6);\n        }\n        if (/^[0-9A-F]{1,8}$/i.test(rgb)) {\n            return '#' + rgb.repeat(Math.ceil(8 / rgb.length)).slice(0, 8);\n        }\n\n        // 如果是rgb(a)色值\n        arr = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)/i);\n        arrA = rgb.match(/^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+),\\s*([0|1]?\\.?\\d+)/i);\n        const hex = (x) => ('0' + parseInt(x, 10).toString(16)).slice(-2);\n\n        if (arr && arr.length == 4) {\n            return `#${hex(arr[1])}${hex(arr[2])}${hex(arr[3])}`;\n        }\n\n        if (arrA && arrA.length == 5) {\n            return `#${hex(arrA[1])}${hex(arrA[2])}${hex(arrA[3])}${Math.round(arrA[4] * 255).toString(16).padStart(2, '0')}`;\n        }\n\n        return Color.defaultValue;\n    }\n\n    get type () {\n        return this.getAttribute('type') || 'color';\n    }\n\n    set type (v) {\n        return this.setAttribute('type', v || 'color');\n    }\n\n    /**\n     * container内的一些事件\n     * @return {Object} 返回当前DOM元素对象\n     */\n    events () {\n        const objElement = this.element;\n        // 元素\n        const eleContainer = objElement.target;\n        // 元素\n        const eleCircle = objElement.circle;\n        const eleFill = objElement.fill;\n        const eleArrow = objElement.arrow;\n        // 面板内部唯一的输入框元素\n        const eleField = objElement.field;\n        // 透明度滑动条\n        const eleOpacity = objElement.opacity;\n\n        eleContainer.addEventListener('click', (event) => {\n            const eleTarget = event.target;\n\n            // 选择的颜色值\n            let strValue = '';\n            // 当前类名\n            const strCl = eleTarget.className;\n            // 按钮分类别处理\n            if (/cancel/.test(strCl)) {\n                // 1. 取消按钮\n                this.hide();\n            } else if (/lump/.test(strCl)) {\n                // 3. 小色块\n                strValue = eleTarget.getAttribute('data-color');\n                this.value = '#' + strValue;\n            } else if (/switch/.test(strCl)) {\n                // 4. 面板类名切换按钮\n                if (eleTarget.textContent === '更多') {\n                    objElement.more.style.display = 'block';\n                    objElement.basic.style.display = 'none';\n                    eleTarget.textContent = '基本';\n                    objElement.mode.setAttribute('data-mode', 'basic');\n                } else {\n                    objElement.more.style.display = 'none';\n                    objElement.basic.style.display = 'block';\n                    eleTarget.textContent = '更多';\n                    objElement.mode.setAttribute('data-mode', 'more');\n                }\n                // 面板的色块啊，圆和尖角位置匹配\n                this.match();\n            }\n        });\n\n        // 输入框事件\n        eleField.addEventListener('input', () => {\n            const value = this.value;\n            if (/^[0-9A-F]{6}$/i.test(value) || /^[0-9A-F]{8}$/i.test(value)) {\n                this.match();\n            } else if (/^[0-9A-F]{3, 4}$/i.test(value)) {\n                this.match(Color.funRgbToHex('#' + value).replace('#', ''));\n            }\n        });\n\n        eleField.addEventListener('keyup', (event) => {\n            if (event.keyCode == 13) {\n                let strValue = eleField.value;\n                if (strValue) {\n                    if (eleOpacity) {\n                        strValue = Color.funRgbToHex('#' + strValue).replace('#', '');\n                    } else {\n                        strValue = Color.funRgbToHex('#' + strValue.slice(0, 6)).replace('#', '');\n                    }\n                    this.value = '#' + strValue;\n                }\n                this.hide();\n            }\n        });\n\n        // 透明度改变的时候\n        if (eleOpacity) {\n            eleOpacity.addEventListener('input', () => {\n                let strValue = eleField.value;\n                let curOpacity =  Math.round(eleOpacity.value / 100 * 255).toString(16).padStart(2, '0');\n\n                if (strValue) {\n                    let strValueColor = strValue.slice(0, 6) + curOpacity;\n                    this.value = strValueColor;\n                }\n            });\n        }\n\n\n        // 滑块拖动事件\n        const objPosArrow = {};\n        const objPosCircle = {};\n        // 三角上下\n        eleArrow.addEventListener('pointerdown', (event) => {\n            event.preventDefault();\n\n            objPosArrow.pageY = event.pageY;\n            objPosArrow.top = parseFloat(window.getComputedStyle(eleArrow).top);\n        });\n        eleFill.addEventListener('pointerdown', (event) => {\n            event.preventDefault();\n\n            // 5. 渐变色的覆盖层\n            // offsetLeft, offsetTop\n            let eleTarget = event.target;\n            const objRect = eleTarget.getBoundingClientRect();\n            const numOffsetTop = event.pageY - window.pageYOffset - objRect.top;\n\n            eleArrow.style.top = numOffsetTop + 'px';\n\n            // 赋值\n            this.isTrustedEvent = true;\n            this.value = this.getValueByStyle();\n\n            objPosArrow.pageY = event.pageY;\n            objPosArrow.top = parseFloat(window.getComputedStyle(eleArrow).top);\n        });\n\n        // 范围上下左右\n        eleCircle.parentElement.querySelectorAll('a').forEach((eleRegion) => {\n            eleRegion.addEventListener('pointerdown', (event) => {\n                event.preventDefault();\n\n                objPosCircle.pageY = event.pageY;\n                objPosCircle.pageX = event.pageX;\n                // 当前位移位置\n                eleCircle.style.left = event.offsetX + 'px';\n                eleCircle.style.top = event.offsetY + 'px';\n                objPosCircle.top = parseFloat(event.offsetY);\n                objPosCircle.left = parseFloat(event.offsetX);\n\n                // UI变化\n                this.isTrustedEvent = true;\n                this.value = this.getValueByStyle();\n            });\n        });\n\n        document.addEventListener('pointermove', (event) => {\n            if (typeof objPosArrow.top == 'number') {\n                event.preventDefault();\n\n                let numTop = objPosArrow.top + (event.pageY - objPosArrow.pageY);\n                const numMaxTop = eleArrow.parentElement.clientHeight;\n\n                // 边界判断\n                if (numTop < 0) {\n                    numTop = 0;\n                } else if (numTop > numMaxTop) {\n                    numTop = numMaxTop;\n                }\n                eleArrow.style.top = numTop + 'px';\n                // 赋值，此次赋值，无需重定位\n                this.isTrustedEvent = true;\n                this.value = this.getValueByStyle();\n            } else if (typeof objPosCircle.top == 'number') {\n                event.preventDefault();\n\n                const objPos = {\n                    top: event.pageY - objPosCircle.pageY + objPosCircle.top,\n                    left: event.pageX - objPosCircle.pageX + objPosCircle.left\n                };\n\n                const objMaxPos = {\n                    top: eleCircle.parentElement.clientHeight,\n                    left: eleCircle.parentElement.clientWidth\n                };\n\n                // 边界判断\n                if (objPos.left < 0) {\n                    objPos.left = 0;\n                } else if (objPos.left > objMaxPos.left) {\n                    objPos.left = objMaxPos.left;\n                }\n                if (objPos.top < 0) {\n                    objPos.top = 0;\n                } else if (objPos.top > objMaxPos.top) {\n                    objPos.top = objMaxPos.top;\n                }\n\n                // 根据目标位置位置和变色\n                const numColorH = objPos.left / objMaxPos.left;\n                const strColorS = 1 - objPos.top / objMaxPos.top;\n\n                // 圈圈定位\n                eleCircle.style.left = objPos.left + 'px';\n                eleCircle.style.top = objPos.top + 'px';\n\n                const strHsl = `hsl('${[360 * numColorH, 100 * strColorS + '%', '50%'].join()})`;\n\n                eleCircle.style[BG_COLOR] = strHsl;\n\n                // 赋值\n                this.isTrustedEvent = true;\n                this.value = this.getValueByStyle();\n            }\n        }, {\n            passive: false\n        });\n        document.addEventListener('pointerup', () => {\n            objPosArrow.top = null;\n            objPosCircle.top = null;\n        });\n\n        // 滑块的键盘支持\n        eleFill.parentElement.querySelectorAll('a').forEach((eleButton) => {\n            eleButton.addEventListener('keydown', (event) => {\n                // 上下控制\n                if (event.keyCode == 38 || event.keyCode == 40) {\n                    event.preventDefault();\n\n                    let numTop = parseFloat(window.getComputedStyle(eleArrow).top);\n                    const numMaxTop = eleFill.clientHeight;\n\n                    if (event.keyCode == 38) {\n                        numTop--;\n                        if (numTop < 0) {\n                            numTop = 0;\n                        }\n                    } else {\n                        numTop++;\n                        if (numTop > numMaxTop) {\n                            numTop = numMaxTop;\n                        }\n                    }\n\n                    const ariaLabel = eleArrow.getAttribute('aria-label');\n\n                    eleArrow.style.top = numTop + 'px';\n                    eleArrow.setAttribute('aria-label', ariaLabel.replace(/\\d+/, Math.round(100 * numTop / numMaxTop)));\n\n                    // 赋值，此次赋值，无需重定位\n                    this.isTrustedEvent = true;\n                    this.value = this.getValueByStyle();\n                }\n            });\n        });\n\n        // 圈圈的键盘访问\n        // 区域背景的键盘支持\n        eleCircle.parentElement.querySelectorAll('a').forEach((eleRegion) => {\n            eleRegion.addEventListener('keydown', (event) => {\n                // 上下左右控制\n                if (event.keyCode >= 37 && event.keyCode <= 40) {\n                    event.preventDefault();\n\n                    const objStyleCircle = window.getComputedStyle(eleCircle);\n\n                    let numTop = parseFloat(objStyleCircle.top);\n                    let numLeft = parseFloat(objStyleCircle.left);\n\n                    const numMaxTop = eleRegion.clientHeight;\n                    const numMaxLeft = eleRegion.clientWidth;\n\n                    if (event.keyCode == 38) {\n                        // up\n                        numTop--;\n                        if (numTop < 0) {\n                            numTop = 0;\n                        }\n                    } else if (event.keyCode == 40) {\n                        // down\n                        numTop++;\n                        if (numTop > numMaxTop) {\n                            numTop = numMaxTop;\n                        }\n                    } else if (event.keyCode == 37) {\n                        // left\n                        numLeft--;\n                        if (numLeft < 0) {\n                            numLeft = 0;\n                        }\n                    } else if (event.keyCode == 39) {\n                        // down\n                        numLeft++;\n                        if (numLeft > numMaxLeft) {\n                            numLeft = numMaxLeft;\n                        }\n                    }\n\n                    eleCircle.style.left = numLeft + 'px';\n                    eleCircle.style.top = numTop + 'px';\n\n                    // 赋值\n                    this.isTrustedEvent = true;\n                    this.value = this.getValueByStyle();\n                }\n            });\n        });\n\n        return this;\n    }\n\n    /**\n     * container内HTML的创建\n     * @return {Object} 返回当前DOM元素对象\n     */\n    create () {\n        // 元素\n        const eleContainer = this.element.target;\n        const isSupportOpacity = this.type === 'color-opacity';\n\n        // switch button\n        const strHtmlConvert = `<button class=\"${Color.addClass('switch')} colorMode\" data-mode=\"more\" role=\"button\">更多</button>`;\n        // current color\n\n        const strHtmlCurrent =\n        `<div class=\"${Color.addClass('current')}\">\n            <i class=\"${isSupportOpacity ? Color.addClass('current', 'square', 'opacity')  : Color.addClass('current', 'square')} colorCurrent\"></i>\n            #<input class=\"${Color.addClass('current', 'input')}\" value=\"${this.value.replace('#', '')}\">\n        </div>`;\n\n        // const arrBasicColor = this.params.color.basic;\n        const arrBasicColorPreset = this.params.color.basicPreset;\n        const arrFixedColor = this.params.color.fixed;\n\n        // body\n        const strHtmlBody = `<div class=\"${Color.addClass('body')}\">` +\n            (function () {\n                // basic color picker\n                let strHtml = `<div class=\"${Color.addClass('basic')} colorBasicX\" role=\"listbox\">`;\n                let arrCommonColors = (localStorage.commonColors || '').split(',');\n                // color left\n                strHtml += `<aside class=\"${Color.addClass('basic', 'l')}\">` + (function () {\n                    return arrFixedColor.concat(arrCommonColors[0] || '0ff', arrCommonColors[1] || '800180').map(function (color) {\n                        const strColor = Color.funRgbToHex(color).replace('#', '');\n\n                        return `<a href=\"javascript:\" class=\"${Color.addClass('lump')}\" data-color=\"${strColor}\" aria-label=\"${strColor}\" style=\"${BG_COLOR}:#${strColor}\" role=\"option\"></a>`;\n                    }).join('');\n                })() + '</aside>';\n\n                // color main\n                strHtml = strHtml + `<div class=\"${Color.addClass('basic', 'r')}\">` + (function () {\n                    let strHtmlRG = '';\n\n                    arrBasicColorPreset.forEach(colorItem => {\n                        strHtmlRG += `<a href=\"javascript:\" title=\"#${colorItem}${isSupportOpacity ? 'ff' : ''}\" class=\"${Color.addClass('lump', 'preset')}\" data-color=\"${colorItem}${isSupportOpacity ? 'ff' : ''}\" style=\"${BG_COLOR}:#${colorItem}${isSupportOpacity ? 'ff' : ''}\" aria-label=\"${colorItem}${isSupportOpacity ? 'ff' : ''}\" role=\"option\"></a>`;\n                    });\n\n                    return strHtmlRG;\n                })() + '</div>';\n\n                return strHtml + '</div>';\n            })() +\n\n            (function () {\n                // more color picker\n                let html = `<div class=\"${Color.addClass('more')} colorMoreX\">`;\n                // color left\n                html += `<div class=\"${Color.addClass('more', 'l')}\">\n                <a href=\"javascript:\" class=\"${Color.addClass('cover', 'white')}\" aria-label=\"色域背景块\" role=\"region\"></a><div class=\"${Color.addClass('circle')} colorCircle\"></div>\n                <div class=\"${Color.addClass('gradient')}\">\n                </div>\n                </div><div class=\"${Color.addClass('more', 'r')}\">\n                    <div class=\"${Color.addClass('more', 'fill')} colorFill\">\n                        <a href=\"javascript:\" class=\"${Color.addClass('more', 'cover')}\" aria-label=\"明度控制背景条\" role=\"region\"></a>\n                        <div class=\"${Color.addClass('gradient')}\" style=\"background: linear-gradient(#ffffff 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0) 50%, ${Color.defaultValue} 100%);\">\n                        </div>\n                    </div>\n                    <a href=\"javascript:\" class=\"${Color.addClass('more', 'arrow')} colorArrow\" role=\"slider\" aria-label=\"明度控制按钮：100%\"></a>\n                </div>`;\n\n                return html + '</div>';\n            })() +\n            (function () {\n                // 透明度-滑动条\n                if (isSupportOpacity) {\n                    let opacityHtml = '<div' + ` class=\"${Color.addClass('opacity')}\">透明度：<input class=\"${Color.addClass('opacity', 'range')} colorOpacity\"` + 'type=\"range\"  value=\"100\" min=\"0\" max=\"100\" step=\"1\" data-tips=\"${value}%\" is=\"ui-range\"></div>';\n                    return opacityHtml;\n                }\n                return '';\n            })() + '</div>';\n\n        // footer\n        const strHtmlFooter = '';\n        // append\n        eleContainer.innerHTML = strHtmlConvert + strHtmlCurrent + strHtmlBody + strHtmlFooter;\n\n        // 一些元素\n        Object.assign(this.element, {\n            field: eleContainer.querySelector('input'),\n            basic: eleContainer.querySelector('.colorBasicX'),\n            more: eleContainer.querySelector('.colorMoreX'),\n            mode: eleContainer.querySelector('.colorMode'),\n            opacity: eleContainer.querySelector('.colorOpacity'),\n            circle: eleContainer.querySelector('.colorCircle'),\n            fill: eleContainer.querySelector('.colorFill'),\n            arrow: eleContainer.querySelector('.colorArrow'),\n            current: eleContainer.querySelector('.colorCurrent')\n        });\n\n        // filed做一些事情\n        const propValue = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');\n        let eleField = this.element.field;\n\n        Object.defineProperty(eleField, 'value', {\n            ...propValue,\n            set (value) {\n                // 赋值\n                propValue.set.call(this, value);\n                // 回调触发\n                eleField.dispatchEvent(new CustomEvent('change'));\n            }\n        });\n\n        if (document.body.contains(eleContainer) == false) {\n            document.body.appendChild(eleContainer);\n        }\n\n        // 事件\n        this.events();\n\n        return this;\n    }\n\n    /**\n     * 面板的色块啊，圆和尖角位置匹配\n     * @param  {String} value 面板UI相匹配的色值，可缺省，表示使用当前输入框的颜色值进行UI变化\n     * @return {Object}       返回当前DOM元素对象\n     */\n    match (value) {\n        // 首先要面板显示\n        if (this.display != true) {\n            return this;\n        }\n        // 元素对象\n        const objElement = this.element;\n        // 元素\n        const eleContainer = objElement.target;\n        const eleCurrent = objElement.current;\n        // 更多元素\n        const eleMore = objElement.more;\n        // 元素\n        const eleCircle = objElement.circle;\n        const eleFill = objElement.fill;\n        const eleArrow = objElement.arrow;\n        // 面板内部唯一的输入框元素\n        const eleField = objElement.field;\n\n        const eleOpacity = objElement.opacity;\n\n        // 重定位\n        let isRePosition = true;\n        if (value === false) {\n            isRePosition = false;\n        }\n\n        // 当前的颜色值\n        let strValue = value || eleField.value;\n        if (strValue == '') {\n            // 如果输入框没有值\n            // 使用之前一个合法的颜色值作为现在值\n            strValue = Color.funRgbToHex(getComputedStyle(eleCurrent)[BG_COLOR]).replace('#', '');\n            eleField.value = strValue;\n        }\n        strValue = strValue.replace('#', '');\n\n        // 色块值示意&透明度条状态更新\n        if (eleOpacity) {\n            if (/^[0-9A-F]{8}$/i.test(strValue)) {\n                eleOpacity.value = parseInt(strValue.slice(6, 8), 16) / 255 * 100;\n            }\n            if (/^[0-9A-F]{6}$/i.test(strValue)) {\n                eleField.value += Math.round(eleOpacity.value / 100 * 255).toString(16).padStart(2, '0');\n            }\n        } else {\n            eleCurrent.style[BG_COLOR] = '#' + strValue;\n        }\n\n        // 当前是基本色面板还是任意色面板\n        if (window.getComputedStyle(eleMore).display == 'none') {\n            // 1. 基本色\n            // 所有当前高亮的元素不高亮\n            const eleActive = eleContainer.querySelector('.active');\n            if (eleActive) {\n                eleActive.classList.remove('active');\n            }\n            // 所有颜色一致的高亮\n            const eleColorMatch = eleContainer.querySelector(`a[data-color=\"${strValue.toUpperCase()}\"]`);\n            if (eleColorMatch) {\n                eleColorMatch.classList.add('active');\n            }\n        } else {\n            let numWidth = eleCircle.parentElement.clientWidth;\n            let numHeight = eleCircle.parentElement.clientHeight;\n\n            let numColorH = 0;\n            let numColorS = 1;\n            let numColorL = 0.5;\n\n            // 滑块和尖角的颜色和位置\n            if (isRePosition == true) {\n                // to HSL\n                let arrHSL = Color.funHexToHsl(strValue);\n                // hsl value\n                numColorH = arrHSL[0];\n                numColorS = arrHSL[1];\n                numColorL = arrHSL[2];\n\n                eleCircle.style.left = numWidth * numColorH + 'px';\n                eleCircle.style.top = numHeight * (1 - numColorS) + 'px';\n\n                eleArrow.style.top = eleArrow.parentElement.clientHeight * (1 - numColorL) + 'px';\n            } else {\n                numColorH = parseFloat(eleCircle.style.left || 0) / numWidth;\n                numColorS = 1 - parseFloat(eleCircle.style.top || 0) / numHeight;\n            }\n\n            // 滑块和尖角的颜色和位置\n            let strColor = `hsl(${[360 * numColorH, Math.round(100 * numColorS) + '%', '50%'].join()}`;\n            eleFill.style[BG_COLOR] = strColor;\n            eleCircle.style[BG_COLOR] = strColor;\n        }\n\n        return this;\n    }\n\n    /**\n     * 浮层定位方法\n     * @return undefined\n     */\n    position () {\n        // 面板定位\n        this.follow();\n\n        return this;\n    }\n\n    /**\n    * 颜色面板显示\n    * @return undefined\n    */\n    show () {\n        // 元素\n        let eleContainer = this.element.target;\n\n        // 输入框赋值\n        if (eleContainer.innerHTML.trim() == '') {\n            this.create();\n        }\n\n        // 改变显示状态\n        this.display = true;\n\n        // 面板显示\n        eleContainer.style.display = 'inline';\n        // 键盘ESC隐藏支持\n        eleContainer.classList.add('ESC');\n\n        // aria\n        this.setAttribute('aria-expanded', 'true');\n\n        // 定位\n        this.position();\n\n        // 面板UI匹配\n        const eleCurrent = this.element.current;\n        if (!eleCurrent.getAttribute('style')) {\n            eleCurrent.style[BG_COLOR] = this.value;\n        }\n        this.match();\n\n        // show callback\n        this.dispatchEvent(new CustomEvent('show', {\n            detail: {\n                type: 'ui-color'\n            }\n        }));\n\n        return this;\n    }\n\n    /**\n     * 颜色面板隐藏\n     * @return undefined\n     */\n    hide () {\n        let eleContainer = this.element.target;\n        // 面板隐藏\n        eleContainer.style.display = 'none';\n        eleContainer.classList.remove('ESC');\n\n        // aria\n        this.setAttribute('aria-expanded', 'false');\n\n        // 改变显示状态\n        this.display = false;\n\n        // 聚焦，键盘访问顺序回归正常\n        this.focus();\n\n        // hide callback\n        // 因为this.drop.hide的时候还会执行一次这里的hide()方法，\n        // 因此这里加了个display判断\n        // 避免连续两次hide事件的实习\n        this.dispatchEvent(new CustomEvent('hide', {\n            detail: {\n                type: 'ui-color'\n            }\n        }));\n\n        return this;\n    }\n\n    /**\n     * 给当前元素对象扩展方法、重置原生value属性\n     */\n    setProperty () {\n\n        /**\n         * 根据坐标位置获得hsl值\n         * 私有\n         * @return {String} [返回当前坐标对应的hex表示的颜色值]\n         */\n        Object.defineProperty(this, 'getValueByStyle', {\n            value: () => {\n            // 需要的元素\n                const eleCircle = this.element.circle;\n                const eleArrow = this.element.arrow;\n                const eleOpacity = this.element.opacity;\n\n                if (eleCircle.length * eleArrow.length == 0) {\n                    return Color.defaultValue;\n                }\n\n                let numColorH, numColorS, numColorL;\n                // get color\n                // hsl color\n                if (eleCircle.style.left) {\n                    numColorH = parseFloat(window.getComputedStyle(eleCircle).left) / eleCircle.parentElement.clientWidth;\n                } else {\n                    numColorH = 0;\n                }\n                if (eleCircle.style.top) {\n                    numColorS = 1 - parseFloat(window.getComputedStyle(eleCircle).top) / eleCircle.parentElement.clientHeight;\n                } else {\n                    numColorS = 1;\n                }\n                if (eleArrow.style.top) {\n                    numColorL = 1 - parseFloat(window.getComputedStyle(eleArrow).top) / eleArrow.parentElement.clientHeight;\n                } else {\n                    numColorL = 0;\n                }\n                // 支持透明度\n                if (eleOpacity && eleOpacity.value) {\n                    return '#' + Color.funHslToHex(numColorH, numColorS, numColorL, eleOpacity.value / 100);\n                }\n                return '#' + Color.funHslToHex(numColorH, numColorS, numColorL);\n            }\n        });\n\n        const props = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');\n        Object.defineProperty(Color.prototype, 'value', {\n            ...props,\n            set (value) {\n                let strValue = value;\n                // 元素\n                // 目前的颜色值\n                let strOldValue = this.value;\n                // 取值还是赋值\n                if (typeof value == 'string') {\n                    // 如果是纯字母，则认为是关键字\n                    if (/^[a-z]{3,}$/.test(strValue)) {\n                        document.head.style.backgroundColor = strValue;\n                        strValue = window.getComputedStyle(document.head).backgroundColor;\n                        document.head.style.backgroundColor = '';\n                    }\n\n                    // 使用hex值\n                    strValue = Color.funRgbToHex(strValue);\n                    // 赋值\n                    props.set.call(this, strValue);\n\n                    // 可能存在还未和页面建立联系的时候执行value赋值\n                    if (!this.params) {\n                        return;\n                    }\n\n                    // 作为常用颜色记录下来\n                    const strCommonColors = localStorage.commonColors || '';\n                    let arrCommonColors = strCommonColors.split(',');\n                    // 前提颜色非纯灰色若干色值\n                    const arrFixedColor = this.params.color.fixed;\n\n                    if (arrFixedColor.some((strFixedColor) => {\n                        return Color.funRgbToHex(strFixedColor) == strValue;\n                    }) == false) {\n                        // 过滤已经存在的相同颜色的色值\n                        arrCommonColors = arrCommonColors.filter((strValueWithSharp) => {\n                            return strValueWithSharp && strValueWithSharp != strValue.replace('#', '');\n                        });\n\n                        // 从前面插入\n                        arrCommonColors.unshift(strValue.replace('#', ''));\n\n                        // 本地存储\n                        localStorage.commonColors = arrCommonColors.join();\n\n                        // 2个动态色值更新\n                        const eleBasic = this.element.basic;\n                        if (eleBasic) {\n                            const eleAsideColors = eleBasic.querySelectorAll('aside a');\n                            const eleBasicColorLast = eleAsideColors[eleAsideColors.length - 2];\n                            const eleBasicColorSecond = eleAsideColors[eleAsideColors.length - 1];\n\n                            eleBasicColorLast.setAttribute('data-color', arrCommonColors[0]);\n                            eleBasicColorLast.setAttribute('aria-label', arrCommonColors[0]);\n                            eleBasicColorLast.style[BG_COLOR] = strValue;\n\n                            const strColorSecond = arrCommonColors[1] || '0ff';\n                            eleBasicColorSecond.setAttribute('data-color', strColorSecond);\n                            eleBasicColorSecond.setAttribute('aria-label', strColorSecond);\n                            eleBasicColorSecond.style[BG_COLOR] = '#' + strColorSecond;\n                        }\n                    }\n\n                    this.style.setProperty('--ui-color-opacity', strValue);\n                    this.element.target.style.setProperty('--ui-color-opacity', strValue);\n                    if (this.element.field) {\n                        this.element.field.value = strValue.replace('#', '');\n                    }\n\n                    // 面板上的值，各种定位的匹配\n                    if (this.isTrustedEvent) {\n                        this.match(false);\n                        this.isTrustedEvent = null;\n                    } else {\n                        this.match();\n                    }\n                } else if (!strOldValue) {\n                    // 取值\n                    // 如果默认无值，使用颜色作为色值，一般出现在初始化的时候\n                    strOldValue = Color.defaultValue;\n                    // 赋值\n                    props.set.call(this, strOldValue);\n                }\n\n                if (strOldValue && strValue != strOldValue) {\n                    this.dispatchEvent(new CustomEvent('change', {\n                        'bubbles': true\n                    }));\n                    this.dispatchEvent(new CustomEvent('input', {\n                        'bubbles': true\n                    }));\n                }\n            }\n        });\n\n        // 标题设置\n        if (!this.title) {\n            this.title = (this.disabled ? '禁止' : '') + '颜色选择';\n        }\n    }\n\n    attributeChangedCallback (name) {\n        if (name == 'disabled') {\n            if (this.title == '颜色选择' && this.disabled) {\n                this.title = '禁止颜色选择';\n            } else if (this.title == '禁止颜色选择' && !this.disabled) {\n                this.title = '颜色选择';\n            }\n        }\n    }\n\n    connectedCallback () {\n        if (!this.id) {\n            // 创建随机id\n            this.id = 'lulu_' + (Math.random() + '').split('.')[1];\n        }\n\n        // 阻止默认的颜色选择出现\n        this.addEventListener('click', event => {\n            event.preventDefault();\n\n            if (this.display != true) {\n                this.show();\n            }\n        });\n\n        // 默认朝下居中对齐\n        if (!this.dataset.position) {\n            this.dataset.position = '7-5';\n        }\n\n        // 浮层容器\n        const eleContainer = document.createElement('div');\n        eleContainer.classList.add(Color.addClass('container'));\n        eleContainer.id = ('lulu_' + Math.random()).replace('0.', '');\n        this.dataset.target = eleContainer.id;\n\n        // 全局暴露的一些元素\n        this.element = {\n            target: eleContainer\n        };\n\n        if (this.getAttribute('type') === 'color-opacity') {\n            this.style.setProperty('--ui-color-opacity', this.value);\n            eleContainer.style.setProperty('--ui-color-opacity', this.value);\n        }\n\n        // 全局的基础色值\n        const arrBasicColor = ['0', '3', '6', '9', 'c', 'f'];\n        const arrBasicColorPreset = ['2a80eb', '0057c3', '7fdbff', 'f7f9fa', '1cad70', '3d9970', '39cccc', 'dddddd', 'eb4646', 'ab2526', 'ef8a5e', 'a2a9b6', 'f59b00', 'de6d00', 'ffdc00', '4c5161'];\n        const arrFixedColor = arrBasicColor.concat('eb4646', '1cad70', '2a80eb', 'f59b00');\n\n        this.params = this.params || {};\n\n        this.params.color = {\n            basic: arrBasicColor,\n            basicPreset: arrBasicColorPreset,\n            fixed: arrFixedColor\n        };\n\n        // 点击空白隐藏浮层的处理\n        document.addEventListener('click', event => {\n            const eleClicked = event && event.target;\n\n            if (!eleClicked || !this.display) {\n                return;\n            }\n\n            if (eleClicked != this && eleContainer.contains(eleClicked) == false) {\n                this.hide();\n            }\n        });\n\n        // 窗口尺寸变化时候的处理\n        window.addEventListener('resize', () => {\n            if (this.display) {\n                this.position();\n            }\n        });\n\n        // 全局事件\n        this.dispatchEvent(new CustomEvent('connected', {\n            detail: {\n                type: 'ui-color'\n            }\n        }));\n\n        this.isConnectedCallback = true;\n    }\n}\n\nColor.defaultValue = '#000000';\n\nif (!customElements.get('ui-color')) {\n    customElements.define('ui-color', Color, {\n        extends: 'input'\n    });\n}\n\nexport default Color;\n"],
  "mappings": "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",
  "names": ["p", "q"]
}
