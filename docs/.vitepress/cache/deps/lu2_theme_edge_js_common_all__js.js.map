{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/lu2@2024.9.2/node_modules/lu2/theme/edge/js/common/all.js"],
  "sourcesContent": ["/**\n * @Keyboard.js\n * @author zhangxinxu\n * @version\n * Created: 17-06-13\n */\n(function (doc, win) {\n    if (win.isKeyEventBind || !doc.addEventListener) {\n        return {};\n    }\n\n    /*\n    ** HTML accesskey辅助增强脚本\n    ** 作用包括：\n    ** 1. 统一IE浏览器和其它浏览器的快捷访问行为；\n    ** 2. 增加单独accesskey属性值对应按键按下的focus行为；\n    ** 3. windows系统下Firefox也支持 Alt + key的访问能力；\n    ** 4. 增加shift + '?'(keyCode=191)键的提示行为支持；\n    */\n\n    // 操作系统和浏览器设备检测\n    var ua = navigator.platform || navigator.userAgent;\n\n    var system = 'windows';\n\n    if (/mac/i.test(ua)) {\n        system = 'mac';\n    }\n\n    // 浏览器判断\n    var browser = 'chrome';\n    if (typeof doc.mozFullScreen != 'undefined') {\n        browser = 'moz';\n    } else if (typeof doc.msHidden != 'undefined' || typeof doc.hidden == 'undefined') {\n        browser = 'ie';\n    }\n\n    // 快捷键组合\n    var keyPrefix = ({\n        windows: {\n            ctrlKey: false,\n            altKey: true,\n            shiftKey: false\n        },\n        mac: {\n            ctrlKey: true,\n            altKey: true,\n            shiftKey: false\n        }\n    })[system];\n\n    // 获取字符Unicode值方法\n    var U = function (a, b) {\n        if (!a) {\n            return '';\n        }\n        b = b || 'x';\n        var c = '';\n        var d = 0;\n        var e;\n\n        for (d; d < a.length; d += 1) a.charCodeAt(d) >= 55296 && a.charCodeAt(d) <= 56319 ? (e = (65536 + 1024 * (Number(a.charCodeAt(d)) - 55296) + Number(a.charCodeAt(d + 1)) - 56320).toString(16), d += 1) : e = a.charCodeAt(d).toString(16),\n        c += b + e;\n\n        return c.substr(b.length);\n    };\n\n    // 提示当前元素快捷键的方法\n    var timerTips = null;\n    var tips = function (arrEles) {\n        // 已经显示中，忽略\n        if (doc.hasTipsShow) {\n            return;\n        }\n        // 页面的滚动高度\n        var scrollTop = doc.documentElement.scrollTop || doc.body.scrollTop;\n        var scrollLeft = doc.documentElement.scrollLeft || doc.body.scrollLeft;\n\n        // 遍历创建提示元素\n        arrEles.forEach(function (ele) {\n\n            // 如果元素隐藏，也忽略\n            if (ele.clientHeight * ele.clientWidth == 0) {\n                return;\n            }\n\n            var accesskey = ele.getAttribute('accesskey');\n            var arrAccesskey = [];\n            for (var key in keyPrefix) {\n                if (keyPrefix[key]) {\n                    arrAccesskey.push(key);\n                }\n            }\n            arrAccesskey.push(accesskey);\n\n            // 当前元素相对于文档的偏移\n            var bounding = ele.getBoundingClientRect();\n\n            // 创建tips提示元素\n            var div = doc.createElement('div');\n            div.className = 'ui-kbd-tips AK_Tips';\n            div.setAttribute('style', 'top:' + (bounding.top + scrollTop) + 'px;left:' + (bounding.left + scrollLeft) + 'px;');\n            div.innerHTML = arrAccesskey.map(function (key) {\n                return '<kbd>' + key.replace('Key', '') + '</kbd>';\n            }).join('+');\n\n            doc.body.appendChild(div);\n\n            div.fromTarget = ele;\n        });\n\n        // 标记，避免重复生成\n        doc.hasTipsShow = true;\n\n        // 一段时间隐藏\n        timerTips = setTimeout(function () {\n            removeTips();\n        }, 3000);\n    };\n    // 隐藏tips\n    var removeTips = function () {\n        clearTimeout(timerTips);\n        // 移除所有的快捷键提示\n        var elesTips = doc.querySelectorAll('.AK_Tips');\n        [].slice.call(elesTips).forEach(function (ele) {\n            if (ele.fromTarget) {\n                ele.fromTarget.hasTipsShow = null;\n            }\n            doc.body.removeChild(ele);\n        });\n        doc.hasTipsShow = null;\n    };\n\n    // accesskey键盘处理\n    doc.addEventListener('keydown', function (event) {\n        // 当前元素是否是可输入的input或者textarea\n        var isTargetInputable = false;\n        var eleTarget = event.target || doc.activeElement;\n        var tagName = eleTarget.tagName.toLowerCase();\n        if (tagName == 'textarea' || (tagName == 'input' && /checkbox|radio|select|file|button|image|hidden/i.test(eleTarget.type) == false)) {\n            isTargetInputable = true;\n        }\n\n        // 遍历所有设置了accesskey的符合HTML4.0.1规范的元素\n        // 包括<a>, <area>, <button>, <input>, <label>, <legend>以及<textarea>\n        var elesOwnAccesskey = doc.querySelectorAll('a[accesskey],area[accesskey],button[accesskey],input[accesskey],label[accesskey],legend[accesskey],textarea[accesskey]');\n        if (elesOwnAccesskey.length == 0) {\n            return;\n        }\n        // 对象列表转换成数组\n        var arrElesOwnAccesskey = [].slice.call(elesOwnAccesskey);\n        // 进行遍历\n        var arrAcceeekey = arrElesOwnAccesskey.map(function (ele) {\n            return ele.getAttribute('accesskey');\n        });\n        // windows下图下直接event.key就是按下的键对应的内容，但老的OS X系统却没有key属性，有的是event.keyIdentifier，表示字符的Unicode值\n        // 根据这个判断按键是否有对应的匹配\n        var indexMatch = -1;\n        arrAcceeekey.forEach(function (accesskey, index) {\n            if ((event.key && event.key == accesskey) || (event.keyIdentifier && parseInt(event.keyIdentifier.toLowerCase().replace('u+', ''), 16) == parseInt(U(accesskey), 16))) {\n                indexMatch = index;\n\n                return false;\n            }\n        });\n\n        // 1. 单独按下某个键的匹配支持\n        if (event.altKey == false && event.shiftKey == false && event.ctrlKey == false) {\n            if (isTargetInputable) {\n                return;\n            }\n\n            // focus高亮\n            if (arrElesOwnAccesskey[indexMatch]) {\n                // 延时目的是让后面的键盘高亮逻辑可以顺利执行\n                setTimeout(function () {\n                    arrElesOwnAccesskey[indexMatch].focus();\n                }, 1);\n                // 阻止内容输入\n                event.preventDefault();\n            }\n        // 2. shift + '?'(keyCode=191)键的提示行为支持\n        } else if (event.altKey == false && event.shiftKey == true && event.ctrlKey == false) {\n            if (event.keyCode == 191 && !isTargetInputable) {\n                doc.hasTipsShow ? removeTips() : tips(arrElesOwnAccesskey);\n            }\n        } else if (arrElesOwnAccesskey[indexMatch] && !isTargetInputable && (browser == 'ie' || browser == 'moz') && event.altKey && !event.shiftKey && !event.ctrlKey) {\n            arrElesOwnAccesskey[indexMatch].click();\n        }\n    });\n    doc.addEventListener('mousedown', function () {\n        removeTips();\n    });\n\n    /*\n    ** CSS :focus或者JS的focus事件让下拉或浮层元素显示的时候键盘交互支持\n    ** 基于data-target属性进行关联\n    */\n\n    var keycode = {\n        37: 'left',\n        38: 'up',\n        39: 'right',\n        40: 'down',\n        13: 'enter',\n        9: 'tab',\n        27: 'esc'\n    };\n    // 键盘高亮类名\n    var className = 'ui-outline';\n    // 高亮类名的添加与删除\n    var classList = {\n        add: function (ele) {\n            ele.classList.add(className);\n        },\n        remove: function (ele) {\n            ele.classList.remove(className);\n        },\n        removeAll: function () {\n            [].slice.call(doc.querySelectorAll('.' + className)).forEach(function (ele) {\n                classList.remove(ele);\n            });\n        },\n        has: function (ele) {\n            ele.classList.contains(className);\n        }\n    };\n\n    // 是否是键盘事件\n    var timerKeyEvent = null;\n    win.isKeyEvent = false;\n\n    doc.addEventListener('keydown', function (event) {\n        win.isKeyEvent = true;\n\n        clearTimeout(timerKeyEvent);\n\n        timerKeyEvent = setTimeout(function () {\n            win.isKeyEvent = false;\n        }, 100);\n\n        // 是否是上下左右键\n        var keyName = keycode[event.keyCode];\n        if (!keyName) {\n            return;\n        }\n\n        // 当前激活元素\n        var trigger = doc.activeElement;\n        if (!trigger || /body/i.test(trigger.tagName)) {\n            return;\n        }\n\n        // 单复选框的增加回车选中，原生是空格键选中\n        if (keyName == 'enter' && (/^radio|checkbox$/i.test(trigger.type) || trigger.getAttribute('tabindex') == '0')) {\n            trigger.click();\n            // 阻止默认的回车行为，主要是表单提交\n            event.preventDefault();\n\n            return;\n        }\n\n        // 如果是ESC退出\n        var eleFirstMatchAttrTarget = null;\n        var eleEscAll = doc.querySelectorAll('.ESC');\n        if (keyName == 'esc' && eleEscAll.length) {\n            [].slice.call(eleEscAll).forEach(function (eleEsc) {\n                var idEsc = eleEsc.id;\n\n                eleFirstMatchAttrTarget = idEsc && doc.querySelector('[data-target=\"' + idEsc + '\"],[data-target2=\"' + idEsc + '\"],ui-drop[target=\"' + idEsc + '\"]');\n\n                if (eleFirstMatchAttrTarget && eleEsc.style.display !== 'none' && eleEsc.clientHeight > 0) {\n                    if (eleFirstMatchAttrTarget.hide) {\n                        eleFirstMatchAttrTarget.hide();\n                    } else if (eleFirstMatchAttrTarget['ui-drop']) {\n                        eleFirstMatchAttrTarget['ui-drop'].hide();\n                    } else {\n                        eleFirstMatchAttrTarget.click();\n                    }\n                } else if (eleEsc == document.activeElement && eleEsc.click) {\n                    eleEsc.click();\n                }\n            });\n        }\n\n        // 对应的面板\n        // 1. data-target 点击出现的面板\n        // 2. data-focus focus出现的面板\n        var attrFocus = trigger.getAttribute('data-focus');\n        var attrTarget = trigger.getAttribute('data-target');\n\n        var target = null;\n\n        if (!attrFocus && !attrTarget) {\n            return;\n        }\n\n        if (attrFocus) {\n            target = doc.getElementById(attrFocus);\n        } else if (attrTarget) {\n            target = doc.getElementById(attrTarget);\n        }\n\n        // 目标元素存在，并且是显示状态\n        if (!target || (target.clientWidth == 0 && target.clientHeight == 0)) {\n            return;\n        }\n\n        // 如果是Tab键\n        if (keyName == 'tab') {\n            classList.removeAll();\n\n            var eleFirstFocusable = target;\n\n            if (!target.getAttribute('tabindex')) {\n                eleFirstFocusable = target.querySelector('a[href], button:not(:disabled), input:not(:disabled)');\n            }\n\n            if (eleFirstFocusable) {\n                eleFirstFocusable.focus();\n            }\n\n            return;\n        }\n\n        // 如果是回车事件\n        if (keyName == 'enter') {\n            var eleFocus = target.querySelector('.' + className);\n            if (eleFocus && attrFocus) {\n                // 阻止默认的回车\n                event.preventDefault();\n                eleFocus.click();\n\n                return;\n            }\n            if (attrTarget) {\n                return;\n            }\n        }\n\n        // ESC退出\n        if (keyName == 'esc') {\n            eleFirstMatchAttrTarget = doc.querySelector('a[data-target=\"' + attrTarget + '\"],input[data-target=\"' + attrTarget + '\"]');\n\n            if (attrFocus) {\n                trigger.blur();\n            } else if (eleFirstMatchAttrTarget && /ESC/.test(eleFirstMatchAttrTarget.className) == false) {\n                eleFirstMatchAttrTarget.click();\n            }\n\n            return;\n        }\n\n        // 如果都符合，同时有目标子元素\n        var arrEleFocusable = [].slice.call(target.querySelectorAll('a[href], button:not(:disabled), input:not(:disabled)'));\n        var index = -1;\n\n        if (arrEleFocusable.length == 0) {\n            return;\n        }\n\n        // 计算出当前索引\n        arrEleFocusable.forEach(function (ele, indexFocus) {\n            if (attrFocus) {\n                if (classList.has(ele)) {\n                    index = indexFocus;\n                }\n            } else if (trigger == ele) {\n                index = indexFocus;\n            }\n            // 先全部清除focus态\n            classList.remove(ele);\n        });\n\n        // 阻止默认的上下键滚屏\n        event.preventDefault();\n        // 索引加加减减\n        if (keyName == 'left' || keyName == 'up') {\n            index--;\n            if (index < 0) {\n                index = -1;\n            }\n        } else if (keyName == 'right' || keyName == 'down') {\n            index++;\n            if (index > arrEleFocusable.length - 1) {\n                index = arrEleFocusable.length;\n            }\n        }\n\n        // 如果有对应的索引元素\n        if (arrEleFocusable[index]) {\n            // 高亮对应的控件元素\n            if (attrFocus) {\n                classList.add(arrEleFocusable[index]);\n            } else {\n                arrEleFocusable[index].focus();\n            }\n        }\n    });\n\n    doc.addEventListener('mousedown', function (event) {\n        var target = event.target;\n        if (target && !classList.has(target)) {\n            classList.removeAll();\n        }\n    });\n\n    doc.addEventListener('click', function (event) {\n        var target = event.target;\n        var eleActive = doc.activeElement;\n\n        var tabindex = target.getAttribute('tabindex') || '-1';\n\n        // 单复选框点击不focus\n        // tabindex>=0 元素点击也不focus（避免outline出现）\n        // 当然，本身outline不是none\n        if (target && target == eleActive && (/^radio|checkbox$/i.test(eleActive.type) || tabindex >= 0) && win.isKeyEvent == false && /none/.test(getComputedStyle(target).outline) == false) {\n            eleActive.blur();\n        }\n    });\n\n    // 全局对a标签按钮进行无障碍角色设置\n    doc.addEventListener('focusin', function (event) {\n        var target = event.target;\n        if (!target) {\n            return;\n        }\n\n        // 无障碍增强\n        if (/^javascript/.test(target.href) && !target.getAttribute('role')) {\n            target.setAttribute('role', 'button');\n        }\n\n        if (!win.isKeyEvent) {\n            return;\n        }\n\n        var objStyleTarget = window.getComputedStyle(target);\n\n        // 键盘高亮\n        if (/none|auto/.test(objStyleTarget.outlineStyle) && (!event.path || event.path[0] === target)) {\n            classList.add(target);\n        }\n    });\n    doc.addEventListener('focusout', function (event) {\n        var target = event.target;\n        if (target) {\n            classList.remove(target);\n        }\n    });\n\n    // 防止多次重复绑定键盘事件\n    win.isKeyEventBind = true;\n\n    return {};\n})(document, window);\n\n/**\n * @Follow.js\n * @author zhangxinxu\n * @version\n * @Created: 15-06-25\n * @edited:  17-06-19\n * @edited: by littleLionGuoQing:  20-05-14 ES6\n * @edited:  2020-11-29 rewrite by zhangxinxu\n */\n\n\n/**\n * 绝对定位元素的定位效果\n * 自动含边界判断\n * 可用在Drop, Tips等组件上\n * @example\n\n * 文档见：https://www.zhangxinxu.com/wordpress/?p=1328 position()方法\n **/\n\nHTMLElement.prototype.follow = function (eleTarget, options) {\n    // 默认参数值\n    let defaults  = {\n        offsets: {\n            x: 0,\n            y: 0\n        },\n        safeArea: [0, 0, 0, 0],\n        // eleTrigger-eleTarget\n        position: '4-1',\n        // 边缘位置自动调整\n        edgeAdjust: true\n    };\n\n    // 判断第一个参数是否是DOM元素，不是的话判断是否是对象，是对象则将第一个参数当作options\n    if (eleTarget && Object.prototype.toString.call(eleTarget) === '[object Object]') {\n        options = eleTarget;\n        eleTarget = null;\n    }\n\n    for (var keyOption in (options || (options = {}))) {\n        if (typeof options[keyOption] == 'undefined') {\n            delete options[keyOption];\n        }\n    }\n\n    let objParams = Object.assign({}, defaults, options);\n\n    // eleTarget 非必须，可 eleTrigger 元素 html 属性指定\n    if (!eleTarget) {\n        let strTarget = this.getAttribute('is-follow') || this.dataset.target;\n        if (!strTarget) {\n            return;\n        }\n        eleTarget = document.getElementById(strTarget) || document.querySelector('.' + strTarget) || document.querySelector(strTarget);\n        if (!eleTarget) {\n            return;\n        }\n    }\n\n    // 合法的位置关系数据\n    let arrLegalPosition = ['4-1', '1-4', '5-7', '2-3', '2-1', '6-8', '3-4', '4-3', '8-6', '1-2', '7-5', '3-2'];\n\n    // eleTrigger 元素属性指定 options，传入的 options 参数优先级更高\n    // offsets\n    let dataOffsets = this.dataset.offsets;\n    let arrOffsets = [];\n    if (objParams.offsets.map && objParams.offsets.length) {\n        arrOffsets = objParams.offsets;\n    } else if (typeof objParams.offsets == 'string') {\n        arrOffsets = objParams.offsets.trim().split(/,\\s*|\\s+/);\n    }\n    if (dataOffsets && !options.offsets) {\n        arrOffsets = dataOffsets.trim().split(/,\\s*|\\s+/);\n    }\n\n    // 如果arrOffsets有值\n    if (arrOffsets.length) {\n        objParams.offsets = {};\n        objParams.offsets.x = arrOffsets[0];\n        objParams.offsets.y = arrOffsets[1] || arrOffsets[0];\n    }\n\n    let dataOffsetX = this.dataset.offsetX;\n    let dataOffsetY = this.dataset.offsetY;\n\n    if (dataOffsetX) {\n        objParams.offsets.x = dataOffsetX;\n    }\n    if (dataOffsetY) {\n        objParams.offsets.y = dataOffsetY;\n    }\n\n    // 转数值\n    objParams.offsets.x *= 1;\n    objParams.offsets.y *= 1;\n\n    // position\n    let dataPosition = this.dataset.position;\n    let dataAlign = this.dataset.align;\n    // data-align是否符合合法位置关系\n    let isDataAlignMatch = arrLegalPosition.some((strLegalPosition) => {\n        return strLegalPosition === dataAlign;\n    });\n    // 若没有设置 data-position，设置了 data-align 也行，若都设置了以 data-position 的值为准\n    if (!dataPosition && dataAlign && isDataAlignMatch) {\n        dataPosition = dataAlign;\n    }\n    if (dataPosition && (!options || !options.position)) {\n        objParams.position = dataPosition;\n    }\n\n    // edge-adjust\n    let dataEdgeAdjust = this.dataset.edgeAdjust || objParams.edgeAdjust;\n    // data-edge-adjust 字符串为 0、none、false 认为是 false，其他都是 true\n    let isEdgeAdjust = !((dataEdgeAdjust === '0') || (dataEdgeAdjust === 'none') || (dataEdgeAdjust === 'false') || (dataEdgeAdjust === false));\n    if (typeof dataEdgeAdjust == 'string' && typeof objParams.edgeAdjust != 'boolean') {\n        objParams.edgeAdjust = isEdgeAdjust;\n    }\n\n    // 先绝对定位，以便获取更准确的尺寸\n    let strOriginPosition = eleTarget.style.position;\n    if (strOriginPosition != 'absolute') {\n        eleTarget.style.position = 'absolute';\n    }\n\n    // 触发元素和目标元素的坐标数据\n    let objBoundTrigger = this.getBoundingClientRect();\n    let objBoundTarget = eleTarget.getBoundingClientRect();\n\n    // 如果目标元素隐藏，则不处理\n    if (objBoundTarget.width * objBoundTarget.height === 0) {\n        eleTarget.style.position = strOriginPosition || '';\n        window.console.warn((eleTarget.id ? 'id为' + eleTarget.id + '的' : '') + '目前元素尺寸为0，无法定位');\n        return;\n    }\n\n    // 页面的水平和垂直滚动距离\n    const selectorScroller = this.dataset.scroller;\n    let scroller;\n    if (selectorScroller) {\n        scroller = this.closest(selectorScroller) || this.closest('#' + selectorScroller);\n    }\n    if (!scroller) {\n        scroller = document.scrollingElement || document.documentElement;\n    }\n\n    let numScrollTop = scroller.scrollTop;\n    let numScrollLeft = scroller.scrollLeft;\n\n    // 浏览器窗口的尺寸\n    let numWinWidth = window.innerWidth;\n    let numWinHeight = window.innerHeight;\n\n    // 如果trigger元素全部都在屏幕外，则不进行边缘调整\n    if ((objBoundTrigger.left < 0 && objBoundTrigger.right < 0) || (objBoundTrigger.top < 0 && objBoundTrigger.bottom < 0) || (objBoundTrigger.left > numWinWidth && objBoundTrigger.right > numWinWidth) || (objBoundTrigger.top > numWinHeight && objBoundTrigger.bottom > numWinHeight)) {\n        objParams.edgeAdjust = isEdgeAdjust = false;\n    }\n\n    // target的包含块祖先元素，也就是定位元素\n    let eleOffsetParent = eleTarget.offsetParent;\n    let objBoundOffsetParent = eleOffsetParent.getBoundingClientRect();\n\n    // 暴露给实例\n    const element = {\n        follow: eleTarget\n    };\n\n    this.element = this.element ? Object.assign(this.element, element) : element;\n    this.params = this.params ? Object.assign(this.params, objParams) : objParams;\n\n    // 参数中设置的偏移位置\n    let objOffsets = objParams.offsets;\n    // target元素所在的offset偏移\n    let numOffsetTop = objBoundOffsetParent.top + numScrollTop;\n    let numOffsetLeft = objBoundOffsetParent.left + numScrollLeft;\n\n    // 如果是body元素，同时没有设置定位属性的话，忽略\n    // 因为此时margin有值或者margin重叠时候会有定位bug\n    if (eleOffsetParent === document.body && window.getComputedStyle(eleOffsetParent).position === 'static') {\n        numOffsetTop = 0;\n        numOffsetLeft = 0;\n    }\n\n    // 直接嫁接在offsets对象上，可以大大简化后续处理的逻辑\n    // 减去包含块元素的偏移位置，这样的objOffsets尺寸是精准的定位尺寸\n    // objOffsets.x -= numOffsetLeft;\n    // objOffsets.y -= numOffsetTop;\n\n    // 这是指定位置\n    // 支持具体坐标值\n    let strPosition = objParams.position;\n\n    // 最终定位的left/top坐标\n    let numTargetLeft, numTargetTop;\n\n    // eleTarget元素zIndex实时最大化\n    let zIndex = function () {\n        // 返回eleTarget才是的样式计算对象\n        let objStyleTarget = window.getComputedStyle(eleTarget);\n        // 此时元素的层级\n        let numZIndexTarget = Number(objStyleTarget.zIndex);\n        // 用来对比的层级，也是最小层级\n        let numZIndexNew = 19;\n\n        // 只对同级子元素进行层级最大化计算处理\n        eleOffsetParent.childNodes.forEach((eleChild) => {\n            if (eleChild.nodeType !== 1) return;\n\n            let objStyleChild = window.getComputedStyle(eleChild);\n\n            let numZIndexChild = objStyleChild.zIndex * 1;\n\n            if (numZIndexChild && eleTarget !== eleChild && objStyleChild.display !== 'none') {\n                numZIndexNew = Math.max(numZIndexChild + 1, numZIndexNew);\n            }\n        });\n\n        if (numZIndexNew !== numZIndexTarget) {\n            eleTarget.style.zIndex = numZIndexNew;\n        }\n    };\n\n    // 如果直接指定了坐标\n    if (typeof strPosition !== 'string' && strPosition.length === 2) {\n        let arrPosition = strPosition;\n\n        numTargetLeft = arrPosition[0] + objOffsets.x;\n        numTargetTop = arrPosition[1] + objOffsets.y;\n\n        // 边缘检测\n        if (objParams.edgeAdjust === true) {\n            if (numTargetLeft + objBoundTarget.width > numWinWidth + numScrollLeft) {\n                numTargetLeft = numWinWidth + numScrollLeft - objBoundTarget.width - objOffsets.x;\n            }\n            if (numTargetTop + objBoundTarget.height > numWinHeight + numScrollTop) {\n                numTargetTop = numWinHeight + numScrollTop - objBoundTarget.height - objOffsets.y;\n            }\n        }\n        // 浮动框的定位与显示\n        eleTarget.style.left = `${ numTargetLeft }px`;\n        eleTarget.style.top = `${ numTargetTop }px`;\n        // 记住定位标识码\n        eleTarget.dataset.align = '3-1';\n\n        // z-index自动最高\n        zIndex();\n\n        return;\n    }\n\n\n    // 是否对齐匹配的标志量\n    // 遍历，以确定设定的对齐是否有匹配\n    let isAlignMatch = arrLegalPosition.some((strLegalPosition) => {\n        return strLegalPosition === strPosition;\n    });\n\n    // 如果没有匹配的对齐方式，使用默认的对齐方式\n    if (isAlignMatch === false) {\n        strPosition = defaults.position;\n    }\n\n    // 自动调整距离边缘的安全距离\n    let arrSafeArea = this.dataset.safeArea || getComputedStyle(eleTarget).getPropertyValue('--safe-area') || objParams.safeArea;\n    // 字符串转数组\n    if (typeof arrSafeArea == 'string') {\n        arrSafeArea = arrSafeArea.trim().split(/(?:,\\s*|\\s+)/);\n    }\n    arrSafeArea = arrSafeArea.map(function (val) {\n        return parseFloat(val) || 0;\n    });\n    // 数量的处理\n    if (arrSafeArea.length == 1) {\n        arrSafeArea = arrSafeArea.concat(arrSafeArea[0], arrSafeArea[0], arrSafeArea[0]);\n    } else if (arrSafeArea.length == 2) {\n        arrSafeArea.push(arrSafeArea[0]);\n        arrSafeArea.push(arrSafeArea[1]);\n    } else if (arrSafeArea.length == 3) {\n        arrSafeArea.push(arrSafeArea[1]);\n    }\n\n    // 是否超出边界的判断\n    // 只考虑在视区的情况，页面的滚动距离不处理\n    const objIsOverflow = {\n        // 键使用trigger-target方位表示\n        // 例如'left-right'表示trigger元素的左边缘和target元素右边缘对齐时候是否溢出\n        'left-right': objBoundTarget.width + objOffsets.x + arrSafeArea[3] > objBoundTrigger.left,\n        'top-bottom': objBoundTrigger.top - (objBoundTarget.height + objOffsets.y + arrSafeArea[0]) < 0,\n        'right-left': objBoundTrigger.right + objBoundTarget.width + objOffsets.x + arrSafeArea[1] > numWinWidth,\n        'bottom-top': objBoundTrigger.bottom + objBoundTarget.height + objOffsets.y + arrSafeArea[2] > numWinHeight,\n        // 新增4个方位\n        'right-right': objBoundTarget.width + objOffsets.x + arrSafeArea[3] > objBoundTrigger.right,\n        'left-left': objBoundTrigger.left + objBoundTarget.width + objOffsets.x + arrSafeArea[1] > numWinWidth,\n        'bottom-bottom': objBoundTarget.height + objOffsets.y + arrSafeArea[0] > objBoundTrigger.bottom,\n        'top-top': objBoundTrigger.top + objBoundTarget.height + objOffsets.y + arrSafeArea[2] > numWinHeight\n    };\n\n    let strDirection = 'bottom';\n\n    var funGetPosition = () => {\n        // 定位的处理\n        // 有别于之前的逻辑\n        // 直接枚举处理，覆盖所有的情况，之前是方位调整比较粗放\n        switch (strPosition) {\n            case '1-4': case '5-7': case '2-3': {\n                // 如果在上方显示\n                // top坐标是确定的\n                numTargetTop = objBoundTrigger.top - objBoundTarget.height;\n                // left坐标确定\n                if (strPosition === '1-4') {\n                    numTargetLeft = objBoundTrigger.left;\n                } else if (strPosition === '5-7') {\n                    numTargetLeft = objBoundTrigger.left - (objBoundTarget.width - objBoundTrigger.width) / 2;\n                } else {\n                    numTargetLeft = objBoundTrigger.left - (objBoundTarget.width - objBoundTrigger.width);\n                }\n\n                strDirection = 'top';\n\n                // 如果上方超出，则看看下方有没有空间\n                if (isEdgeAdjust && objIsOverflow['top-bottom']) {\n                    if (!objIsOverflow['bottom-top']) {\n                        strPosition = ({\n                            '1-4': '4-1',\n                            '5-7': '7-5',\n                            '2-3': '3-2'\n                        })[strPosition];\n                        // 再执行一次\n                        funGetPosition();\n                    } else if (!objIsOverflow['left-right'] || !objIsOverflow['right-left']) {\n                        // 上下无空间，但是左侧或右侧有空间\n                        // 随便给个水平方向就好\n                        strPosition = ({\n                            '1-4': '2-1',\n                            '5-7': '6-8',\n                            '2-3': '3-4'\n                        })[strPosition];\n                        funGetPosition();\n                    }\n                }\n\n                break;\n            }\n            case '2-1': case '6-8': case '3-4': {\n                // left坐标固定\n                numTargetLeft = objBoundTrigger.right;\n                // top坐标确定\n                if (strPosition === '2-1') {\n                    numTargetTop = objBoundTrigger.top;\n                } else if (strPosition === '6-8') {\n                    numTargetTop = objBoundTrigger.top - (objBoundTarget.height - objBoundTrigger.height) / 2;\n                } else {\n                    numTargetTop = objBoundTrigger.top - (objBoundTarget.height - objBoundTrigger.height);\n                }\n\n                strDirection = 'right';\n\n                // 如果右侧超出，则看看左方有没有空间\n                if (isEdgeAdjust && objIsOverflow['right-left']) {\n                    if (!objIsOverflow['left-right']) {\n                        strPosition = ({\n                            '2-1': '1-2',\n                            '6-8': '8-6',\n                            '3-4': '4-3'\n                        })[strPosition];\n                        // 再执行一次\n                        funGetPosition();\n                    } else if (!objIsOverflow['top-bottom'] || !objIsOverflow['bottom-top']) {\n                        strPosition = ({\n                            '2-1': '1-4',\n                            '6-8': '5-7',\n                            '3-4': '2-3'\n                        })[strPosition];\n                        // 再执行一次\n                        funGetPosition();\n                    }\n                }\n\n                break;\n            }\n            case '4-1': case '7-5': case '3-2': {\n                // top坐标是确定的\n                numTargetTop = objBoundTrigger.bottom;\n                // left坐标确定\n                if (strPosition === '4-1') {\n                    numTargetLeft = objBoundTrigger.left;\n                } else if (strPosition === '7-5') {\n                    numTargetLeft = objBoundTrigger.left - (objBoundTarget.width - objBoundTrigger.width) / 2;\n                } else {\n                    numTargetLeft = objBoundTrigger.left - (objBoundTarget.width - objBoundTrigger.width);\n                }\n\n                strDirection = 'bottom';\n\n                // 如果下方超出，则看看上方有没有空间\n                if (isEdgeAdjust && objIsOverflow['bottom-top']) {\n                    if (!objIsOverflow['top-bottom']) {\n                        strPosition = ({\n                            '4-1': '1-4',\n                            '7-5': '5-7',\n                            '3-2': '2-3'\n                        })[strPosition];\n                        // 再执行一次\n                        funGetPosition();\n                    } else if (!objIsOverflow['left-right'] || !objIsOverflow['right-left']) {\n                        // 上下无空间，但是左侧或右侧有空间\n                        // 随便给个水平方向就好\n                        strPosition = ({\n                            '4-1': '2-1',\n                            '7-5': '6-8',\n                            '3-2': '3-4'\n                        })[strPosition];\n                        funGetPosition();\n                    }\n                }\n\n                break;\n            }\n            case '1-2': case '8-6': case '4-3': {\n                // left坐标固定\n                numTargetLeft = objBoundTrigger.left - objBoundTarget.width;\n\n                // top坐标确定\n                if (strPosition === '1-2') {\n                    numTargetTop = objBoundTrigger.top;\n                } else if (strPosition === '8-6') {\n                    numTargetTop = objBoundTrigger.top - (objBoundTarget.height - objBoundTrigger.height) / 2;\n                } else {\n                    numTargetTop = objBoundTrigger.top - (objBoundTarget.height - objBoundTrigger.height);\n                }\n\n                strDirection = 'left';\n\n                // 如果左侧超出，则看看右侧有没有空间\n                if (isEdgeAdjust && objIsOverflow['left-right']) {\n                    if (!objIsOverflow['right-left']) {\n                        strPosition = ({\n                            '1-2': '2-1',\n                            '8-6': '6-8',\n                            '4-3': '3-4'\n                        })[strPosition];\n                        // 再执行一次\n                        funGetPosition();\n                    } else if (!objIsOverflow['top-bottom'] || !objIsOverflow['bottom-top']) {\n                        strPosition = ({\n                            '1-2': '1-4',\n                            '8-6': '5-7',\n                            '4-3': '2-3'\n                        })[strPosition];\n                        // 再执行一次\n                        funGetPosition();\n                    }\n                }\n\n                break;\n            }\n        }\n    };\n\n    funGetPosition();\n\n    numTargetLeft = numTargetLeft + objOffsets.x - numOffsetLeft;\n    numTargetTop = numTargetTop + objOffsets.y - numOffsetTop;\n\n    // 边界溢出，当前方位的安全举例处理\n    if (isEdgeAdjust) {\n        // 水平方向的微调\n        if (strDirection == 'top') {\n            numTargetTop = numTargetTop - arrSafeArea[2];\n        } else if (strDirection == 'bottom') {\n            numTargetTop = numTargetTop + arrSafeArea[0];\n        } else if (strDirection == 'left') {\n            numTargetLeft = numTargetLeft - arrSafeArea[1];\n        } else {\n            numTargetLeft = numTargetLeft + arrSafeArea[3];\n        }\n    }\n\n    // 加上滚动距离\n    numTargetTop += numScrollTop;\n    numTargetLeft += numScrollLeft;\n\n    //浮动框显示\n    eleTarget.style.left = `${ Math.round(numTargetLeft) }px`;\n    eleTarget.style.top = `${ Math.round(numTargetTop) }px`;\n\n    // // 此时的eleTarget位置\n    objBoundTarget = eleTarget.getBoundingClientRect();\n    // 对立分享水平方向的微调\n    if (isEdgeAdjust) {\n        if (strDirection == 'top' || strDirection == 'bottom') {\n            if (objBoundTarget.left < arrSafeArea[3]) {\n                numTargetLeft = numTargetLeft + (arrSafeArea[3] - objBoundTarget.left);\n            } else if (objBoundTarget.right + arrSafeArea[1] > numWinWidth) {\n                numTargetLeft = numTargetLeft - (objBoundTarget.right + arrSafeArea[1] - numWinWidth);\n            }\n        } else if (objBoundTarget.top < arrSafeArea[0]) {\n            numTargetTop += arrSafeArea[0] - objBoundTarget.top;\n        } else if (objBoundTarget.bottom + arrSafeArea[2] > numWinHeight) {\n            numTargetTop -= (objBoundTarget.bottom + arrSafeArea[2] - numWinHeight);\n        }\n\n        //浮动框显示\n        eleTarget.style.left = `${ Math.round(numTargetLeft) }px`;\n        eleTarget.style.top = `${ Math.round(numTargetTop) }px`;\n    }\n\n    eleTarget.dataset.align = strPosition;\n    eleTarget.dataset.direction = strDirection;\n\n    // z-index自动最高\n    zIndex();\n\n    if (!eleTarget.zIndex) {\n        eleTarget.zIndex = zIndex;\n    }\n};\n\n[NodeList.prototype, HTMLCollection.prototype].forEach(prop => {\n    prop.follow = function () {\n        [...this].forEach(node => {\n            if (node.nodeType === 1) {\n                node.follow.apply(node, this.arguments);\n            }\n        });\n    };\n});\n\n/**\n * @Pagination.js\n * @author sunmeiye\n * @version\n * @Created: 20-06-07\n * @edit:    20-06-07\n */\n\n// ui tab custom HTML\nclass Tab extends HTMLElement {\n    static get observedAttributes () {\n        return ['open'];\n    }\n    static get defaults () {\n        return {\n            eventType: 'click',\n            history: false,\n            autoplay: 3000\n        };\n    }\n    constructor (trigger, options) {\n        super();\n\n        // 元素的获取\n        let eleTrigger = null;\n        if (typeof trigger == 'string') {\n            eleTrigger = document.getElementById(trigger);\n        } else if (typeof trigger == 'object') {\n            if (trigger.tagName) {\n                eleTrigger = trigger;\n            } else if (!options) {\n                options = trigger;\n            }\n        }\n\n        options = options || {};\n\n        if (eleTrigger) {\n            // is-tab处理\n            let strIsTab = eleTrigger.getAttribute('is-tab');\n            // 必须有data-name值\n            const strName = eleTrigger.dataset.name;\n            // 上一项下一项\n            if (strName && (strIsTab == 'prev' || strIsTab == 'next')) {\n                eleTrigger.addEventListener('click', () => {\n                    const eleTabGroup = document.querySelectorAll('ui-tab[name=\"' + strName + '\"]');\n                    const indexOpen = [...eleTabGroup].findIndex(eleTab => {\n                        return eleTab.open;\n                    });\n                    if (strIsTab == 'prev') {\n                        (eleTabGroup[indexOpen - 1] || eleTabGroup[eleTabGroup.length - 1]).switch();\n                    } else {\n                        (eleTabGroup[indexOpen + 1] || eleTabGroup[0]).switch();\n                    }\n                });\n                // 如果是定时播放，暂停\n                eleTrigger.addEventListener('mouseenter', () => {\n                    document.querySelectorAll('ui-tab[name=\"' + strName + '\"][autoplay]').forEach(eleTab => {\n                        clearTimeout(eleTab.timer);\n                    })\n                });\n                eleTrigger.addEventListener('mouseout', () => {\n                    [...document.querySelectorAll('ui-tab[name=\"' + strName + '\"][autoplay]')].some(eleTab => {\n                        if (eleTab.open) {\n                            eleTab.autoSwitch();\n                            return true;\n                        }\n                    })\n                });\n                \n                return;\n            }\n\n            let strTriggerId = eleTrigger.id;\n            if (!strTriggerId) {\n                strTriggerId = ('lulu_' + Math.random()).replace('0.', '');\n                eleTrigger.id = strTriggerId;\n                // for属性设置\n                this.htmlFor = strTriggerId;\n            }\n\n            // 参数转移\n            if (eleTrigger.getAttribute('name')) {\n                this.name = eleTrigger.getAttribute('name');\n            }\n            if (eleTrigger.hasAttribute('open')) {\n                this.open = true;\n            }\n\n            for (let paramsKey in Tab.defaults) {\n                if (typeof eleTrigger.dataset[paramsKey.toLowerCase()] != 'undefined') {\n                    this[paramsKey] = eleTrigger.dataset[paramsKey.toLowerCase()];\n                } else if (typeof options[paramsKey] != 'undefined') {\n                    this[paramsKey] = eleTrigger.dataset[paramsKey.toLowerCase()] = options[paramsKey];\n                }\n            }\n\n            // target值也可以使用is-tab属性设置\n            if (strIsTab && !eleTrigger.dataset.target) {\n                eleTrigger.dataset.target = strIsTab;\n            }\n\n            // 非控件元素的键盘访问支持\n            if (eleTrigger.tabIndex == -1) {\n                eleTrigger.setAttribute('tabindex', 0);\n            }\n        }\n\n        // 参数和元素设置的处理\n        let objElement = this.element || {};\n\n        // trigger和target元素的设置与获取\n        this.element = new Proxy(objElement, {\n            get: (target, prop) => {\n                if (prop == 'target') {\n                    let strIdTarget = this.target;\n                    let eleTarget = null;\n                    let eleTrigger = this.element.trigger;\n                    if (!strIdTarget && eleTrigger) {\n                        strIdTarget = eleTrigger.dataset.target || eleTrigger.getAttribute('href');\n\n                        if (strIdTarget && /#/.test(strIdTarget)) {\n                            strIdTarget = strIdTarget.split('#')[1];\n                        }\n                    }\n\n                    // 对应的目标元素获取\n                    if (strIdTarget) {\n                        eleTarget = document.getElementById(strIdTarget);\n                    }\n                    return eleTarget;\n                }\n\n                if (prop == 'trigger') {\n                    return (this.htmlFor && document.getElementById(this.htmlFor)) || this;\n                }\n\n                return target[prop];\n            },\n            set: (target, prop, value) => {\n                if (typeof value == 'string') {\n                    value = document.getElementById(value) || document.querySelector(value);\n                }\n                // 只有当value是节点元素时候才赋值\n                if (value && typeof value.nodeType != 'number') {\n                    return false;\n                }\n\n                // 元素赋值\n                target[prop] = value;\n\n                // target元素设置时候同时需要赋值\n                if (prop == 'target' && value) {\n                    let eleTarget = value;\n                    let strId = eleTarget.id;\n                    if (!strId) {\n                        strId = ('lulu_' + Math.random()).replace('0.', '');\n                        eleTarget.id = strId;\n                    }\n\n                    // 如果用户直接使用this.element.target赋值，则需要同步target属性值\n                    if (this.element.trigger == this) {\n                        // 此if判断可以避免死循环\n                        if (this.target != strId) {\n                            this.target = strId;\n                        }\n                    } else if (this.element.trigger) {\n                        this.element.trigger.setAttribute('data-target', strId);\n                    }\n                }\n\n                return true;\n            }\n        });\n\n        // 参数设置\n        // 在本组件中，作用较弱\n        this.setParams(options);\n\n        // 载入到页面\n        if (eleTrigger && !this.parentElement && eleTrigger != this) {\n            // 使用专门的div包裹，避免暴露过多的细节\n            let eleHidden = document.querySelector('body > div[hidden=\"tab\"]');\n            if (!eleHidden) {\n                eleHidden = document.createElement('div');\n                eleHidden.setAttribute('hidden', 'tab');\n                document.body.append(eleHidden);\n            }\n            eleHidden.append(this);\n        }\n    }\n    get eventType () {\n        let strEventType = this.getAttribute('eventtype') || Tab.defaults.eventType;\n        if (strEventType == 'hover') {\n            strEventType = 'mouseenter';\n        }\n        return strEventType;\n    }\n    set eventType (value) {\n        this.setAttribute('eventtype', value);\n    }\n    get history () {\n        return this.hasAttribute('history') || Tab.defaults.history;\n    }\n    set history (value) {\n        this.toggleAttribute('history', value);\n    }\n    get autoplay () {\n        let strAttrAutoplay = this.getAttribute('autoplay');\n        if (typeof strAttrAutoplay !== 'string') {\n            return false;\n        }\n        if (/^\\d+$/.test(strAttrAutoplay)) {\n            return strAttrAutoplay * 1;\n        }\n\n        return Tab.defaults.autoplay;\n    }\n    set autoplay (value) {\n        if (!value && value !== '') {\n            this.removeAttribute('autoplay');\n        } else {\n            this.setAttribute('autoplay', value);\n        }\n    }\n    get name () {\n        return this.getAttribute('name');\n    }\n    set name (value) {\n        this.setAttribute('name', value);\n    }\n\n    get htmlFor () {\n        return this.getAttribute('for');\n    }\n    set htmlFor (v) {\n        // 设置属性\n        this.setAttribute('for', v);\n    }\n\n    // 目标元素的设置与获取\n    get target () {\n        return this.getAttribute('target');\n    }\n    set target (value) {\n        this.setAttribute('target', value);\n    }\n\n    get open () {\n        return this.hasAttribute('open');\n    }\n    set open (value) {\n        this.toggleAttribute('open', value);\n    }\n\n    // 参数批量设置\n    setParams (options) {\n        this.params = this.params || {};\n        options = options || {};\n\n        Object.assign(this.params, options);\n    }\n\n    switch () {\n        let strName = this.name;\n        let eleTabGroup = [];\n        // 对应选项卡显示的处理\n        if (strName) {\n            eleTabGroup = document.querySelectorAll('ui-tab[name=\"' + strName + '\"]');\n\n            if (!this.open) {\n                eleTabGroup.forEach(tab => {\n                    if (tab.open) {\n                        tab.open = false;\n                    }\n                });\n                this.open = true;\n            }\n        } else {\n            this.open = !this.open;\n        }\n\n        const location = window.location;\n\n        // 历史记录的处理\n        if (this.history == true && strName && /tab\\d{10,16}/.test(strName) == false) {\n            if (!this.element.target) {\n                return;\n            }\n            let strId = this.element.target.id;\n\n            // url地址查询键值对替换\n            const objURLParams = new URLSearchParams(location.search);\n            // 改变查询键值，有则替换，无则新增\n            objURLParams.set(strName, strId);\n\n            // hash优化，去除重复的hash\n            let strHash = location.hash;\n            if (strId == strHash) {\n                location.hash = strHash = '';\n            }\n\n            // 改变当前URL\n            window.history.replaceState(null, document.title, location.href.split('?')[0] + '?' + objURLParams.toString() + strHash);\n        }\n    }\n\n    // 自动切换\n    autoSwitch () {\n        // 自动播放\n        let numTimeAutoplay = this.autoplay;\n        let strName = this.name;\n\n        if (numTimeAutoplay && strName) {\n            let eleTabGroup = document.querySelectorAll('ui-tab[name=\"' + strName + '\"]');\n            clearTimeout(this.timer);\n            if (numTimeAutoplay && strName && eleTabGroup.length > 1) {\n                let indexTab = [].slice.call(eleTabGroup).findIndex(tab => {\n                    return tab == this;\n                });\n                indexTab++;\n                if (indexTab >= eleTabGroup.length) {\n                    indexTab = 0;\n                }\n                this.timer = setTimeout(() => {\n                    eleTabGroup[indexTab].switch();\n                    // 自动播放\n                    eleTabGroup[indexTab].autoSwitch();\n                }, numTimeAutoplay);\n            }\n        }\n    }\n\n    // 初始化tab事件\n    events () {\n        // hover事件的键盘访问支持\n        if (this.eventType == 'mouseover' || this.eventType == 'mouseenter') {\n            // 增加延时判断，避免误经过产生的不好体验\n            this.element.trigger.addEventListener(this.eventType, () => {\n                Tab.hoverTimer = setTimeout(() => {\n                    this.switch();\n                }, 150);\n            }, false);\n            // 如果快速移出，则不执行切换\n            this.element.trigger.addEventListener(this.eventType.replace('over', 'out').replace('enter', 'leave'), () => {\n                clearTimeout(Tab.hoverTimer);\n            });\n        }\n\n        // 无论什么事件类型，都需要click事件兜底\n        this.element.trigger.addEventListener('click', (event) => {\n            if (/^(:?javas|#)/.test(event.target.getAttribute('href'))) {\n                event.preventDefault();\n            }\n            this.switch();\n        }, false);\n\n        // 如果定时播放，鼠标经过暂停\n        if (this.autoplay && this.name) {\n            [this.element.trigger, this.element.target].forEach((ele) => {\n                ele.addEventListener('mouseenter', () => {\n                    clearTimeout(this.timer);\n                });\n                ele.addEventListener('mouseleave', () => {\n                    this.autoSwitch();\n                });\n            });\n\n            // 当前open选项卡开始准备自动播放\n            let eleFirstOpenTab = document.querySelector('ui-tab[name=\"' + this.name + '\"][open]');\n            if (eleFirstOpenTab) {\n                eleFirstOpenTab.autoSwitch();\n            }\n        }\n    }\n\n    // ui-tab元素在页面出现的时候\n    connectedCallback () {\n        if (!this.closest('a, button') && !this.querySelector('a, button')) {\n            this.setAttribute('tabindex', '0');\n        }\n        let eleTarget = this.element.target;\n        let eleTrigger = this.element.trigger;\n\n        if (eleTrigger) {\n            eleTrigger.setAttribute('role', 'tab');\n        }\n        if (eleTarget) {\n            eleTarget.setAttribute('role', 'tabpanel');\n        }\n        // 事件\n        this.events();\n\n        // URL查询看看能不能获取到记录的选项卡状态信息\n        let objURLParams = new URLSearchParams(window.location.search);\n        objURLParams.forEach((value, key) => {\n            if (eleTrigger && eleTarget && this.name == key && eleTarget.id == value && !eleTrigger.hasAttribute('open')) {\n                eleTrigger.click();\n            }\n        });\n\n        // 全局事件\n        this.dispatchEvent(new CustomEvent('connected', {\n            detail: {\n                type: 'ui-tab'\n            }\n        }));\n\n        this.isConnectedCallback = true;\n\n        this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n\n        // is-tab等类型初始化完毕标志事件\n        if (eleTrigger != this) {\n            eleTrigger.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n\n            if (eleTrigger.hasAttribute('is-tab')) {\n                eleTrigger.dispatchEvent(new CustomEvent('connected', {\n                    detail: {\n                        type: 'ui-tab'\n                    }\n                }));\n                // 设置定义完毕标志量\n                eleTrigger.setAttribute('defined', '');\n            }\n        }\n    }\n\n    /**\n     * open属性变化时候的变化\n     * @param {*} name\n     * @param {*} newValue\n     * @param {*} oldValue\n     */\n    attributeChangedCallback (name, newValue, oldValue) {\n        if (this.element && name === 'open' && typeof newValue != typeof oldValue) {\n            const elePanel = this.element.target;\n            if (!elePanel) {\n                return;\n            }\n            if (this.open) {\n                elePanel.classList.add('active');\n                this.setAttribute('aria-selected', 'true');\n                this.dispatchEvent(new CustomEvent('show', {\n                    detail: {\n                        type: 'ui-tab'\n                    }\n                }));\n            } else {\n                elePanel.classList.remove('active');\n                this.setAttribute('aria-selected', 'false');\n                this.dispatchEvent(new CustomEvent('hide', {\n                    detail: {\n                        type: 'ui-tab'\n                    }\n                }));\n            }\n\n            // is-tab等普通元素的open属性变化\n            let eleTrigger = this.element.trigger;\n            if (eleTrigger && eleTrigger != this) {\n                eleTrigger.toggleAttribute('open', this.open);\n            }\n\n            // 内置选项卡划来划去效果\n            if (eleTrigger && this.name && /ui-tab/.test(eleTrigger.className)) {\n                eleTrigger.parentElement.style.setProperty('--ui-tab-width', eleTrigger.clientWidth);\n                eleTrigger.parentElement.style.setProperty('--ui-tab-left', eleTrigger.offsetLeft);\n            }\n\n            // 无论选项卡切换还是隐藏，都会触发switch事件\n            this.dispatchEvent(new CustomEvent('switch'));\n        }\n    }\n}\n\n// 扩展HTML元素tab的方法\nNodeList.prototype.tab = function (options = {}) {\n    const eleTabs = this;\n    let strName = options.name || '';\n\n    for (var eleTab of eleTabs) {\n        if (!strName && eleTab.getAttribute('name')) {\n            strName = eleTab.getAttribute('name');\n        }\n    }\n\n    if (!strName) {\n        strName = ('tab' + Math.random()).replace('0.', '');\n    }\n\n    for (let eleTab of eleTabs) {\n        eleTab.setAttribute('name', strName);\n        eleTab['ui-tab'] = new Tab(eleTab, options);\n    }\n};\n\n// 定义ui-tab\nif (!customElements.get('ui-tab')) {\n    customElements.define('ui-tab', Tab);\n}\n\nwindow.Tab = Tab;\n\n\n/**\n * 自动化\n */\n(function () {\n\n    /**\n     *\n     */\n    function funAutoInitAndWatching () {\n        document.querySelectorAll('[is-tab]').forEach(function (eleTab) {\n            if (!eleTab['ui-tab']) {\n                eleTab['ui-tab'] = new Tab(eleTab);\n            }\n        });\n        var observerTab = new MutationObserver(function (mutationsList) {\n            mutationsList.forEach(function (mutation) {\n                mutation.addedNodes.forEach(function (eleAdd) {\n                    if (!eleAdd.tagName) {\n                        return;\n                    }\n                    if (eleAdd.hasAttribute('is-tab')) {\n                        if (!eleAdd['ui-tab']) {\n                            eleAdd['ui-tab'] = new Tab(eleAdd);\n                        }\n                    } else {\n                        eleAdd.querySelectorAll('[is-tab]').forEach(function (eleTab) {\n                            if (!eleTab['ui-tab']) {\n                                eleTab['ui-tab'] = new Tab(eleTab);\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        observerTab.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    if (document.readyState != 'loading') {\n        funAutoInitAndWatching();\n    } else {\n        window.addEventListener('DOMContentLoaded', funAutoInitAndWatching);\n    }\n})();\n\n// 只有type=module的时候可以用，否则会报错\n// export default Tab;\n/*\n * @Select.js\n * @author liuwentao\n * @version\n * @Created: 2020-06-09\n * @edit: 2020-06-09\n**/\n\n// 是否支持popover\nconst isSupportPopover = HTMLElement.prototype.hasOwnProperty(\"popover\");\nconst isSupportAnchor = CSS.supports('justify-self', 'anchor-center');\n\nclass Select extends HTMLSelectElement {\n\n    static get observedAttributes () {\n        return ['multiple', 'disabled', 'width'];\n    }\n\n    constructor () {\n        super();\n\n        // 关联的元素们\n        if (!this.element) {\n            this.element = {\n                button: null,\n                combobox: null,\n                datalist: null\n            };\n        }\n        // 尺寸和属性变化的观察器\n        this.observer = null;\n        this.resizeObserver = null;\n\n        // 重置原生的属性\n        this.setProperty();\n    }\n\n    static addClass () {\n        return ['ui', 'select'].concat([].slice.call(arguments)).join('-');\n    }\n\n    set multiple (value) {\n        return this.toggleAttribute('multiple', Boolean(value));\n    }\n    get multiple () {\n        return this.hasAttribute('multiple');\n    }\n\n    render () {\n        this.create();\n        this.refresh();\n        this.events();\n    }\n\n    remove () {\n        if (this.parentElement) {\n            this.parentElement.removeChild(this);\n        }\n        if (this.element.combobox) {\n            this.element.combobox.remove();\n        }\n    }\n\n    getData () {\n        if (!this.options.length) {\n            return [{\n                html: ''\n            }];\n        }\n        // 所有分组元素\n        let eleOptgroups = this.querySelectorAll('optgroup');\n        // 如果有任意一个分组元素设置了label，那么就是标题分组\n        // 如果只是optgroup标签包括，那么使用分隔线分隔\n        let isIntent = !!this.querySelector('optgroup[label]');\n\n        // 如果有分组\n        if (eleOptgroups.length) {\n            let arrData = [];\n\n            eleOptgroups.forEach(optgroup => {\n                arrData.push({\n                    html: optgroup.label,\n                    disabled: optgroup.disabled,\n                    className: optgroup.className,\n                    divide: !isIntent\n                });\n\n                optgroup.querySelectorAll('option').forEach(option => {\n                    arrData.push({\n                        html: option.innerHTML,\n                        value: option.value,\n                        selected: option.selected,\n                        disabled: optgroup.disabled || option.disabled,\n                        className: option.className,\n                        intent: isIntent\n                    });\n                });\n            });\n\n            return arrData;\n        }\n\n        return [].slice.call(this.options).map(option => {\n            return {\n                html: option.innerHTML,\n                value: option.value,\n                selected: option.selected,\n                disabled: option.disabled,\n                className: option.className\n            };\n        });\n    }\n\n    // 获取<select>元素原始状态下的尺寸\n    get width () {\n        let strAttrWidth = this.getAttribute('width');\n        // 如果是纯数字，则px为单位\n        if (strAttrWidth && Number(strAttrWidth) === parseFloat(strAttrWidth)) {\n            strAttrWidth = strAttrWidth + 'px';\n        }\n        return strAttrWidth;\n    }\n\n    set width (value) {\n        if (/\\d/.test(value) == false) {\n            return;\n        }\n        this.setAttribute('width', value);\n    }\n\n    getWidth () {\n        return this.style.width || this.width || this.offsetWidth + 'px';\n    }\n    setWidth () {\n        if (this.element.combobox) {\n            const width = this.getWidth();\n            // 创建的下拉的尺寸设置\n            this.element.combobox.style.width = width;\n\n            this.style.transform = '';\n\n            if (width.lastIndexOf('%') !== -1 && this.originPosition != 'absolute' && this.originPosition != 'fixed') {\n                // 如果是百分比宽度\n                // 同时原下拉框不是绝对定位\n                // 则有可能尺寸不不对的，通过水平缩放调整下\n                // 避免水平滚动的出现\n                this.style.transform = `scaleX(${ this.parentElement.clientWidth * parseFloat(width) * 0.01 / this.offsetWidth })`;\n            }\n        }\n    }\n\n    create () {\n        // 防止多次重复创建\n        if (this.element && this.element.combobox) {\n            return;\n        }\n\n        const strId = ('lulu_' + (this.id || Math.random())).replace('0.', '');\n\n        // 创建的列表元素需要的类名\n        const BUTTON_CLASS = Select.addClass('button');\n        const DATALIST_CLASS = Select.addClass('datalist');\n\n        // 原始下拉的定位属性\n        const strOriginPosition = window.getComputedStyle(this).position;\n        this.originPosition = strOriginPosition;\n\n        // 是否使用CSS定位\n        const isCSSPosition = this.dataset.cssPosition || this.hasAttribute('is-css-position');\n\n        // 滚动宽度\n        const isCustomScroll = /windows/i.test(navigator.userAgent);\n        // 是否使用 popover\n        const isPopover = !isCSSPosition && isSupportPopover;\n        // 是否使用anchor锚点定位\n        const isAnchor = isSupportAnchor && !isCSSPosition && (this.hasAttribute('is-anchor') || this.dataset.anchor);\n\n        // 直接插入对应的片段内容\n        this.insertAdjacentHTML('afterend', `<div style=\"width: ${this.getWidth()}\">\n           ${!this.multiple ? `<button\n                type=\"button\"\n                class=\"${BUTTON_CLASS}\"\n                ${isPopover ? 'popovertarget' : 'data-target'}=\"${strId}\"\n                aria-owns=\"${strId}\"\n                aria-expanded=\"false\"\n                style=\"display: ${this.multiple ? 'none' : 'block'};anchor-name: --${strId}\"\n                ${this.disabled ? 'disabled ' : ''}\n            /></button>` : '' }\n                <ui-select-list \n                id=\"${strId}\" ${isPopover ? 'popover' : ''} \n                role=\"listbox\" \n                aria-expanded=\"false\" \n                class=\"${DATALIST_CLASS}\" \n                ${!this.multiple ? 'aria-hidden=\"true\"' : ''} \n                data-custom-scroll=\"${isCustomScroll}\"\n                ${isAnchor ? 'data-anchor=\"true\"' : ''}\n                style=\"position-anchor:--${strId};\"\n            ></ui-select-list>\n        </div>`);\n\n        let eleCombobox = this.nextElementSibling;\n\n        // 元素暴露出去\n        Object.assign(this.element, {\n            combobox: eleCombobox,\n            button: eleCombobox.querySelector(`.${BUTTON_CLASS}`),\n            datalist: eleCombobox.querySelector(`.${DATALIST_CLASS}`)\n        });\n\n        // 原始下拉框的层级和位置\n        // 变成绝对定位，不占据任何空间\n        if (strOriginPosition != 'fixed') {\n            this.style.position = 'absolute';\n        }\n\n        this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n    }\n\n    /**\n     * 下拉内容的刷新\n     * @param {Array} data 刷新列表数组项，可选\n     */\n    refresh (data) {\n        // 是否多选\n        const isMultiple = this.multiple;\n        // 主要的几个元素\n        const eleSelect = this;\n        // 几个创建元素\n        const eleCombobox = this.element.combobox;\n        const eleButton = this.element.button;\n        const eleDatalist = this.element.datalist;\n        if (!eleDatalist) {\n            return;\n        }\n        // id\n        const strId = eleDatalist.id;\n\n        // 获取当下下拉框的数据和状态\n        data = data || this.getData();\n\n        // 下拉组合框元素的样式\n        // 把原<select>的样式复制过来，这样，类似 margin 等样式可以继承过来\n        // 布局会更稳定\n        eleCombobox.className = (`${eleSelect.className} ${Select.addClass()}`).trim();\n\n        // 多选，高度需要同步，因为选项高度不确定\n        // eleSelect.style.height 性能很高，offsetHeight会触发重绘，因此优先 style 对象 获取\n        if (isMultiple) {\n            eleCombobox.style.height = eleSelect.style.height || (eleSelect.offsetHeight + 'px');\n        } else if (eleSelect[eleSelect.selectedIndex]) {\n            // 按钮元素中的文案\n            const strHtmlSelected = eleSelect[eleSelect.selectedIndex].innerHTML;\n            // 按钮赋值\n            eleButton.innerHTML = `<span class=\"${Select.addClass('text')}\">${strHtmlSelected}</span><i class=\"${Select.addClass('icon')}\" aria-hidden=\"true\"></i>`;\n            eleButton.dataset.value = eleSelect[eleSelect.selectedIndex].value;\n        }\n        // 列表内容的刷新\n        let index = -1;\n        eleDatalist.innerHTML = data.map((obj) => {\n            let arrCl = [Select.addClass('datalist', 'li'), obj.className];\n            if (obj.selected) arrCl.push('selected');\n            if (obj.disabled) arrCl.push('disabled');\n\n            // 如果有分隔线\n            if (typeof obj.divide != 'undefined') {\n                if (obj.divide) {\n                    arrCl = [Select.addClass('datalist', 'hr'), obj.className];\n                    return `<div class=\"${arrCl.join(' ')}\"></div>`;\n                }\n\n                return `<div class=\"${arrCl.join(' ')}\" role=\"heading\">${obj.html}</div>`;\n            }\n\n            // 这才是有效的索引\n            index++;\n\n            // 如果有缩进\n            if (obj.intent) {\n                arrCl.push(Select.addClass('intent'));\n            }\n\n            // 如果没有项目内容\n            if (!obj.html) {\n                return `<span class=\"${arrCl.join(' ')} disabled\"></span>`;\n            }\n\n            // 复选模式列表不参与无障碍访问识别，因此HTML相对简单\n            if (isMultiple) {\n                return `<a class=\"${arrCl.join(' ')}\" data-index=${index}>${obj.html}</a>`;\n            }\n\n            // 单选模式返回内容\n            return `<a\n                ${obj.disabled ? '' : ' href=\"javascript:\" '}\n                class=\"${arrCl.join(' ')}\"\n                data-index=${index}\n                data-target=\"${strId}\"\n                role=\"option\"\n                aria-selected=\"${obj.selected}\"\n            >${obj.html}</a>`;\n        }).join('');\n    }\n\n    /**\n     * 下拉的事件处理\n     */\n    events () {\n        if (this.multiple) {\n            this.createMultipleEvent();\n        } else {\n            this.createNormalEvent();\n        }\n    }\n\n    /**\n     * 下拉的层级处理\n     */\n    zIndex () {\n        let eleTarget = this.element.datalist;\n        // 返回eleTarget才是的样式计算对象\n        let objStyleTarget = window.getComputedStyle(eleTarget);\n        // 此时元素的层级\n        let numZIndexTarget = Number(objStyleTarget.zIndex);\n        // 用来对比的层级，也是最小层级\n        let numZIndexNew = 19;\n\n        // 只对同级子元素进行层级最大化计算处理\n        document.body.childNodes.forEach((eleChild) => {\n            if (eleChild.nodeType !== 1) return;\n\n            let objStyleChild = window.getComputedStyle(eleChild);\n\n            let numZIndexChild = objStyleChild.zIndex * 1;\n\n            if (numZIndexChild && eleTarget !== eleChild && objStyleChild.display !== 'none') {\n                numZIndexNew = Math.max(numZIndexChild + 1, numZIndexNew);\n            }\n        });\n\n        if (numZIndexNew !== numZIndexTarget) {\n            eleTarget.style.zIndex = numZIndexNew;\n        }\n    }\n\n    /**\n     * 定位\n     */\n    position () {\n        const objElement = this.element;\n        let eleCombobox = objElement.combobox;\n        let eleButton = objElement.button;\n        let eleDatalist = objElement.datalist;\n\n        if (!eleCombobox.classList.contains('active')) {\n            return;\n        }\n\n        // 按钮的尺寸和位置\n        let objBoundButton = eleButton.getBoundingClientRect();\n        // body元素下的绝对定位场景才处理\n        if (!eleCombobox.contains(eleDatalist) || eleButton.popoverTargetElement) {\n            // 下拉列表的尺寸和位置设置\n            eleDatalist.style.left = (objBoundButton.left + document.scrollingElement.scrollLeft) + 'px';\n            eleDatalist.style.top = (objBoundButton.bottom + document.scrollingElement.scrollTop - 1) + 'px';\n            eleDatalist.style.width = eleCombobox.getBoundingClientRect().width + 'px';\n            // 列表显示\n            eleDatalist.classList.add('active');\n            // 层级\n            this.zIndex();\n        }\n\n        // 边界判断\n        let objBoundDatalist = eleDatalist.getBoundingClientRect();\n        var isOverflow = objBoundDatalist.bottom + window.pageYOffset > Math.max(document.body.clientHeight, window.innerHeight);\n        eleCombobox.classList[isOverflow ? 'add' : 'remove']('reverse');\n\n        if (isOverflow && !this.dataset.cssPosition && !this.hasAttribute('is-css-position')) {\n            eleDatalist.style.top = (objBoundButton.top + document.scrollingElement.scrollTop - objBoundDatalist.height + 1) + 'px';\n        }\n    }\n\n    /**\n     * 单选下拉框的事件\n     */\n    createNormalEvent () {\n        const objElement = this.element;\n        let eleCombobox = objElement.combobox;\n        let eleButton = objElement.button;\n        let eleDatalist = objElement.datalist;\n\n        // 点击按钮\n        eleButton.addEventListener('click', () => {\n            // 如果下拉被禁用则不处理\n            if (this.disabled) {\n                return false;\n            }\n            // 显示与隐藏\n            eleCombobox.classList.toggle('active');\n            // 显示\n            if (eleCombobox.classList.contains('active')) {\n                // 避免overflow剪裁，所以设置在body元素下\n                if (this.dataset.cssPosition || this.hasAttribute('is-css-position') || isSupportPopover) {\n                    eleCombobox.appendChild(eleDatalist);\n                } else {\n                    document.body.appendChild(eleDatalist);\n                }\n\n                // 定位\n                this.position();\n                \n                // aria状态\n                eleButton.setAttribute('aria-expanded', 'true');\n                // datalist aria hidden去除\n                eleDatalist.removeAttribute('aria-hidden');\n                // 滚动与定位\n                var arrDataScrollTop = eleCombobox.dataScrollTop;\n                var eleDatalistSelected = eleDatalist.querySelector('.selected');\n\n                // 严格验证\n                if (arrDataScrollTop && eleDatalistSelected && arrDataScrollTop[1] === eleDatalistSelected.getAttribute('data-index') && arrDataScrollTop[2] === eleDatalistSelected.innerText) {\n                    eleDatalist.scrollTop = arrDataScrollTop[0];\n                    // 重置\n                    delete eleCombobox.dataScrollTop;\n                }\n            } else {\n                eleCombobox.classList.remove('reverse');\n                // aria状态\n                eleButton.setAttribute('aria-expanded', 'false');\n                // 隐藏列表\n                eleDatalist.remove();\n            }\n        });\n\n        eleDatalist.addEventListener('click', (event) => {\n            var target = event.target;\n            if (!target || !target.closest) {\n                return;\n            }\n            // 点击的列表元素\n            var eleList = target;\n            // 对应的下拉<option>元素\n            var eleOption = null;\n            // 是否当前点击列表禁用\n            var isDisabled = eleList.classList.contains('disabled');\n            // 获取索引\n            var indexOption = eleList.getAttribute('data-index');\n            // 存储可能的滚动定位需要的数据\n            var scrollTop = eleDatalist.scrollTop;\n\n            eleCombobox.dataScrollTop = [scrollTop, indexOption, eleList.innerText];\n\n            // 修改下拉选中项\n            if (!isDisabled) {\n                eleOption = this[indexOption];\n                if (eleOption) {\n                    eleOption.selected = true;\n                }\n            }\n            // 下拉收起\n            eleCombobox.classList.remove('active');\n            eleButton.setAttribute('aria-expanded', 'false');\n            eleDatalist.remove();\n            \n            // focus\n            eleButton.focus();\n            eleButton.blur();\n\n            if (!isDisabled) {\n                // 更新下拉框\n                this.refresh();\n                // 回调处理\n                // 触发change事件\n                this.dispatchEvent(new CustomEvent('change', {\n                    'bubbles': true\n                }));\n            }\n        });\n\n        // 非页面主题滚动的重定位实现\n        // 遍历所有的overflow:auto元素\n        const eleScrollable = [];\n        const funWalk = (ele) => {\n            // 不包括body元素\n            if (ele == document.body) {\n                return;\n            }\n            if (window.getComputedStyle(ele).overflow == 'auto') {\n                eleScrollable.push(ele);\n            }\n            // 递归\n            funWalk(ele.parentElement);\n        }\n\n        // 向上找到所有的可滚动元素\n        if (!this.dataset.cssPosition && !this.hasAttribute('is-css-position') && !isSupportPopover) {\n            funWalk(eleButton.parentElement);\n\n            // 滚动发生的时候，重定位\n            eleScrollable.forEach((ele) => {\n                ele.addEventListener('scroll', () => {\n                    this.position();\n                });\n            });\n        }\n\n        // 点击页面空白要隐藏\n        // 测试表明，这里优化下可以提高40~50%性能\n        // 优化方式为改为一次性委托委托\n        if (!document.isSelectMouseEvent) {\n            // 点击空白隐藏处理\n            document.addEventListener('mouseup', (event) => {\n                var target = event.target;\n                if (!target) {\n                    return;\n                }\n                // 识别此时的combobox\n                const eleCombobox = document.querySelector('select+.ui-select.active');\n                if (!eleCombobox) {\n                    return;\n                }\n\n                // 对应的下拉元素\n                const eleSelect = eleCombobox.previousElementSibling;\n                const eleDatalist = eleSelect.element && eleSelect.element.datalist;\n                if (!eleDatalist.contains(target) && !eleCombobox.contains(target)) {\n                    eleCombobox.classList.remove('active');\n                    eleCombobox.classList.remove('reverse');\n                    eleDatalist.remove();\n                }\n            });\n\n            // 防止事件2次绑定\n            document.isSelectMouseEvent = true;\n        }\n    }\n\n    /**\n     * 多选下拉的事件处理\n     */\n    createMultipleEvent () {\n        const eleDatalist = this.element.datalist;\n\n        // 下拉多选\n        // 键盘交互UI同步\n        this.addEventListener('change', () => {\n            this.refresh();\n        });\n        // 滚动同步\n        this.addEventListener('scroll', () => {\n            eleDatalist.scrollTop = this.scrollTop;\n        });\n        // hover穿透\n        this.addEventListener('mousedown', () => {\n            this.setAttribute('data-active', 'true');\n        });\n        this.addEventListener('mousemove', (event) => {\n            if (this.getAttribute('data-active')) {\n                this.refresh();\n                return;\n            }\n\n            // 当前坐标元素\n            var clientY = event.clientY;\n            var clientX = event.clientX;\n\n            // 匹配当前坐标的页面元素\n            var elesFromPoint = document.elementsFromPoint(clientX, clientY);\n\n            // 识别哪几个列表元素匹配坐标元素\n            var eleListAll = eleDatalist.querySelectorAll('a');\n            for (var indexList = 0; indexList < eleListAll.length; indexList++) {\n                var eleList = eleListAll[indexList];\n                // hover状态先还原\n                eleList.removeAttribute('href');\n                // 然后开始寻找匹配的列表元素\n                if ([...elesFromPoint].includes(eleList)) {\n                    if (!eleList.classList.contains('selected') && !eleList.classList.contains('disabled')) {\n                        eleList.href = 'javascript:';\n                    }\n                    // 退出循环\n                    // forEach无法中断，因此这里使用了for循环\n                    break;\n                }\n            }\n        });\n        this.addEventListener('mouseout', () => {\n            var eleListAllWithHref = eleDatalist.querySelectorAll('a[href]');\n            eleListAllWithHref.forEach(function (eleList) {\n                eleList.removeAttribute('href');\n            });\n        });\n        document.addEventListener('mouseup', () => {\n            this.removeAttribute('data-active');\n        });\n    }\n\n    /**\n     * 重置原生的属性\n     */\n    setProperty () {\n        Object.defineProperty(this, 'value', {\n            configurable: true,\n            enumerable: true,\n            writeable: true,\n            get: () => {\n                return [...this.selectedOptions].map(option => option.value).join();\n            },\n            set: (value) => {\n                [...this.options].some((option) => {\n                    // 单选框模式下，如果多个值匹配，让第一个选中\n                    // 如果没有下面这句，会最后一个匹配的选中\n                    if (value.split(',').includes(option.value)) {\n                        option.selected = true;\n                        if (!this.multiple) {\n                            return true;\n                        }\n                    } else if (this.multiple) {\n                        option.selected = false;\n                    }\n                });\n            }\n        });\n\n        const props = Object.getOwnPropertyDescriptor(HTMLSelectElement.prototype, 'selectedIndex');\n        Object.defineProperty(HTMLSelectElement.prototype, 'selectedIndex', {\n            ...props,\n            set (v) {\n                if (this.options[v]) {\n                    this.options[v].selected = true;\n                }\n            }\n        });\n    }\n\n    /**\n     * <select>属性变化时候的处理\n     * @param {String} name 变化的属性名称\n     */\n    attributeChangedCallback (name) {\n        const eleButton = this.element.button;\n\n        if (name === 'disabled') {\n            if (!eleButton) return;\n            eleButton.disabled = this.disabled;\n        } else if (name === 'multiple') {\n            if (this.element.combobox) {\n                this.element.combobox.remove();\n                this.render();\n            }\n        } else if (name == 'width') {\n            this.setWidth();\n        }\n    }\n\n    /**\n     * is=\"ui-select\" 元素载入到页面后\n     */\n    connectedCallback () {\n        console.log('connectedCallback');\n        // 观察\n        this.observer = new MutationObserver((mutationsList) => {\n            let isRefresh = true;\n            mutationsList.forEach(mutation => {\n                if (mutation.type == 'attributes' && mutation.target.hasAttribute('selected')) {\n                    // setAttribute('selected') 并不一定能真正改变selected状态\n                    // 因此这里重新设置一次\n                    mutation.target.selected = true;\n                    // 上面代码就会自动触发刷新，无需再执行一次\n                    isRefresh = false;\n                }\n            });\n            if (isRefresh) {\n                this.refresh();\n            }\n        });\n        this.resizeObserver = new ResizeObserver(() => {\n            this.setWidth();\n            this.position();\n        });\n        this.observer.observe(this, {\n            childList: true,\n            subtree: true,\n            attributes: true,\n            attributeFilter: ['selected']\n        });\n        this.resizeObserver.observe(this);\n\n        // 全局事件\n        this.dispatchEvent(new CustomEvent('connected', {\n            detail: {\n                type: 'ui-select'\n            }\n        }));\n\n        this.isConnectedCallback = true;\n\n        // 渲染\n        this.render();\n    }\n\n    /**\n     * is=\"ui-select\" 元素从页面移除后\n     */\n    disconnectedCallback () {\n        if (!this.observer || !this.resizeObserver) {\n            return;\n        }\n        this.remove();\n        this.observer.disconnect();\n        this.resizeObserver.disconnect();\n    }\n}\n\n// option.selected 观察\nconst propOptionSelected = Object.getOwnPropertyDescriptor(HTMLOptionElement.prototype, 'selected');\nObject.defineProperty(HTMLOptionElement.prototype, 'selected', {\n    ...propOptionSelected,\n    set (value) {\n        propOptionSelected.set.call(this, value);\n\n        // 重新渲染\n        if (this.parentElement && this.parentElement.refresh) {\n            this.parentElement.refresh();\n        }\n    }\n});\n\n// 自定义元素注册\nif (!customElements.get('ui-select')) {\n    customElements.define('ui-select', Select, {\n        extends: 'select'\n    });\n}\n\n/**\n * @Drop.js\n * @author zhangxinxu\n * @version\n * @created 15-06-30\n * @edited  20-07-08 edit by wanglei\n */\n\n// import './Follow.js';\n\nclass Drop extends HTMLElement {\n\n    static get observedAttributes () {\n        return ['open', 'target'];\n    }\n\n    static get defaults () {\n        return {\n            eventtype: 'click',\n            position: '7-5'\n        };\n    }\n\n    /**\n     * @param {Object} trigger 触发元素\n     * @param {Object} target  显示的浮动定位元素\n     * @param {Object} options 可选参数\n     */\n    constructor (eleTrigger, eleTarget, options) {\n        super();\n\n        // 参数的处理\n        options = options || {};\n        this.params = this.params || {};\n        // 观察参数变化\n        this.params = new Proxy(this.params, {\n            get: (params, prop) => {\n                if (!prop) {\n                    return;\n                }\n                prop = prop.toLowerCase();\n\n                let value = params[prop];\n                let eleTrigger = this.element.trigger;\n\n                if (typeof value == 'undefined') {\n                    value = eleTrigger.getAttribute(prop) || eleTrigger.dataset[prop];\n\n                    if (prop == 'width') {\n                        if (eleTrigger !== this) {\n                            value = eleTrigger.dataset[prop];\n                        } else {\n                            value = eleTrigger.getAttribute(prop);\n                        }\n                    }\n\n                    // 部分参数如果没有，则使用默认的参数值\n                    if (typeof value == 'undefined' && Drop.defaults[prop]) {\n                        value = Drop.defaults[prop];\n                    }\n                }\n\n                return value;\n            },\n            set: (params, prop, value) => {\n                params[prop.toLowerCase()] = value;\n                return true;\n            }\n        });\n\n        let objElement = this.element || {};\n\n        // trigger和target元素的设置与获取\n        this.element = new Proxy(objElement, {\n            get: (target, prop) => {\n                if (prop == 'target') {\n                    let strIdTarget = this.getAttribute('target');\n                    let eleTarget = target[prop];\n                    if (!eleTarget && strIdTarget) {\n                        eleTarget = document.getElementById(strIdTarget);\n                    }\n                    return eleTarget;\n                }\n\n                if (prop == 'trigger') {\n                    return target[prop] || this;\n                }\n\n                return target[prop];\n            },\n            set: (target, prop, value) => {\n                if (typeof value == 'string') {\n                    value = document.getElementById(value) || document.querySelector(value);\n                }\n                // 只有当value是节点元素时候才赋值\n                if (value && typeof value.nodeType != 'number') {\n                    return false;\n                }\n\n                // 元素赋值\n                target[prop] = value;\n\n                // target元素设置时候同时需要赋值\n                if (prop == 'target' && value) {\n                    let eleTarget = value;\n                    let strId = eleTarget.id;\n                    if (!strId) {\n                        strId = ('lulu_' + Math.random()).replace('0.', '');\n                        eleTarget.id = strId;\n                    }\n\n                    let eleTrigger = this.element.trigger;\n\n                    // 如果用户直接使用this.element.target赋值，则需要同步target属性值\n                    if (eleTrigger == this) {\n                        // 此if判断可以避免死循环\n                        if (this.target != strId) {\n                            this.target = strId;\n                        }\n                    } else if (eleTrigger) {\n                        let strAttrTarget = eleTrigger.dataset.target;\n                        if (strAttrTarget && document.querySelector('datalist[id=\"' + strAttrTarget + '\"]')) {\n                            // 如果匹配的是<datalist>元素\n                            eleTrigger.setAttribute('data-target2', strId);\n                        } else {\n                            eleTrigger.setAttribute('data-target', strId);\n                        }\n                    }\n                }\n\n                return true;\n            }\n        });\n\n        // 开始参数设置\n        // eleTrigger, eleTarget, options均可缺省\n        [...arguments].forEach(function (argument) {\n            if (typeof argument == 'object' && argument && !argument.tagName) {\n                options = argument;\n            }\n        });\n\n        if (eleTrigger) {\n            this.element.trigger = eleTrigger;\n        }\n\n        // 此时的eleTrigger一定是元素，之前可能是选择器\n        eleTrigger = this.element.trigger;\n        // target的处理\n        if (eleTrigger) {\n            // target元素\n            if (eleTarget && eleTarget !== options) {\n                this.element.target = eleTarget;\n            } else if (!eleTarget && eleTrigger.dataset && eleTrigger.dataset.target) {\n                this.element.target = eleTrigger.dataset.target;\n            }\n        }\n\n        // 参数设置\n        this.setParams(options);\n\n        // 如果默认open为true，则显示\n        if (this.open) {\n            if (document.readyState != 'loading') {\n                this.show();\n            } else {\n                window.addEventListener('DOMContentLoaded', () => {\n                    this.show();\n                });\n            }\n        }\n\n        if (eleTrigger !== this) {\n            // 隐藏<ui-drop>元素细节\n            this.addEventListener('connected', function () {\n                this.remove();\n            });\n\n            eleTrigger['ui-drop'] = this;\n\n            document.body.append(this);\n        }\n    }\n\n    get htmlFor () {\n        return this.getAttribute('for');\n    }\n    set htmlFor (v) {\n        // 设置属性\n        this.setAttribute('for', v);\n    }\n\n    // 目标元素的设置与获取\n    get target () {\n        return this.getAttribute('target');\n    }\n    set target (value) {\n        this.setAttribute('target', value);\n    }\n\n    get eventType () {\n        return this.getAttribute('eventtype') || 'click';\n    }\n    set eventType (value) {\n        this.setAttribute('eventtype', value);\n    }\n\n    get open () {\n        return this.hasAttribute('open');\n    }\n    set open (value) {\n        this.toggleAttribute('open', value);\n    }\n\n    // 设置参数方法\n    setParams (options) {\n        options = options || {};\n        // 显示与隐藏的回调\n        let funCallShow = options.onShow;\n        let funCallHide = options.onHide;\n        if (typeof funCallShow == 'function') {\n            this.addEventListener('show', function (event) {\n                funCallShow.call(this, event);\n                // 自定义的显示方法需要重定位\n                this.position();\n            });\n\n            delete options.onShow;\n        }\n        if (typeof funCallHide == 'function') {\n            this.addEventListener('hide', function (event) {\n                funCallHide.call(this, event);\n            });\n\n            delete options.onHide;\n        }\n        // 参数合并\n        Object.assign(this.params, options || {});\n    }\n\n    /**\n     * 下拉定位的事件处理\n     * @return {[type]} [description]\n     */\n    events (isIgnoreTarget) {\n        // 元素\n        let eleTrigger = this.element.trigger;\n        let eleTarget = this.element.target;\n\n        // 如果没有target 并且不是无视没有target，返回\n        if (!eleTarget && !isIgnoreTarget) {\n            return;\n        }\n\n        if (eleTarget && eleTarget.matches('datalist')) {\n            return;\n        }\n\n        // 参数\n        const objParams = this.params;\n\n        // 获取匹配选择器的eleTrigger子元素\n        const funGetClosestChild = (element) => {\n            if (!objParams.selector) {\n                return null;\n            }\n\n            const eleClosestSelector = element.closest(objParams.selector);\n            if (eleTrigger.contains(eleClosestSelector) == false) {\n                return null;\n            }\n\n            return eleClosestSelector;\n        };\n\n        // 根据不同事件类型进行逻辑处理\n        switch (objParams.eventType) {\n            // 默认值，直接显示\n            case 'null': {\n                break;\n            }\n            case 'hover': case 'mouseover': case 'mouseenter': {\n                // 如果不是无视target\n                if (!eleTarget) {\n                    setTimeout(() => {\n                        // vue, react等框架渲染时候，target可能会滞后\n                        // 所以加个定时器处理\n                        if (this.element.target) {\n                            this.events();\n                        }\n                    }, 1);\n                    // 一定要返回，否则下面的会报错\n                    // click事件可以不返回，因为target不存在也可以触发\n                    return;\n                }\n                // hover处理需要增加延时\n                eleTarget.timerHover = null;\n                // 同时，从trigger移动到target也需要延时，\n                // 因为两者可能有间隙，不能单纯移出就隐藏\n                eleTarget.timerHold = null;\n                // 此if逻辑用来避免事件重复绑定\n                // 因为Panel或List方法会再次执行一遍events()方法\n                if (!eleTrigger.isBindDropEvents) {\n                    // 事件走起\n                    eleTrigger.addEventListener('mouseover', event => {\n                        // 不是在元素自身移动\n                        if (event.relatedTarget !== event.target) {\n                            // 委托查询\n                            const eleClosestSelector = funGetClosestChild(event.target);\n\n                            // 如果走委托\n                            if (eleClosestSelector) {\n                                // 改变trigger元素\n                                this.element.trigger = eleClosestSelector;\n                            }\n\n                            // 显示定时器\n                            if (!objParams.selector || eleClosestSelector) {\n                                // 显示的定时器\n                                eleTarget.timerHover = setTimeout(() => {\n                                    this.show();\n                                }, 150);\n\n                                // 去除隐藏的定时器\n                                clearTimeout(eleTarget.timerHold);\n                            }\n                        }\n                    });\n\n                    eleTrigger.addEventListener('mouseout', (event) => {\n                        // 这个 if 判断主要是兼容设置了 options.selector 参数的场景\n                        // 避免容器元素鼠标移出的时候才隐藏，因为是容器内委托的元素移除隐藏\n                        if (this.element.trigger == event.target || this.element.trigger.contains(event.target)) {\n                            // 清除显示的定时器\n                            clearTimeout(eleTarget.timerHover);\n                            // 隐藏的定时器\n                            eleTarget.timerHold = setTimeout(() => {\n                                this.hide();\n                            }, 200);\n                        }\n                    });\n\n                    if (eleTarget && !eleTarget.isBindDropHover) {\n                        eleTarget.addEventListener('mouseenter', () => {\n                            // 去除隐藏的定时器\n                            clearTimeout(eleTarget.timerHold);\n                        });\n                        eleTarget.addEventListener('mouseleave', () => {\n                            // 隐藏\n                            eleTarget.timerHold = setTimeout(() => {\n                                // 需要触发元素也是hover类型\n                                let eleRelatedTrigger = eleTarget.element.trigger;\n                                // eleRelatedTrigger是<ui-drop>元素\n                                if (eleRelatedTrigger && eleRelatedTrigger.eventType == 'hover') {\n                                    eleRelatedTrigger.hide();\n                                }\n                            }, 100);\n                        });\n\n                        eleTarget.isBindDropHover = true;\n                    }\n\n                    // 键盘支持，原本使用focus事件，但并不利于键盘交互\n                    eleTrigger.addEventListener('click', event => {\n                        // window.isKeyEvent表示是否键盘触发，来自Keyboard.js\n                        if (!window.isKeyEvent) {\n                            return;\n                        }\n\n                        event.preventDefault();\n\n                        const eleClosestSelector = funGetClosestChild(event.target);\n                        // 如果走委托\n                        if (eleClosestSelector) {\n                            // 改变trigger元素\n                            this.element.trigger = eleClosestSelector;\n                        }\n\n                        // 显示定时器\n                        if (!objParams.selector || eleClosestSelector) {\n                            // 点击即显示\n                            if (!this.open) {\n                                this.show();\n                            } else {\n                                this.hide();\n                            }\n                        }\n                    });\n\n                    // 统一设置事件类型为hover\n                    if (this.eventType != 'hover') {\n                        this.eventType = 'hover';\n                    }\n                }\n\n                break;\n            }\n\n            // 点击或者右键\n            case 'click': case 'contextmenu': {\n                if (!eleTrigger.isBindDropEvents || eleTrigger.isBindDropEvents !== objParams.eventType) {\n                    eleTrigger.addEventListener(objParams.eventType, event => {\n                        event.preventDefault();\n                        // aria支持\n                        // 获得委托的选择器匹配元素\n                        const eleClosestSelector = funGetClosestChild(event.target);\n\n                        if (eleClosestSelector) {\n                            // 改变trigger元素\n                            this.element.trigger = eleClosestSelector;\n                        }\n\n                        // 点击即显示\n                        if (!objParams.selector || eleClosestSelector) {\n                            // 连续右键点击保持显示，非显隐切换\n                            if (objParams.eventType == 'contextmenu') {\n                                objParams.position = [event.pageX, event.pageY];\n                                this.show();\n\n                                return;\n                            }\n\n                            if (!this.open) {\n                                this.show();\n                            } else {\n                                this.hide();\n                            }\n                        }\n                    });\n                }\n\n                break;\n            }\n\n            default: {\n                break;\n            }\n        }\n\n        // 点击页面空白区域隐藏\n        if (objParams.eventType != 'null' && !eleTrigger.isBindDocMouseUp) {\n            document.addEventListener('mouseup', event => {\n                let eleClicked = event && event.target;\n\n                if (!eleClicked || !this.open) {\n                    return;\n                }\n\n                // 因为trigger和target可能动态变化\n                // 因此这里再次获取一遍\n                let eleTrigger = this.element.trigger;\n                let eleTarget = this.element.target;\n\n                if (eleTrigger.contains(eleClicked) == false && (!eleTarget || eleTarget.contains(eleClicked) == false)) {\n                    this.hide();\n                }\n            });\n\n            eleTrigger.isBindDocMouseUp = true;\n        }\n\n        eleTrigger.isBindDropEvents = objParams.eventType || true;\n\n        // 窗体尺寸改变生活的重定位\n        window.addEventListener('resize', () => {\n            this.position();\n        });\n\n        this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n\n        if (eleTrigger != this) {\n            eleTrigger.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n        }\n    }\n\n    /**\n     * 下拉定位处理\n     * @return {Object} 返回当前自定义元素\n     */\n    position () {\n        let eleTrigger = this.element.trigger;\n        let eleTarget = this.element.target;\n\n        // 下拉必须是显示状态才执行定位处理\n        if (this.open && eleTarget && window.getComputedStyle(eleTrigger).display != 'none') {\n            eleTrigger.follow(eleTarget, {\n                offsets: this.params.offsets,\n                position: this.params.position,\n                edgeAdjust: this.params.edgeAdjust\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * 下拉的显示处理\n     * @return {Object} 返回当前自定义元素\n     */\n    show () {\n        // target需要在页面中\n        let eleTrigger = this.element.trigger;\n        let eleTarget = this.element.target;\n\n        // 如果target在内存中，append到页面上\n        if (eleTarget && document.body.contains(eleTarget) == false) {\n            document.body.appendChild(eleTarget);\n        }\n\n        if (eleTarget) {\n            // 进行定位\n            eleTarget.style.position = 'absolute';\n            eleTarget.style.display = 'inline';\n            // 键盘ESC隐藏支持\n            eleTarget.classList.add('ESC');\n            eleTarget.tabIndex = -1;\n            // 焦点转移到浮层元素上\n            eleTarget.focus({\n                preventScroll: true\n            });\n\n            // 标记target此时对应的trigger元素\n            eleTarget.element = eleTarget.element || {};\n            eleTarget.element.trigger = this;\n        }\n        // aria\n        eleTrigger.setAttribute('aria-expanded', 'true');\n\n        // 改变显示标志量\n        if (!this.open) {\n            this.open = true;\n        }\n\n        // 定位\n        this.position();\n\n        // 触发自定义事件 - show\n        this.dispatchEvent(new CustomEvent('show'));\n\n        // 如果trigger元素非<ui-drop>元素，则也触发一下，同时传递show事件来源\n        // 因为一个普通的HTML元素可能会LuLu ui不同的组件触发'show'事件\n        if (eleTrigger != this) {\n            eleTrigger.dispatchEvent(new CustomEvent('show', {\n                detail: {\n                    type: 'ui-drop'\n                }\n            }));\n        }\n\n        return this;\n    }\n\n    /**\n     * 下拉的隐藏处理\n     * @return {Object} 返回当前自定义元素\n     */\n    hide () {\n        let eleTrigger = this.element.trigger;\n        let eleTarget = this.element.target;\n\n        // 隐藏下拉面板\n        if (eleTarget) {\n            eleTarget.style.display = 'none';\n            eleTarget.classList.remove('ESC');\n            // 取消target元素上的trigger关联\n            // 因为一个target元素可以关联多个trigger\n            if (eleTarget.element) {\n                delete eleTarget.element.trigger;\n            }\n        }\n\n        // aria\n        eleTrigger.setAttribute('aria-expanded', 'false');\n\n        if (window.isKeyEvent) {\n            eleTrigger.focus();\n        }\n\n        // 更改显示标志量\n        if (this.open) {\n            this.open = false;\n        }\n\n        // 触发自定义事件 - hide\n        this.dispatchEvent(new CustomEvent('hide'));\n\n        if (eleTrigger != this) {\n            eleTrigger.dispatchEvent(new CustomEvent('hide', {\n                detail: {\n                    type: 'ui-drop'\n                }\n            }));\n        }\n\n        return this;\n    }\n\n\n    /**\n     * drop 拓展list\n     * @date 2019-11-01\n     * @returns {object} 返回当前自定义元素\n     * 兼容以下几种语法\n     * new Drop().list(eleTrigger, data);\n     * new Drop().list(eleTrigger, data, options);\n     * new Drop(eleTrigger).list(data, options);\n     * new Drop(eleTrigger, options).list(data);\n     */\n    list (eleTrigger, data, options) {\n        // datalist 元素的 option 转为列表数据\n        const funGetDataByOption = function (option) {\n            let obj = {\n                id: option.id || option.value,\n                value: option.innerHTML || option.value,\n                className: option.className,\n                disabled: option.disabled,\n                label: option.label,\n                accessKey: option.accessKey\n            };\n            // disabled处理\n            let eleOptgroup = option.closest('optgroup');\n            if (eleOptgroup && eleOptgroup.disabled) {\n                obj.disabled = true;\n            }\n            // href 属性处理\n            if (option.hasAttribute('href')) {\n                obj.href = option.getAttribute('href');\n            }\n\n            return obj;\n        };\n        // 基于类型进行参数判断\n        [...arguments].forEach(argument => {\n            const strTypeArgument = typeof argument;\n            if (strTypeArgument === 'string') {\n                eleTrigger = document.getElementById(argument) || document.querySelector(argument);\n            } else if (strTypeArgument === 'function') {\n                data = argument;\n            } else if (strTypeArgument === 'object') {\n                if (typeof argument.nodeType === 'number') {\n                    // 支持从原生的列表元素中获取数据信息\n                    if (argument.matches('datalist')) {\n                        data = function () {\n                            // 所有分组元素\n                            let eleOptgroups = argument.querySelectorAll('optgroup');\n                            // 如果有任意一个分组元素设置了label，那么就是标题分组\n                            // 如果只是optgroup标签包括，那么使用分隔线分隔\n                            let isSubTitle = !!argument.querySelector('optgroup[label]');\n\n                            // 如果有分组\n                            if (eleOptgroups.length) {\n                                let arrData = [];\n\n                                eleOptgroups.forEach(optgroup => {\n                                    if (isSubTitle) {\n                                        arrData.push({\n                                            id: '-1',\n                                            value: optgroup.label,\n                                            disabled: optgroup.disabled,\n                                            className: optgroup.className,\n                                            heading: true\n                                        });\n                                    } else {\n                                        // 分隔线\n                                        arrData.push({});\n                                    }\n\n                                    optgroup.querySelectorAll('option').forEach(option => {\n                                        arrData.push(funGetDataByOption(option));\n                                    });\n                                });\n\n                                return arrData;\n                            }\n\n                            return [...argument.querySelectorAll('option')].map((option, index) => {\n                                let objOption = funGetDataByOption(option);\n                                if (!objOption.value) {\n                                    return {};\n                                }\n                                if (!objOption.id) {\n                                    objOption.id = index;\n                                }\n\n                                return objOption;\n                            });\n                        };\n                        if (eleTrigger == argument) {\n                            eleTrigger = null;\n                        }\n                    } else {\n                        eleTrigger = argument;\n                    }\n                } else if (argument.map) {\n                    data = argument;\n                } else {\n                    options = argument;\n                }\n            }\n        });\n\n        if (eleTrigger && typeof eleTrigger.nodeType !== 'number') {\n            eleTrigger = null;\n        }\n        eleTrigger = eleTrigger || this.element.trigger;\n\n        // 触发元素和数据是必须项\n        if (!eleTrigger) {\n            return this;\n        }\n\n        if (!data) {\n            data = [];\n        }\n\n        const defaults = {\n            // 触发元素显示的事件，‘null’直接显示；‘hover’是hover方法；‘click’是点击显示；其他为手动显示与隐藏。\n            eventType: 'click',\n            offsets: {\n                x: 0,\n                y: 0\n            },\n            position: '4-1',\n            selector: '',\n            width: '',\n            onShow: () => {},\n            onHide: () => {},\n            // this为当前点击的列表元素，支持两个参数，第一个参数为列表元素对应的数据(纯对象)，第二个是当前实例对象\n            onSelect: () => {}\n        };\n\n        // 参数处理\n        const objParams = {};\n        options = options || {};\n\n        Object.keys(defaults).forEach(prop => {\n            objParams[prop] = options[prop] || this.params[prop] || defaults[prop];\n        });\n\n        // 一些常量\n        const SELECTED = 'selected';\n        const DISABLED = 'disabled';\n        // ui类名\n        // 类名变量\n        // 样式类名统一处理\n\n        const CL = {\n            add: function () {\n                return ['ui-droplist'].concat([].slice.call(arguments)).join('-');\n            },\n            toString: () => {\n                return 'ui-droplist';\n            }\n        };\n\n        // trigger元素赋值的方法\n        let strMethod = 'innerHTML';\n        if (eleTrigger.matches('input')) {\n            strMethod = 'value';\n        }\n\n        // target元素创建\n        let eleTarget = document.createElement('div');\n        eleTarget.setAttribute('role', 'listbox');\n        eleTarget.setAttribute('tabindex', '-1');\n\n        // 宽度处理\n        if (/^\\d+$/.test(objParams.width)) {\n            eleTarget.style.width = objParams.width + 'px';\n        } else {\n            eleTarget.style.width = objParams.width;\n        }\n        eleTarget.className = CL.add('x');\n\n        // 存储原始参数值\n        this.data = data;\n\n        // 列表渲染需要的数组项\n        let arrListData = data;\n\n        // 索引值内容的匹配\n        let funGetMatchIndex = (arr) => {\n            // 初始的匹配和默认索引值获取（如果没有设置selected选项）\n            // 匹配的索引值\n            let strMatchIndex = '-1';\n            // 是否默认包含选中项\n            let isSomeItemSelected = false;\n\n            // 遍历数据\n            // 目的是获得匹配索引，和改变默认值（如果有设置selected选项）\n            // 由于数据可能无限嵌套，因此走递归\n            let funRecursion = (arrData, arrIndex) => {\n                if (!arrData || !arrData.length) {\n                    return;\n                }\n\n                arrData.forEach((objData, numIndex) => {\n                    // 此时数组项的索引深度\n                    const arrCurrentIndex = arrIndex.concat(numIndex);\n\n                    // 多级数据结构\n                    if (objData && objData.data) {\n                        funRecursion(objData.data, arrCurrentIndex);\n                        return;\n                    }\n\n                    if (objData && objData[SELECTED] && !objData[DISABLED] && objData.value) {\n\n                        eleTrigger[strMethod] = objData.value;\n\n                        // 找到设置了selected的选项，并记住索引\n                        strMatchIndex = arrCurrentIndex.join('-');\n                    }\n\n                    // 修改全局判断，这样，eleTrigger无需\n                    // 再根据本身内容确定默认的选中项了\n                    if (objData && objData[SELECTED]) {\n                        isSomeItemSelected = true;\n                    }\n                });\n            };\n\n            funRecursion(arr, []);\n\n            // 此时trigger元素内部的内容\n            const strTrigger = (eleTrigger[strMethod] || '').trim();\n\n            // 根据eleTrigger的内容信息确定哪个数据是selected\n            // 遍历数据\n            if (isSomeItemSelected == false && strTrigger) {\n                funRecursion = (arrData, arrIndex) => {\n                    if (!arrData || !arrData.length) {\n                        return;\n                    }\n\n                    arrData.forEach((objData, numIndex) => {\n                        // 此时数组项的索引深度\n                        const arrCurrentIndex = arrIndex.concat(numIndex);\n\n                        // 多级数据结构\n                        if (objData && objData.data) {\n                            funRecursion(objData.data, arrCurrentIndex);\n                            return;\n                        }\n                        // 如果有匹配，设置为选中\n                        if (typeof objData.value === 'string' && objData.value.trim() == strTrigger) {\n                            strMatchIndex = arrCurrentIndex.join('-');\n\n                            // 设置为选中\n                            objData[SELECTED] = true;\n                        }\n                    });\n                };\n\n                funRecursion(arr, []);\n            }\n\n            return strMatchIndex;\n        };\n\n        let strMatchIndex = -1;\n\n        if (typeof data !== 'function' && data.length && data.map) {\n            strMatchIndex = funGetMatchIndex(arrListData);\n        }\n\n        // 列表绘制渲染方法\n        // 每次show的时候都执行刷新\n        const funRender = (eleTarget, arrListData) => {\n            if (typeof arrListData === 'function') {\n                arrListData = arrListData();\n                // 重新获取索引值，只有data是function类型的时候才执行\n                strMatchIndex = funGetMatchIndex(arrListData);\n            }\n\n            // 没有数据时候的处理\n            if (!arrListData || !arrListData.length) {\n                arrListData = [{\n                    value: '没有数据',\n                    disabled: true\n                }];\n            } else {\n                arrListData = arrListData.map(arrData => {\n                    if (typeof arrData == 'string' && arrData !== '-') {\n                        return {\n                            value: arrData\n                        };\n                    }\n                    return arrData;\n                });\n            }\n\n            // 是否包含选中项\n            let isSomeItemSelected = arrListData.some(objData => {\n                return objData && objData[SELECTED];\n            });\n\n            // 列表数据更新\n            eleTarget.innerHTML = (() => {\n                let strHtml = '';\n\n                const funStep = (arrData, arrIndex) => {\n\n                    let strHtmlStep = '';\n\n                    arrData.forEach((objData, numIndex) => {\n                        // 为空数据作为分隔线\n                        if (objData == '-' || objData === null || JSON.stringify(objData) == '{}') {\n                            strHtmlStep += '<hr class=\"' + CL.add('hr') + '\">';\n                            return;\n                        }\n\n                        // 此时数组项的索引深度\n                        const arrCurrentIndex = arrIndex.concat(numIndex);\n\n                        // 一些属性值\n                        let strAttrHref = objData.href;\n                        if (typeof strAttrHref != 'string') {\n                            strAttrHref = 'javascript:';\n                        } else if (!strAttrHref) {\n                            strAttrHref = location.href.split('#')[0];\n                        }\n\n                        // target属性\n                        let strAttrTarget = '';\n                        if (objData.target) {\n                            strAttrTarget = ' target=\"' + objData.target + '\"';\n                        }\n\n                        // 是否包含子项\n                        let strAttrSublist = '';\n                        if (objData.data) {\n                            strAttrSublist = ' data-sublist';\n                        }\n\n                        // label标记\n                        let strAttrLabel = '';\n                        if (objData.label) {\n                            strAttrLabel = ' aria-label=\"' + objData.label + '\"';\n                        }\n\n                        // accesskey快捷访问\n                        let strAttrAccess = '';\n                        if (objData.accessKey) {\n                            strAttrAccess = ` accesskey=\"${objData.accessKey}\"`;\n                        }\n\n                        // 如果数据不含选中项，使用存储的索引值进行匹配\n                        if (isSomeItemSelected == false && strMatchIndex == arrCurrentIndex.join('-')) {\n                            objData[SELECTED] = true;\n                        }\n\n                        // 类名\n                        let strAttrClass = CL.add('li') + ' ' + objData.className;\n                        if (objData[SELECTED]) {\n                            strAttrClass = strAttrClass + ' ' + SELECTED;\n                        }\n\n                        strAttrClass = strAttrClass.trim();\n\n                        // 如果是标题元素\n                        if (objData.heading == true) {\n                            if (objData.disabled) {\n                                strAttrClass += ' disabled';\n                            }\n                            strHtmlStep += '<div class=\"' + strAttrClass + '\"' + strAttrLabel + ' role=\"heading\">' + objData.value + '</div>';\n                            return;\n                        }\n\n                        // 禁用态和非禁用使用标签区分\n                        // 如果想要支持多级，data-index值可以\"1-2\"这样\n                        if (objData[DISABLED] != true) {\n                            strHtmlStep += '<a href=\"' + strAttrHref + '\"' + strAttrTarget + strAttrLabel + strAttrAccess + ' class=\"' + strAttrClass + '\" data-index=\"' + arrCurrentIndex.join('-') + '\" role=\"option\" aria-selected=\"' + (objData[SELECTED] || 'false') + '\" ' + strAttrSublist + '>' + objData.value + '</a>';\n\n                            if (objData.data) {\n                                strHtmlStep += '<div class=\"' + CL.add('xx') + '\"><div class=\"' + CL.add('x') + '\" role=\"listbox\">' + funStep(objData.data, arrCurrentIndex) + '</div></div>';\n                            }\n                        } else {\n                            strHtmlStep += '<span class=\"' + strAttrClass + '\"' + strAttrLabel + strAttrAccess + '>' + objData.value + '</span>';\n                        }\n                    });\n\n                    return strHtmlStep;\n                };\n\n                strHtml += funStep(arrListData, []);\n\n                return strHtml;\n            })();\n\n            // 存储在DOM对象上，给回调使用\n            eleTarget.listData = arrListData;\n        };\n\n        // 重新初始化 drop\n        this.setParams({\n            eventType: objParams.eventType,\n            offsets: objParams.offsets,\n            selector: objParams.selector,\n            position: objParams.position,\n            onShow: function () {\n                funRender.call(this, eleTarget, this.data);\n                objParams.onShow.apply(this, arguments);\n            },\n            onHide: objParams.onHide\n        });\n\n        this.element.trigger = eleTrigger;\n        this.element.target = eleTarget;\n\n        // 新的事件\n        this.events();\n\n        // 绑定事件\n        eleTarget.addEventListener('click', event => {\n            // IE可能是文件节点\n            if (event.target.nodeType != 1 || !event.target.closest) {\n                return;\n            }\n            // 目标点击元素\n            const eleClicked = event.target.closest('a');\n\n            // 未获取到元素返回\n            if (!eleClicked) {\n                return;\n            }\n\n            // 当前列表显示使用的数据\n            const arrListData = eleTarget.listData;\n\n            // 如果是多级嵌套列表，这里需要额外处理\n            const strIndex = eleClicked.getAttribute('data-index');\n\n            if (!strIndex) {\n                return;\n            }\n\n            // 根据点击的元素索引获取对应的数据对象\n            let objItemData = null;\n            strIndex.split('-').forEach(numIndex => {\n                if (objItemData === null) {\n                    objItemData = arrListData[numIndex];\n                } else if (objItemData.data) {\n                    objItemData = objItemData.data[numIndex];\n                } else {\n                    objItemData = objItemData[numIndex];\n                }\n            });\n\n            // 如果这里返回，说明数据有问题\n            // 或者代码逻辑有bug\n            if (!objItemData) {\n                return;\n            }\n\n            // 点击包含下级数据的列表\n            if (typeof eleClicked.getAttribute('data-sublist') === 'string') {\n                eleClicked.classList.add(SELECTED);\n\n                // 此时显示的下级列表元素\n                const eleSubTarget = eleClicked.nextElementSibling.querySelector('.' + CL.add('x'));\n\n                if (!eleSubTarget) {\n                    return;\n                }\n                // 偏移还原\n                // 否则会A/B重定位\n                eleSubTarget.style.transform = '';\n                eleSubTarget.classList.remove('reverse');\n\n                // 此时偏移\n                const objBounding = eleSubTarget.getBoundingClientRect();\n                // 水平方向是方向变化，这里使用document.documentElement宽度判断\n                // 因为window.innerWidth包括滚动条宽度，可能会导致水平滚动条出现\n                // 交给CSS控制\n                if (objBounding.right > document.documentElement.clientWidth) {\n                    eleSubTarget.classList.add('reverse');\n                }\n\n                // 垂直方向偏移\n                let offsetTop = 0;\n\n                if (objBounding.bottom > window.innerHeight) {\n                    offsetTop = window.innerHeight - objBounding.bottom;\n                }\n\n                eleSubTarget.style.transform = 'translateY(' + offsetTop + 'px)';\n\n                return;\n            }\n\n            // 改变选中索引\n            if (strIndex != strMatchIndex) {\n                let objLastItemData = null;\n\n                if (strMatchIndex != '-1') {\n                    strMatchIndex.split('-').forEach(numIndex => {\n                        if (objLastItemData === null) {\n                            objLastItemData = arrListData[numIndex];\n                        } else if (objLastItemData.data) {\n                            objLastItemData = objLastItemData.data[numIndex];\n                        } else {\n                            objLastItemData = objLastItemData[numIndex];\n                        }\n                    });\n\n                    if (objLastItemData) {\n                        delete objLastItemData[SELECTED];\n                    }\n                }\n\n                // 设置为true\n                objItemData[SELECTED] = true;\n\n                // 更新匹配索引\n                strMatchIndex = strIndex;\n            }\n\n            // 触发用户自定义选择事件\n            (this.params.onSelect || objParams.onSelect).call(this, objItemData, eleClicked);\n\n            // 触发自定义事件 - select\n            this.dispatchEvent(new CustomEvent('select', {\n                detail: {\n                    data: objItemData,\n                    target: eleClicked\n                }\n            }));\n\n            // 如果trigger元素非<ui-drop>元素，则也触发一下，同时传递select事件来源\n            // 如果是在Vue中，可以使用@select绑定选择事件\n            if (eleTrigger != this) {\n                eleTrigger.dispatchEvent(new CustomEvent('select', {\n                    detail: {\n                        type: 'ui-drop',\n                        data: objItemData,\n                        target: eleClicked\n                    }\n                }));\n            }\n\n            // 不是鼠标右击事件，也不是委托模式更新\n            if (objParams.eventType != 'contextmenu' && objParams.selector == '' && !objItemData.href) {\n                eleTrigger[strMethod] = objItemData.value;\n            }\n            // 隐藏\n            this.hide();\n        });\n\n        // hover时候次级列表也显示\n        eleTarget.addEventListener('mouseover', event => {\n            // IE可能是文件节点\n            if (event.target.nodeType != 1 || !event.target.closest) {\n                return;\n            }\n            const eleHovered = event.target.closest('a');\n\n            if (!eleHovered) {\n                return;\n            }\n\n            const eleItemSublist = eleHovered.parentElement.querySelector('.' + SELECTED + '[data-sublist]');\n\n            if (eleItemSublist && eleItemSublist != eleHovered) {\n                eleItemSublist.classList.remove(SELECTED);\n            }\n            if (eleHovered.classList.contains(SELECTED) == false && typeof eleHovered.getAttribute('data-sublist') === 'string') {\n                eleHovered.click();\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * drop 拓展panel\n     * @date 2019-11-01\n     * 兼容以下两种语法\n     * new Drop().panel(eleTrigger, options);\n     * new Drop(eleTrigger).panel(options);\n     * new Drop(eleTrigger).panel(eleTarget);\n     * @returns {object} 返回当前自定义元素\n     */\n    panel (eleTrigger, options) {\n        // 不同类型参数的处理\n        if (arguments.length === 2) {\n            eleTrigger = arguments[0];\n            options = arguments[1];\n        } else if (arguments.length === 1) {\n            options = arguments[0];\n\n            if (options.matches && options.matches('dialog')) {\n                let eleTarget = options;\n                // 按钮信息\n                let strButtons = eleTarget.dataset.buttons;\n                var arrButtons = [];\n                // 如果data-buttons为空字符串，或者是 null、false, 则不显示按钮\n                if (strButtons !== '' && strButtons !== 'null' && strButtons !== 'false') {\n                    strButtons = strButtons || '';\n                    arrButtons = [{\n                        value: strButtons.split(',')[0].trim(),\n                        events: () => {\n                            eleTarget.dispatchEvent(new CustomEvent('ensure', {\n                                detail: {\n                                    drop: this\n                                }\n                            }));\n                        }\n                    }, {\n                        value: (strButtons.split(',')[1] || '').trim(),\n                        events: () => {\n                            eleTarget.dispatchEvent(new CustomEvent('cancel', {\n                                detail: {\n                                    drop: this\n                                }\n                            }));\n                            this.hide();\n                        }\n                    }];\n                }\n\n                options = {\n                    content: eleTarget.innerHTML,\n                    title: eleTarget.title,\n                    buttons: arrButtons\n                };\n            }\n\n            eleTrigger = null;\n        }\n        if (typeof eleTrigger === 'string') {\n            eleTrigger = document.querySelector(eleTrigger);\n        }\n\n        eleTrigger = eleTrigger || this.element.trigger;\n\n        if (!eleTrigger) {\n            return this;\n        }\n\n        options = options || {};\n\n        // 支持从 trigger 元素上获取部分参数\n        ['width', 'eventType', 'selector', 'offsets', 'position'].forEach(function (strKey) {\n            const strAttrKey = eleTrigger.getAttribute(strKey) || eleTrigger.dataset[strKey.toLowerCase()];\n            if (strAttrKey && typeof options[strKey] == 'undefined') {\n                options[strKey] = strAttrKey;\n            }\n        });\n\n        const defaults = {\n            title: '',\n            content: '',\n            buttons: [{}, {}],\n            width: 'auto',\n            eventType: 'click',\n            selector: '',\n            offsets: {\n                x: 0,\n                y: 0\n            },\n            position: '4-1',\n            onShow: () => { },\n            onHide: () => { }\n        };\n\n        // Drop 配置\n        const objParams = Object.assign({}, defaults, options);\n\n        // ui类名\n        // 类名变量\n        // 样式类名统一处理\n        const CL = {\n            add: function () {\n                return ['ui-dropanel'].concat([].slice.call(arguments)).join('-');\n            },\n            toString: () => {\n                return 'ui-dropanel';\n            }\n        };\n\n        // 面板容器\n        const elePanel = document.createElement('div');\n        elePanel.className = CL.add('x');\n        // 面板的宽度设置\n        // 如果纯数值，认为是px长度\n        if (/^\\d+$/.test(objParams.width)) {\n            elePanel.style.width = objParams.width + 'px';\n        } else if (/^\\d+\\D+$/.test(objParams.width)) {\n            elePanel.style.width = objParams.width;\n        }\n\n        // 创建轻弹框面板的各个元素\n        // title\n        const eleTitle = document.createElement('h5');\n        eleTitle.className = CL.add('title');\n        eleTitle.innerHTML = objParams.title;\n\n        // close button\n        const eleClose = document.createElement('button');\n        eleClose.setAttribute('aria-label', '关闭');\n        eleClose.className = CL.add('close');\n\n        // content\n        const eleContent = document.createElement('content');\n        eleContent.className = CL.add('content');\n        eleContent.innerHTML = objParams.content;\n\n        // footer\n        const eleFooter = document.createElement('div');\n        eleFooter.className = CL.add('footer');\n\n        // 组装\n        elePanel.appendChild(eleTitle);\n        elePanel.appendChild(eleClose);\n        elePanel.appendChild(eleContent);\n        elePanel.appendChild(eleFooter);\n\n        // 初始化\n        this.setParams({\n            eventType: objParams.eventType,\n            offsets: objParams.offsets,\n            // 实现点击或hover事件的委托实现\n            selector: objParams.selector,\n            position: objParams.position,\n            onShow: objParams.onShow,\n            onHide: objParams.onHide\n        });\n\n        // 重新添加element\n        Object.assign(this.element, {\n            trigger: eleTrigger,\n            target: elePanel,\n            panel: elePanel,\n            title: eleTitle,\n            close: eleClose,\n            content: eleContent,\n            footer: eleFooter\n        });\n\n        // 事件初始化\n        this.events();\n\n        // 绑定事件\n        // 关闭事件\n        eleClose.addEventListener('click', () => {\n            this.hide();\n        }, false);\n\n        // 按钮\n        objParams.buttons.forEach((objBtn, numIndex) => {\n            // 避免btn为null等值报错\n            objBtn = objBtn || {};\n            // 按钮的默认参数\n            let strType = objBtn.type || '';\n            if (!strType && numIndex == 0) {\n                strType =  objParams.buttons.length > 1 ? 'danger' : 'primary';\n            }\n            let strValue = objBtn.value;\n            if (!strValue) {\n                strValue = ['确定', '取消'][numIndex];\n            }\n\n            // 如果没有指定事件，则认为是关闭行为\n            let objEvents = objBtn.events || {\n                click: () => {\n                    this.hide();\n                }\n            };\n\n            // 如果没有指定事件类型，直接是函数\n            // 则认为是点击事件\n            if (typeof objEvents === 'function') {\n                objEvents = {\n                    click: objEvents\n                };\n            }\n\n            let eleBtn = null;\n\n            // 普通按钮\n            if (objBtn['for']) {\n                eleBtn = document.createElement('label');\n                eleBtn.setAttribute('for', objBtn['for']);\n                eleBtn.setAttribute('role', 'button');\n            } else if (objBtn.form) {\n                eleBtn.setAttribute('form', objBtn.form);\n                eleBtn.type = 'submit';\n            } else {\n                eleBtn = document.createElement('button');\n                this.element['button' + numIndex] = eleBtn;\n            }\n            // 按钮的文案\n            eleBtn.innerHTML = strValue;\n            // 按钮类名\n            eleBtn.className = String(CL).replace('dropanel', 'button') + ' ' + CL.add('button') + ' ' + (objBtn.className || '');\n            // 按钮的类型\n            eleBtn.setAttribute('data-type', strType || 'normal');\n            this.element['button' + numIndex] = eleBtn;\n\n            for (let strEventType in objEvents) {\n                eleBtn.addEventListener(strEventType, event => {\n                    event.drop = this;\n                    objEvents[strEventType](event);\n                }, false);\n            }\n            this.element.footer.appendChild(eleBtn);\n        });\n\n        return this;\n    }\n\n    /**\n     * <ui-drop>元素进入页面中的时候\n    **/\n    connectedCallback () {\n        let eleTarget = this.element.target;\n        let eleTrigger = this.element.trigger;\n\n        // 默认的aria状态设置\n        if (eleTrigger.open) {\n            eleTrigger.setAttribute('aria-expanded', 'true');\n        } else {\n            eleTrigger.setAttribute('aria-expanded', 'false');\n        }\n\n        // 页面中的<ui-drop>元素如果没有target\n        // 强制绑定事件，这样<ui-drop>元素可以实现open切换效果\n        if (!eleTarget) {\n            this.events(eleTrigger === this);\n        } else if (eleTarget.matches('datalist')) {\n            this.list(eleTarget);\n        } else if (eleTarget.matches('dialog')) {\n            this.panel(eleTarget);\n        } else {\n            this.events();\n        }\n\n        // 无障碍访问设置\n        if (!this.querySelector('a, button') && !this.closest('a, button')) {\n            this.tabIndex = 0;\n            this.role = 'button';\n        }\n\n        // 全局事件\n        this.dispatchEvent(new CustomEvent('connected', {\n            detail: {\n                type: 'ui-drop'\n            }\n        }));\n\n        if (eleTrigger != this && eleTrigger.hasAttribute('is-drop')) {\n            eleTrigger.dispatchEvent(new CustomEvent('connected', {\n                detail: {\n                    type: 'ui-drop'\n                }\n            }));\n\n            // 设置定义完毕标志量\n            eleTrigger.setAttribute('defined', '');\n        }\n\n        this.isConnectedCallback = true;\n    }\n\n    // open属性变化的时候\n    attributeChangedCallback (name, oldValue, newValue) {\n        if (name == 'target') {\n            let eleTarget = document.getElementById(newValue);\n            if (eleTarget) {\n                this.element.target = eleTarget;\n            }\n        } else if (name == 'open') {\n            let strAriaExpanded = this.element.trigger.getAttribute('aria-expanded');\n            if (this.open && strAriaExpanded == 'false') {\n                this.show();\n            } else if (!this.open && strAriaExpanded == 'true') {\n                this.hide();\n            }\n        }\n    }\n}\n\nwindow.Drop = Drop;\n\nif (!customElements.get('ui-drop')) {\n    customElements.define('ui-drop', Drop);\n}\n\n// 给 HTML 元素扩展 drop 方法\nHTMLElement.prototype.drop = function (eleTarget, options) {\n    if (!this.matches('ui-drop, [is-drop]') && !this['ui-drop']) {\n        this['ui-drop'] = new Drop(this, eleTarget, options);\n    }\n\n    return this;\n};\n\n\n/**\n * 初始化所有包含is-drop属性的节点\n * 支持事件冒泡，当点击的元素或者祖先元素，设置了is-drop属性，则把is-drop的属性值作为下拉元素的id，并根据这个id值获取并显示下拉元素。\n */\nconst initAllIsDropAttrAction = (ele) => {\n    const eleDrops = ele || document.querySelectorAll('[is-drop]');\n    eleDrops.forEach(eleTrigger => {\n        let eleTargetId = eleTrigger.getAttribute('is-drop');\n        if (eleTargetId && !eleTrigger.dataset.target) {\n            eleTrigger.dataset.target = eleTargetId;\n        }\n        // 基于data-target获取元素\n        eleTargetId = eleTrigger.dataset.target;\n        let eleTarget = eleTargetId && document.getElementById(eleTargetId);\n        if (eleTarget && !eleTrigger['ui-drop']) {\n            eleTrigger['ui-drop'] = new Drop(eleTrigger, eleTarget);\n        }\n    });\n};\n\n\n/**\n * 初始化并监听页面包含is-drop属性的DOM节点变化\n */\nconst autoInitAndWatchingIsDropAttr = () => {\n    // 先实例化已有is-drop属性的DOM节点，再监听后续的节点变化\n    initAllIsDropAttrAction();\n\n    const observer = new MutationObserver(mutationsList => {\n        mutationsList.forEach(mutation => {\n            mutation.addedNodes && mutation.addedNodes.forEach(eleAdd => {\n                if (!eleAdd.tagName) {\n                    return;\n                }\n                if (eleAdd.hasAttribute('is-drop')) {\n                    initAllIsDropAttrAction([eleAdd]);\n                } else {\n                    initAllIsDropAttrAction(eleAdd.querySelectorAll('[is-drop]'));\n                }\n            });\n        });\n    });\n\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n};\n\nif (document.readyState != 'loading') {\n    autoInitAndWatchingIsDropAttr();\n} else {\n    window.addEventListener('DOMContentLoaded', autoInitAndWatchingIsDropAttr);\n}\n\n// export default Drop;\n\n/**\n * @Tips.js\n * @author zhangxinxu\n * @version\n * @Created: 15-06-25\n * @edit:    17-06-19\n * @edit:    20-06-09 edit by y2x\n * @edit:    20-11-03 by zxx\n */\n// import './Follow.js';\n\nclass Tips extends HTMLElement {\n    static get observedAttributes () {\n        return ['title', 'reverse', 'for', 'eventType', 'align'];\n    }\n\n    constructor (trigger, content, options) {\n        super();\n\n        // trigger可以是ID选择器\n        if (typeof trigger == 'string' && /^#?\\w+(?:[-_]\\w+)*$/.test(trigger)) {\n            trigger = document.getElementById(trigger.replace('#', ''));\n        }\n\n        if (trigger && trigger.tips) {\n            trigger.tips(content, options);\n\n            return trigger['ui-tips'];\n        }\n\n        this.target = null;\n    }\n\n    get title () {\n        let strTitle = this.getAttribute('title');\n\n        if (strTitle) {\n            this.setAttribute('data-title', strTitle);\n            // 移除浏览器默认的title，防止交互冲突\n            this.removeAttribute('title');\n        } else {\n            strTitle = this.getAttribute('data-title') || '';\n        }\n\n        return strTitle;\n    }\n\n    set title (value) {\n        this.setAttribute('data-title', value);\n        // 屏幕阅读无障碍访问支持\n        this.setAttribute('aria-label', value);\n    }\n\n    get reverse () {\n        return this.getAttribute('reverse') !== null || this.classList.contains('reverse');\n    }\n\n    set reverse (value) {\n        if (value) {\n            this.setAttribute('reverse', '');\n        } else {\n            this.removeAttribute('reverse');\n        }\n    }\n\n    get htmlFor () {\n        return this.getAttribute('for');\n    }\n    set htmlFor (v) {\n        this.setAttribute('for', v);\n    }\n\n    get align () {\n        return this.getAttribute('align') || 'auto';\n    }\n    set align (v) {\n        this.setAttribute('align', v);\n    }\n\n    get eventType () {\n        return this.getAttribute('eventtype') || 'hover';\n    }\n    set eventType (v) {\n        this.setAttribute('eventtype', v);\n    }\n\n    get trigger () {\n        const htmlFor = this.htmlFor;\n\n        let eleTrigger;\n        if (htmlFor) {\n            eleTrigger = document.getElementById(htmlFor);\n        }\n\n        return eleTrigger || this;\n    }\n\n    create () {\n        let eleTrigger = this.trigger;\n        let strContent = this.title;\n        // eleTips元素不存在，则重新创建\n        let eleTips = document.createElement('div');\n        eleTips.classList.add('ui-tips-x');\n        eleTips.innerHTML = strContent;\n\n        // 屏幕阅读无障碍访问描述\n        if (!eleTrigger.getAttribute('aria-label')) {\n            // 创建随机id, aria需要\n            const strRandomId = 'lulu_' + (Math.random() + '').replace('0.', '');\n            eleTrigger.setAttribute('aria-labelledby', strRandomId);\n        }\n\n        // append到页面中\n        document.body.appendChild(eleTips);\n        this.target = eleTips;\n\n        // DOM\n        this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n\n        if (eleTrigger != this) {\n            eleTrigger.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n        }\n    }\n\n    show () {\n        let eleTrigger = this.trigger;\n        let strContent = this.title;\n\n        if (this.target) {\n            // 改变显示内容\n            this.target.innerHTML = strContent;\n        } else {\n            this.create();\n        }\n        // 显示\n        this.target.style.display = 'block';\n\n        // 定位\n        let strPosition = '5-7';\n        // 定位只有5-7, 7-5, 6-8, 8-6这几种\n        // 其中5-7是默认，提示在上方\n        // 7-5是由'reverse'类名或参数决定的\n        let strAlign = this.align;\n        const isReverse = this.reverse;\n        if (strAlign === 'auto') {\n            strAlign = eleTrigger.dataset.align || eleTrigger.dataset.position || 'center';\n        }\n\n        // 关键字参数与位置\n        if (strAlign === 'center') {\n            strPosition = !isReverse ? '5-7' : '7-5';\n        } else if (strAlign === 'left') {\n            strPosition = !isReverse ? '1-4' : '4-1';\n        } else if (strAlign === 'right') {\n            strPosition = !isReverse ? '2-3' : '3-2';\n        } else if (/^\\d-\\d$/.test(strAlign)) {\n            strPosition = strAlign;\n        }\n\n        eleTrigger.follow(this.target, {\n            // trigger-target\n            position: strPosition,\n            // 边界溢出不自动修正\n            edgeAdjust: false\n        });\n\n        // 同时以CSS变量的形式设置 trigger 的宽度和高度\n        this.target.style.setProperty('--ui-width', eleTrigger.offsetWidth);\n        this.target.style.setProperty('--ui-height', eleTrigger.offsetHeight);\n\n        // 显示的回调\n        eleTrigger.dispatchEvent(new CustomEvent('show', {\n            detail: {\n                type: 'ui-tips'\n            }\n        }));\n    }\n\n    hide () {\n        if (!this.target) {\n            return;\n        }\n        this.target.style.display = 'none';\n        this.trigger.dispatchEvent(new CustomEvent('hide', {\n            detail: {\n                type: 'ui-tips'\n            }\n        }));\n    }\n\n    events () {\n        let eleTrigger = this.trigger;\n        // hover显示延迟时间\n        const numDelay = 100;\n        // 设置定时器对象\n        this.timerTips = null;\n        this.handleMouseEnter = () => {\n            this.timerTips = setTimeout(() => {\n                this.show();\n            }, numDelay);\n        };\n        this.handleMouseLeave = () => {\n            clearTimeout(this.timerTips);\n            // 隐藏提示\n            this.hide();\n        };\n        this.handleFocus = () => {\n            if (window.isKeyEvent) {\n                this.show();\n            }\n        };\n        this.handleMouseUp = (event) => {\n            const eleTarget = event.target;\n            if (!eleTrigger.contains(eleTarget) && !this.target.contains(eleTarget)) {\n                this.hide();\n            }\n        };\n\n        // 事件走起\n        if (this.eventType === 'hover') {\n            // 鼠标进入\n            eleTrigger.addEventListener('mouseenter', this.handleMouseEnter);\n            // 鼠标离开\n            eleTrigger.addEventListener('mouseleave', this.handleMouseLeave);\n\n            // 支持focus的显示与隐藏\n            // 但是需要是键盘访问触发的focus\n            eleTrigger.addEventListener('focus', this.handleFocus);\n            // 元素失焦\n            eleTrigger.addEventListener('blur', this.hide);\n        } else if (this.eventType === 'click') {\n            eleTrigger.addEventListener('click', this.show);\n            // 关闭\n            document.addEventListener('mouseup', this.handleMouseUp);\n        } else {\n            // 其他事件类型直接显示\n            this.show();\n        }\n    }\n\n    connectedCallback () {\n        let eleTrigger = this.trigger;\n        // format title\n        eleTrigger.originTitle = this.title;\n\n        if (this.isConnectedCallback) {\n            return;\n        }\n\n        // 更语义\n        // 非focusable元素使其focusable\n        if (!/^a|input|button|area$/i.test(eleTrigger.tagName)) {\n            eleTrigger.setAttribute('tabindex', '0');\n            // 更语义\n            eleTrigger.setAttribute('role', 'tooltip');\n        }\n\n        this.events();\n\n        // 全局事件\n        this.dispatchEvent(new CustomEvent('connected', {\n            detail: {\n                type: 'ui-tips'\n            }\n        }));\n\n        if (eleTrigger != this && eleTrigger.hasAttribute('is-tips')) {\n            eleTrigger.dispatchEvent(new CustomEvent('connected', {\n                detail: {\n                    type: 'ui-tips'\n                }\n            }));\n\n            // 设置定义完毕标志量\n            eleTrigger.setAttribute('defined', '');\n        }\n\n        this.isConnectedCallback = true;\n    }\n}\n\nif (!customElements.get('ui-tips')) {\n    customElements.define('ui-tips', Tips);\n}\n\nwindow.Tips = Tips;\n\n\n/**\n * 给任意 dom 注入 tips 方法\n * @param options {eventType, align}\n */\nHTMLElement.prototype.tips = function (content, options = {}) {\n    // 如果是CSS驱动的tips提示效果\n    if (this.getAttribute('is-tips') === 'css' || this.classList.contains('ui-tips')) {\n        if (this.title) {\n            this.setAttribute('data-title', this.title);\n            this.setAttribute('aria-label', this.title);\n            this.removeAttribute('title');\n        }\n        return;\n    }\n\n    if (typeof content != 'string') {\n        options = content || {};\n    }\n\n    const isReverse = this.hasAttribute('reverse') || this.classList.contains('reverse');\n\n    // 只调用一次\n    if (this['ui-tips']) {\n        this['ui-tips'].toggleAttribute('reverse', isReverse);\n        // 显示与否的判断\n        if (typeof options.eventType != 'undefined' && options.eventType != 'hover' && options.eventType != 'click') {\n            this['ui-tips'].show();\n        }\n        return;\n    }\n\n    let eleTips = document.createElement('ui-tips');\n\n    if (typeof content == 'string') {\n        eleTips.title = content;\n    } else {\n        eleTips.title = this.getAttribute('title') || options.content || '';\n    }\n\n    // 是否反向的处理\n    eleTips.toggleAttribute('reverse', isReverse);\n\n    // 移除原始的标题\n    this.removeAttribute('title');\n\n    // custom trigger\n    if (!this.id) {\n        this.id = 'lulu_' + (Math.random() + '').replace('0.', '');\n    }\n    eleTips.htmlFor = this.id;\n\n    if (options.eventType) {\n        eleTips.eventType = options.eventType;\n    }\n    if (options.align) {\n        eleTips.align = options.align;\n    }\n\n    this['ui-tips'] = eleTips;\n\n    eleTips.addEventListener('connected', function () {\n        this.remove();\n    });\n    document.body.appendChild(eleTips);\n};\n\n(function () {\n    // 处理所有非 <ui-tips /> 的情况: .ui-tips, [is-tips=\"css\"], [is-tips]\n    let funTipsInitAndWatching = function () {\n        const strSelector = '.ui-tips, [is-tips]';\n        document.querySelectorAll(strSelector).forEach((item) => {\n            if (item.tips) {\n                item.tips();\n            }\n        });\n\n        var observerTips = new MutationObserver(function (mutationsList) {\n            mutationsList.forEach(function (mutation) {\n                var nodeAdded = mutation.addedNodes;\n                var nodeRemoved = mutation.removedNodes;\n                if (nodeAdded.length) {\n                    nodeAdded.forEach(function (eleAdd) {\n                        if (!eleAdd.matches) {\n                            return;\n                        }\n                        if (eleAdd.matches(strSelector)) {\n                            eleAdd.tips();\n                        } else {\n                            eleAdd.querySelectorAll(strSelector).forEach(item => {\n                                item.tips();\n                            });\n                        }\n                    });\n                }\n\n                if (nodeRemoved.length) {\n                    nodeRemoved.forEach(function (eleRemove) {\n                        if (!eleRemove.matches) {\n                            return;\n                        }\n                        // 删除对应的<ui-tips>元素，如果有\n                        if (eleRemove['ui-tips'] && eleRemove['ui-tips'].target) {\n                            eleRemove['ui-tips'].target.remove();\n                        } else {\n                            eleRemove.querySelectorAll(strSelector).forEach(function (item) {\n                                if (item['ui-tips'] && item['ui-tips'].target) {\n                                    item['ui-tips'].target.remove();\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n        });\n\n        observerTips.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    };\n\n    if (document.readyState != 'loading') {\n        funTipsInitAndWatching();\n    } else {\n        window.addEventListener('DOMContentLoaded', funTipsInitAndWatching);\n    }\n})();\n\n// export default Tips;\n\n/**\n * @LightTip.js\n * @author popeyesailorman(yangfan)\n * @version\n * @Created: 20-05-15\n * @edit: 20-05-15\n */\n\nclass LightTip extends HTMLElement {\n    static get observedAttributes () {\n        return ['open'];\n    }\n\n    constructor () {\n        super();\n\n        if (arguments.length) {\n            LightTip.custom.apply(this, arguments);\n        }\n    }\n\n    get type () {\n        return this.getAttribute('type');\n    }\n\n    get time () {\n        let strTime = this.getAttribute('time');\n        if (!isNaN(strTime) && !isNaN(parseFloat(strTime))) {\n            return Number(strTime);\n        }\n\n        return 3000;\n    }\n\n    set type (value) {\n        this.setAttribute('type', value);\n    }\n\n    set time (value) {\n        this.setAttribute('time', value);\n    }\n\n    get open () {\n        return this.hasAttribute('open');\n    }\n\n    set open (value) {\n        this.toggleAttribute('open', value);\n    }\n\n    connectedCallback () {\n        // 自定义元素设置 tabIndex=0 代表改元素可聚焦，并可通过键盘导航来聚焦到该元素\n        this.setAttribute('tabIndex', 0);\n        this.setAttribute('role', 'tooltip');\n\n        if (!this.closeMode) {\n            this.closeMode = 'hide';\n        }\n\n        // 点击组件本身或按键盘 esc/enter 键即可关闭组件\n        this.addEventListener('click', () => {\n            // 移除元素\n            this[this.closeMode]();\n        });\n\n        // 全局事件\n        this.dispatchEvent(new CustomEvent('connected', {\n            detail: {\n                type: 'ui-lighttip'\n            }\n        }));\n\n        this.isConnectedCallback = true;\n    }\n\n    attributeChangedCallback (name, oldValue, newValue) {\n        // 让按钮或者之前的触发元素重新获取焦点，便于继续操作\n        if (name == 'open' && typeof oldValue !== typeof newValue) {\n            if (typeof newValue === 'string') {\n                clearTimeout(this.timer);\n                this.timer = setTimeout(() => {\n                    // 标志量，是否是因为时间到关闭\n                    this.isTimeHide = true;\n                    // 关闭提示\n                    this[this.closeMode]();\n                    this.position();\n                }, this.time);\n\n                this.setAttribute('data-tid', this.timer);\n                this.classList.add('ESC');\n\n                // 组件的 z-index 层级计算\n                this.zIndex();\n\n                // 组件的定位，不同的提示位置不重叠\n                this.position();\n            } else {\n                this.classList.remove('ESC');\n            }\n            this.tabIndex();\n\n            this.isTimeHide = null;\n        }\n    }\n\n    zIndex () {\n        // 只对<body>子元素进行层级最大化计算处理，这里lighttip默认的z-index值是19\n        var numZIndexNew = 19;\n        this.parentElement && [...this.parentElement.childNodes].forEach(function (eleChild) {\n            if (eleChild.nodeType != 1) {\n                return;\n            }\n            var objStyleChild = window.getComputedStyle(eleChild);\n            var numZIndexChild = objStyleChild.zIndex * 1;\n            if (numZIndexChild && objStyleChild.display != 'none') {\n                numZIndexNew = Math.max(numZIndexChild + 1, numZIndexNew);\n            }\n        });\n        this.style.zIndex = numZIndexNew;\n    }\n\n    // 定位处理\n    position () {\n        var elesOpen = [...document.querySelectorAll('ui-lighttip[open]:not([type=\"loading\"])')];\n        // 基于 data-tid 排序\n        var elesOpenSort = elesOpen.sort(function (eleA, eleB) {\n            return (eleA.getAttribute('data-tid') || 0) - (eleB.getAttribute('data-tid') || 0);\n        });\n        // 确定提示内容\n        var objMatchText = {};\n        var numIndex = -1;\n\n        elesOpenSort.forEach((ele) => {\n            let strText = ele.textContent;\n            if (typeof objMatchText[strText] == 'undefined') {\n                numIndex++;\n                objMatchText[strText] = numIndex;\n            }\n            ele.style.setProperty('--ui-sort-index', objMatchText[strText]);\n        });\n    }\n\n    // 新的元素层级总是最高\n    tabIndex () {\n        var eleContainer = this;\n        var eleLastActive = LightTip.lastActiveElement;\n        if (this.open == true) {\n            var eleActiveElement = document.activeElement;\n            \n            // 键盘索引起始位置定位在提示元素上\n            if (eleActiveElement && !eleActiveElement.closest('[keepfocus]')) {\n                if (eleContainer !== eleActiveElement) {\n                    LightTip.lastActiveElement = eleActiveElement;\n                }\n                \n                eleContainer.focus();\n            }\n        } else if (eleLastActive && !eleLastActive.matches('body')) {\n            // 获取焦点但不会定位\n            eleLastActive.focus({\n                preventScroll: true\n            });\n            // 如果不是键盘关闭提示，而是点击的话，之前的焦点元素失焦\n            // 这里实现有问题，如果是时间到了自动关闭的话，这里不应该失焦\n            if (!window.isKeyEvent && !this.isTimeHide) {\n                eleLastActive.blur();\n            }\n            LightTip.lastActiveElement = null;\n        }\n        return this;\n    }\n\n    // success\n    static success (text, time = 3000) {\n        return this.custom(text, 'success', time);\n    }\n    // error\n    static error (text, time = 3000) {\n        return this.custom(text, 'error', time);\n    }\n    // normal\n    static normal (text, time = 3000) {\n        return this.custom(text, 'normal', time);\n    }\n    // loading\n    static loading (text) {\n        text = text || '正在加载中...';\n        return this.custom(text, 'loading');\n    }\n    // 调用方法处理\n    static custom (text = '', type, time) {\n        // 如果是静态方法执行\n        // 创建ui-lighttip自定义元素\n        if (!this.matches || !this.matches('ui-lighttip')) {\n            return LightTip.custom.apply(document.createElement('ui-lighttip'), arguments);\n        }\n\n        if (typeof text == 'object') {\n            type = text;\n            text = '';\n        }\n\n        if (typeof text != 'string') {\n            return this;\n        }\n\n        this.closeMode = 'remove';\n\n        // 如果传入的类型是object形式\n        if (type && typeof type === 'object') {\n            LightTip.custom.call(this, text, type.type, type.time);\n            return;\n        }\n        // 如果type的类型是number，则赋值给time\n        if (typeof type === 'number') {\n            LightTip.custom.call(this, text, time, type);\n            return;\n        }\n\n        if (type == 'loading') {\n            if (!text) {\n                text = '正在加载中...';\n            }\n            time = 999999;\n        }\n\n        if (time) {\n            this.time = time;\n        }\n        if (type) {\n            this.type = type;\n        }\n\n        this.innerHTML = text;\n        // 提高无障碍\n        if (type == 'success') {\n            this.setAttribute('aria-lable', '操作成功');\n        } else if (type == 'error') {\n            this.setAttribute('aria-lable', '操作失败');\n        }\n\n        // append内存中创建的ui-lighttip元素\n        if (!this.parentElement) {\n            document.body.appendChild(this);\n\n            this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n        }\n\n        this.show();\n\n        return this;\n    }\n    remove () {\n        if (this.parentElement) {\n            this.parentElement.removeChild(this);\n        }\n        this.open = false;\n    }\n    show () {\n        if (this.time > 0) {\n            this.open = true;\n        }\n    }\n    hide () {\n        this.open = false;\n    }\n}\n\nif (!customElements.get('ui-lighttip')) {\n    customElements.define('ui-lighttip', LightTip);\n}\n\n// 将该方法定义为 window 全局使用的方法\nwindow.LightTip = LightTip;\n\n// export default LightTip;\n\n\n/**\n * @ErrorTip.js\n * @author zhangxinxu\n * @version\n * @created: 15-07-01\n * @edited:  20-07-07 edit by peter.qiyuanhao\n */\n\n// import './Follow.js';\n\nclass ErrorTip {\n    static allHide (exclude) {\n        ErrorTip.collectionErrorTip.forEach(obj => {\n            if (exclude != obj) {\n                obj.hide();\n            }\n        });\n    }\n\n    constructor (element, content, options) {\n        const defaults = {\n            unique: true,\n            scroller: null,\n            onShow: () => {},\n            onHide: () => {}\n        };\n\n        // 参数\n        const objParams = {\n            ...defaults,\n            ...options\n        };\n\n        // 显示字符内容的处理\n        let strContent = content;\n\n        // 支持Function类型\n        if (typeof strContent == 'function') {\n            strContent = strContent();\n        }\n        if (typeof strContent != 'string') {\n            return this;\n        }\n\n        this.callback = {\n            show: objParams.onShow,\n            hide: objParams.onHide\n        };\n\n        this.params = {\n            unique: objParams.unique,\n            scroller: objParams.scroller\n        };\n\n        // 一些元素\n        const eleTrigger = element;\n\n        let objErrorTip = eleTrigger.data && eleTrigger.data.errorTip;\n        // 如果当前元素之前有过出错提示实例，则重复使用，无需再构造\n        if (objErrorTip) {\n            objErrorTip.content = strContent;\n            objErrorTip.callback = {\n                show: objParams.onShow,\n                hide: objParams.onHide\n            };\n            objErrorTip.element.tips.trigger = eleTrigger;\n            objErrorTip.show();\n\n            return this;\n        }\n\n        // eleTips指的是红色出错提示元素\n        let eleTips;\n        // 为了单出错提示模式下，所有的红色都能取消的处理\n        // 所有提示过的实例对象合在一起隐藏\n        let collectionErrorTip = ErrorTip.collectionErrorTip;\n        // 全局的出错实例\n        const objUniqueErrorTip = collectionErrorTip[collectionErrorTip.length - 1];\n\n        // 如果是唯一模式，则看看全局出错的对象\n        if (objParams.unique == true && objUniqueErrorTip) {\n            // window.errorTip存储的是唯一的红色提示元素\n            // 改变存储的触发元素\n            eleTips = objUniqueErrorTip.element.tips;\n        } else if (objParams.unique == false && eleTrigger.data && eleTrigger.data.errorTip) {\n            eleTips = eleTrigger.data.errorTip.element.tips;\n        } else {\n            eleTips = this.create(eleTrigger);\n        }\n\n        // 如果是唯一模式，全局存储\n        if (objParams.unique == true && collectionErrorTip.includes(this) == false) {\n            collectionErrorTip.push(this);\n        }\n\n        // 更新提示元素对应的触发元素\n        eleTips.trigger = eleTrigger;\n\n        // 滚动重定位，需要是非页面滚动容器\n        let scroller = this.params.scroller;\n        if (!scroller && eleTrigger) {\n            const selector = eleTrigger.dataset.scroller;\n            if (selector) {\n                scroller = eleTrigger.closest(selector) || eleTrigger.closest('#' + selector);\n            }\n        }\n\n        if (scroller && scroller != document.scrollingElement && !eleTrigger.errorTipScroller) {\n            scroller.addEventListener('scroll', () => {\n                if (this.display) {\n                    this.position();\n                }\n            });\n            eleTrigger.errorTipScroller = scroller;\n        }\n\n        this.element = {\n            trigger: eleTrigger,\n            tips: eleTips\n        };\n\n        // 暴露在外\n        this.content = strContent;\n\n        // 在DOM对象上暴露对应的实例对象\n        if (!eleTrigger.data) {\n            eleTrigger.data = {};\n        }\n        eleTrigger.data.errorTip = this;\n\n        // 显示\n        this.show();\n    }\n\n    /**\n     * 红色出错提示元素的创建\n     */\n    create () {\n        // 首次\n        const eleTips = document.createElement('div');\n        eleTips.className = 'ui-tips-x ui-tips-error';\n        document.body.appendChild(eleTips);\n\n        // 事件\n        this.events(eleTips);\n\n        return eleTips;\n    }\n\n    /**\n     * 无论是键盘操作，还是按下，都隐藏出错提示\n     * @param {Element} eleTips 表示创建的红色提示元素\n     */\n    events (eleTips) {\n        // 任何键盘操作，点击，或者拉伸都会隐藏错误提示框\n        document.addEventListener('keydown', (event) => {\n            // ctrl/shift键不隐藏\n            if (!/Control|Shift/i.test(event.code)) {\n                ErrorTip.allHide(this);\n                this.hide();\n            }\n        });\n\n        document.addEventListener('mousedown', (event) => {\n            const eleActiveElement = document.activeElement;\n\n            const eleActiveTrigger = eleTips.trigger;\n            const eleTarget = event.target;\n\n            // 如果点击的就是触发的元素，且处于激活态，则忽略\n            if (eleActiveElement && eleActiveTrigger && eleActiveElement == eleTarget &&\n                eleActiveElement == eleActiveTrigger &&\n                // 这个与Datalist.js关联\n                !eleActiveTrigger.getAttribute('data-focus')\n            ) {\n                return;\n            }\n\n            ErrorTip.allHide(this);\n            this.hide();\n        });\n\n        window.addEventListener('resize', () => {\n            ErrorTip.allHide(this);\n            this.hide();\n        });\n    }\n\n    /**\n     * 定位方法\n     */\n\n    position () {\n        const objElement = this.element;\n        // 触发元素和提示元素\n        const eleTips = objElement.tips;\n        const eleTrigger = objElement.trigger;\n\n        // 定位\n        eleTrigger.follow(eleTips, {\n            // trigger-target\n            position: '5-7',\n            // 边界溢出不自动修正\n            edgeAdjust: false\n        });\n    }\n\n    /**\n     * 错误tips提示显示方法\n     */\n    show () {\n        const objElement = this.element;\n        // 触发元素和提示元素\n        const eleTips = objElement.tips;\n        const eleTrigger = objElement.trigger;\n\n        // 修改content内容\n        eleTips.innerHTML = this.content;\n\n        // 提示元素显示\n        eleTips.style.display = '';\n\n        this.position();\n\n        // aria无障碍访问增强\n        eleTrigger.setAttribute('aria-label', '错误提示：' + this.content);\n        // 两个重要标志类名\n        eleTrigger.toggleAttribute('is-error', true);\n        eleTrigger.classList.add('valided');\n\n        this.display = true;\n\n        // 显示的回调\n        if (this.callback && this.callback.show) {\n            this.callback.show.call(this, eleTrigger, eleTips);\n        }\n\n        // 触发自定义的 show 事件\n        eleTrigger.dispatchEvent(new CustomEvent('show', {\n            detail: {\n                type: 'ui-errortip',\n                content: this.content\n            }\n        }));\n    }\n\n    /**\n       * 错误tips提示隐藏方法\n       * @return {Object}  返回当前实例对象\n       */\n    hide () {\n        // 避免重复隐藏执行\n        if (!this.display) {\n            return;\n        }\n\n        const eleTips = this.element.tips;\n        const eleTrigger = this.element.trigger;\n\n        eleTrigger.removeAttribute('aria-label');\n        eleTrigger.removeAttribute('is-error');\n\n        eleTips.style.display = 'none';\n\n        this.display = false;\n\n        // 隐藏的回调\n        if (this.callback && this.callback.hide) {\n            this.callback.hide.call(this, eleTrigger, eleTips);\n        }\n\n        // 触发自定义的 hide 事件\n        eleTrigger.dispatchEvent(new CustomEvent('hide', {\n            detail: {\n                type: 'ui-errortip'\n            }\n        }));\n    }\n}\n\nErrorTip.collectionErrorTip = [];\n\nwindow.ErrorTip = ErrorTip;\n\n\n/**\n * 给任意 dom 注入 errorTip 方法\n * @param content String\n * @param options {Object}\n */\nHTMLElement.prototype.errorTip = function (content, options = {}) {\n    new ErrorTip(this, content, options);\n\n    return this;\n};\n\n// export default ErrorTip;\n\n/**\n * @Loading.js\n * @author zhangxinxu\n * @version\n * @Created: 15-06-23\n * @Log: 2017-09-19 loading类名的添加基于标签，而非类名\n * @edit by littleLionGuoQing:  20-05-07  ES6、<ui-loading> web components组件 && 支持rows和size属性的设置和获取\n */\n\n// import LightTip from './LightTip.js';\n\n(() => {\n    // 避免重复定义\n    if ('loading' in HTMLElement.prototype) {\n        return;\n    }\n\n    /**\n     * 给HTML元素扩展一个loading属性\n     */\n    let LOADING = 'loading';\n    let CL = 'ui-' + LOADING;\n    Object.defineProperty(HTMLElement.prototype, 'loading', {\n        configurable: true,\n        enumerable: true,\n        get () {\n            return !!(this.classList.contains(CL) || this.matches(CL));\n        },\n        set (flag) {\n            let action = 'remove';\n            if (flag) {\n                action = 'add';\n                if (this.loading) {\n                    return flag;\n                }\n            }\n            let strClassButton = CL.replace(LOADING, 'button');\n            if (this.classList.contains(strClassButton) || this.getAttribute('is') == strClassButton) {\n                this.classList[action](LOADING);\n            } else {\n                this.classList[action](CL);\n            }\n        }\n    });\n\n    // loading 的分段展示\n    let eleLightLoading = null;\n    let timerLoading = null;\n    Object.defineProperty(document, 'loading', {\n        get () {\n            return Boolean(eleLightLoading && document.querySelector('ui-lighttip[type=loading]'));\n        },\n        set (newValue) {\n            if (newValue) {\n                if (eleLightLoading) {\n                    document.body.append(eleLightLoading);\n                    // 这里需要设置open属性\n                    eleLightLoading.open = true;\n                } else {\n                    eleLightLoading = new LightTip({\n                        type: 'loading'\n                    });\n                }\n                // loading 文字显示\n                let numIndex = 0;\n                let arrTips = ['正在加载中<ui-dot>...</ui-dot>', '仍在加载中<ui-dot>...</ui-dot>', '请再稍等片刻<ui-dot>...</ui-dot>'];\n                if (typeof newValue == 'string') {\n                    arrTips = [newValue];\n                } else if (Array.isArray(newValue)) {\n                    arrTips = newValue;\n                }\n                eleLightLoading.innerHTML = arrTips[numIndex];\n                clearInterval(timerLoading);\n                timerLoading = setInterval(() => {\n                    numIndex++;\n                    eleLightLoading.innerHTML = arrTips[numIndex] || arrTips[numIndex - 1];\n                    if (numIndex >= arrTips.length - 1) {\n                        clearInterval(timerLoading);\n                    }\n                }, 6000);\n            } else {\n                eleLightLoading && eleLightLoading.remove();\n                clearInterval(timerLoading);\n            }\n        }\n    });\n\n})();\n\n// <ui-loading> 自定义组件实现\nclass Loading extends HTMLElement {\n    constructor () {\n        super();\n    }\n    get size () {\n        return this.getAttribute('size') || 2;\n    }\n    set size (value) {\n        this.setAttribute('size', value);\n    }\n    get rows () {\n        return this.getAttribute('rows');\n    }\n    set rows (value) {\n        this.setAttribute('rows', value);\n    }\n}\n\nif (!customElements.get('ui-loading')) {\n    customElements.define('ui-loading', Loading);\n}\n\n/**\n * @Range.js\n * @author xboxyan\n * @version\n * @created: 20-04-30\n */\n\nclass XRange extends HTMLInputElement {\n\n    static get observedAttributes () {\n        return ['max', 'min', 'step', 'disabled'];\n    }\n\n    get defaultrange () {\n        return this.getAttribute('range') || `${this.getAttribute('from') || this.min || 0},${this.getAttribute('to') || this.max || 100}`;\n    }\n\n    set multiple (value) {\n        return this.toggleAttribute('multiple', value);\n    }\n\n    get multiple () {\n        return this.getAttribute('multiple') !== null;\n    }\n\n    get from () {\n        if (this.element && this.element.otherRange) {\n            return Math.min(this.value, this.element.otherRange.value);\n        }\n        return '';\n    }\n\n    get to () {\n        if (this.element && this.element.otherRange) {\n            return Math.max(this.value, this.element.otherRange.value);\n        }\n        return '';\n    }\n\n    get range () {\n        if (this.multiple) {\n            return this.from + ',' + this.to;\n        }\n        return '';\n    }\n\n    get isFrom () {\n        // 是否为起始range\n        if (this.element && this.element.otherRange) {\n            return this.value - this.element.otherRange.value < 0;\n        }\n        return false;\n    }\n\n    set from (v) {\n        if (this.element && this.element.otherRange) {\n            if (this.isFrom) {\n                this.value = v;\n            } else {\n                this.element.otherRange.value = v;\n            }\n        }\n    }\n\n    set to (v) {\n        if (this.element && this.element.otherRange) {\n            if (!this.isFrom) {\n                this.value = v;\n            } else {\n                this.element.otherRange.value = v;\n            }\n        }\n    }\n\n    set range (v) {\n        if (this.multiple) {\n            const [from, to] = v.split(',');\n            this.to = to;\n            this.from = from;\n        }\n    }\n\n    connectedCallback () {\n        this.tips = this.dataset.tips;\n        // 一些事件\n        this.addEventListener('input', this.render);\n        this.addEventListener('change', this.change);\n        this.addEventListener('touchstart', this.stopPropagation);\n\n        // 如果所在表单触发的重置，则UI也跟着重置\n        if (this.form) {\n            this.form.addEventListener('reset', () => {\n                setTimeout(() => {\n                    this.render();\n                }, 1);\n            });\n        }\n\n        this.element = this.element || {};\n        // 区间选择\n        if (this.multiple && !this.element.otherRange) {\n            if (getComputedStyle(this.parentNode).position === 'static') {\n                // 给父级添加一个定位，不然相对宽度会有问题\n                this.parentNode.style.position = 'relative';\n            }\n            Object.assign(this.element, {\n                otherRange: this.cloneNode(false),\n            });\n            this.element.otherRange.tips = this.tips;\n            this.element.otherRange.element = {\n                otherRange: this\n            };\n            this.before(this.element.otherRange);\n            this.setAttribute('data-range', 'to');\n            this.element.otherRange.setAttribute('data-range', 'from');\n            this.range = this.defaultrange;\n        }\n\n        // CSS使用的是[is=\"ui-range\"]控制的选择框样式，因此，该属性是必须的\n        if (this.getAttribute('is') === null) {\n            this.setAttribute('is', 'ui-range');\n        }\n\n        // 全局事件\n        this.dispatchEvent(new CustomEvent('connected', {\n            detail: {\n                type: 'ui-range'\n            }\n        }));\n\n        this.isConnectedCallback = true;\n\n        this.render();\n\n        this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n    }\n\n    disconnectedCallback () {\n        this.removeEventListener('input', this.render);\n        this.removeEventListener('change', this.change);\n        this.removeEventListener('touchstart', this.stopPropagation);\n\n        if (this.element && this.element.otherRange && !this.exchange) {\n            this.element.otherRange.remove();\n        }\n    }\n\n    stopPropagation (ev) {\n        ev.stopPropagation();\n    }\n\n    attributeChangedCallback (name, oldValue, newValue) {\n        if (oldValue !== newValue) {\n            if (name === 'disabled' && this.element && this.element.otherRange) {\n                this.element.otherRange.disabled = newValue !== null;\n            } else {\n                this.render();\n            }\n        }\n    }\n\n    change () {\n        // 另外一个range元素\n        const eleOtherRange = this.element && this.element.otherRange;\n        if (!eleOtherRange) {\n            return;\n        }\n        // 保持html结构和视觉上一致，也就是初始值在前面，结束值在后面，如果不一致就调换位置，目的是为tab键切换正常\n        const isLeft = !this.isFrom && this.nextElementSibling === eleOtherRange;\n        const isRight = this.isFrom && this.nextElementSibling !== eleOtherRange;\n        const isTop = !this.isFrom && this.nextElementSibling !== eleOtherRange;\n        const isBottom = this.isFrom && this.nextElementSibling === eleOtherRange;\n        if (isTop || isRight || isBottom || isLeft) {\n            this.exchange = true;\n            if (isTop || isRight) {\n                eleOtherRange.before(this);\n                this.setAttribute('data-range', 'from');\n                eleOtherRange.setAttribute('data-range', 'to');\n            } else {\n                eleOtherRange.after(this);\n                this.setAttribute('data-range', 'to');\n                eleOtherRange.setAttribute('data-range', 'from');\n            }\n            this.exchange = false;\n            this.focus();\n        }\n    }\n\n    render () {\n        const max = this.max || 100;\n        const min = this.min || 0;\n\n        this.style.setProperty('--percent', (this.value - min) / (max - min));\n\n        if (typeof this.tips == 'string') {\n            if (/^\\d+$/.test(this.tips)) {\n                this.dataset.tips = this.value;\n            } else if (/^\\${value}/.test(this.tips)) {\n                this.dataset.tips = this.tips.replace(/\\${value}/g, this.value);\n            } else {\n                this.dataset.tips = this.tips.replace(/\\d+/, this.value);\n            }\n        }\n        this.style.setProperty('--from', this.from);\n        this.style.setProperty('--to', this.to);\n\n        // 另外一个range元素\n        const eleOtherRange = this.element && this.element.otherRange;\n\n        if (eleOtherRange) {\n            eleOtherRange.style.setProperty('--from', this.from);\n            eleOtherRange.style.setProperty('--to', this.to);\n        }\n    }\n\n    addEventListener (...par) {\n        document.addEventListener.apply(this, par);\n\n        // 另外一个range元素\n        const eleOtherRange = this.element && this.element.otherRange;\n        if (eleOtherRange) {\n            document.addEventListener.apply(eleOtherRange, par);\n        }\n    }\n}\n\n\nconst props = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');\nObject.defineProperty(XRange.prototype, 'value', {\n    ...props,\n    set (v) {\n        props.set.call(this, v);\n        // 重新渲染\n        this.render();\n    }\n});\n\nif (!customElements.get('ui-range')) {\n    customElements.define('ui-range', XRange, {\n        extends: 'input'\n    });\n}\n\n/**\n * @Color.js\n * @author zhangxinxu\n * @version\n * @created 16-06-03\n * @edited 20-07-16 @Gwokhov\n */\n\n// import './Follow.js';\n\nconst BG_COLOR = 'background-color';\n\nclass Color extends HTMLInputElement {\n    // 指定观察的属性，这样attributeChangedCallback才会起作用\n    static get observedAttributes () {\n        return ['disabled'];\n    }\n\n    constructor () {\n        super();\n        this.setProperty();\n    }\n\n    static addClass (...arg) {\n        return ['ui', 'color', ...arg].join('-');\n    }\n\n    // hsl颜色转换成十六进制颜色\n    static funHslToHex (h, s, l, a) {\n        let r, g, b;\n\n        if (s == 0) {\n        // 非彩色的\n            r = g = b = l;\n        } else {\n            const hue2rgb = function (p, q, t) {\n                if (t < 0) t += 1;\n                if (t > 1) t -= 1;\n                if (t < 1 / 6) return p + (q - p) * 6 * t;\n                if (t < 1 / 2) return q;\n                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n\n                return p;\n            };\n\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1 / 3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1 / 3);\n        }\n\n        const arrRgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n\n        // Alpha值\n        if (a) {\n            arrRgb.push(Math.round(a * 255));\n        }\n\n        return arrRgb.map(rgb => {\n            rgb = rgb.toString(16);\n\n            if (rgb.length == 1) {\n                return '0' + rgb;\n            }\n\n            return rgb;\n        }).join('');\n    }\n\n    // 16进制颜色转换成hsl颜色表示\n    static funHexToHsl (hex) {\n        hex = (hex || '').replace('#', '');\n\n        if (hex.length == 3 || hex.length == 4) {\n            hex = hex.split('').map(function (char) {\n                return char + char;\n            }).join('');\n        }\n\n        const r = parseInt(hex.slice(0, 2), 16) / 255;\n        const g = parseInt(hex.slice(2, 4), 16) / 255;\n        const b = parseInt(hex.slice(4, 6), 16) / 255;\n\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h, s;\n        const l = (max + min) / 2;\n\n        if (max == min) {\n        // 非彩色\n            h = s = 0;\n        } else {\n            const d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n        }\n        if (hex.length == 8) {\n            const a = parseInt(hex.slice(6, 8), 16) / 255;\n            return [h, s, l, a];\n        }\n        return [h, s, l];\n    }\n\n    // rgb/rgba颜色转hex\n    static funRgbToHex (rgb) {\n        if (!rgb) {\n            return Color.defaultValue;\n        }\n        let arr = [];\n        let arrA = [];\n\n        // 如果是不全的hex值，不全\n        // 有没有#都支持\n        rgb = rgb.replace('#', '').toLowerCase();\n        if (/^[0-9A-F]{1,6}$/i.test(rgb)) {\n            return '#' + rgb.repeat(Math.ceil(6 / rgb.length)).slice(0, 6);\n        }\n        if (/^[0-9A-F]{1,8}$/i.test(rgb)) {\n            return '#' + rgb.repeat(Math.ceil(8 / rgb.length)).slice(0, 8);\n        }\n\n        // 如果是rgb(a)色值\n        arr = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)/i);\n        arrA = rgb.match(/^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+),\\s*([0|1]?\\.?\\d+)/i);\n        const hex = (x) => ('0' + parseInt(x, 10).toString(16)).slice(-2);\n\n        if (arr && arr.length == 4) {\n            return `#${hex(arr[1])}${hex(arr[2])}${hex(arr[3])}`;\n        }\n\n        if (arrA && arrA.length == 5) {\n            return `#${hex(arrA[1])}${hex(arrA[2])}${hex(arrA[3])}${Math.round(arrA[4] * 255).toString(16).padStart(2, '0')}`;\n        }\n\n        return Color.defaultValue;\n    }\n\n    get type () {\n        return this.getAttribute('type') || 'color';\n    }\n\n    set type (v) {\n        return this.setAttribute('type', v || 'color');\n    }\n\n    /**\n     * container内的一些事件\n     * @return {Object} 返回当前DOM元素对象\n     */\n    events () {\n        const objElement = this.element;\n        // 元素\n        const eleContainer = objElement.target;\n        // 元素\n        const eleCircle = objElement.circle;\n        const eleFill = objElement.fill;\n        const eleArrow = objElement.arrow;\n        // 面板内部唯一的输入框元素\n        const eleField = objElement.field;\n        // 透明度滑动条\n        const eleOpacity = objElement.opacity;\n\n        eleContainer.addEventListener('click', (event) => {\n            const eleTarget = event.target;\n\n            // 选择的颜色值\n            let strValue = '';\n            // 当前类名\n            const strCl = eleTarget.className;\n            // 按钮分类别处理\n            if (/cancel/.test(strCl)) {\n                // 1. 取消按钮\n                this.hide();\n            } else if (/lump/.test(strCl)) {\n                // 3. 小色块\n                strValue = eleTarget.getAttribute('data-color');\n                this.value = '#' + strValue;\n            } else if (/switch/.test(strCl)) {\n                // 4. 面板类名切换按钮\n                if (eleTarget.textContent === '更多') {\n                    objElement.more.style.display = 'block';\n                    objElement.basic.style.display = 'none';\n                    eleTarget.textContent = '基本';\n                    objElement.mode.setAttribute('data-mode', 'basic');\n                } else {\n                    objElement.more.style.display = 'none';\n                    objElement.basic.style.display = 'block';\n                    eleTarget.textContent = '更多';\n                    objElement.mode.setAttribute('data-mode', 'more');\n                }\n                // 面板的色块啊，圆和尖角位置匹配\n                this.match();\n            }\n        });\n\n        // 输入框事件\n        eleField.addEventListener('input', () => {\n            const value = this.value;\n            if (/^[0-9A-F]{6}$/i.test(value) || /^[0-9A-F]{8}$/i.test(value)) {\n                this.match();\n            } else if (/^[0-9A-F]{3, 4}$/i.test(value)) {\n                this.match(Color.funRgbToHex('#' + value).replace('#', ''));\n            }\n        });\n\n        eleField.addEventListener('keyup', (event) => {\n            if (event.keyCode == 13) {\n                let strValue = eleField.value;\n                if (strValue) {\n                    if (eleOpacity) {\n                        strValue = Color.funRgbToHex('#' + strValue).replace('#', '');\n                    } else {\n                        strValue = Color.funRgbToHex('#' + strValue.slice(0, 6)).replace('#', '');\n                    }\n                    this.value = '#' + strValue;\n                }\n                this.hide();\n            }\n        });\n\n        // 透明度改变的时候\n        if (eleOpacity) {\n            eleOpacity.addEventListener('input', () => {\n                let strValue = eleField.value;\n                let curOpacity =  Math.round(eleOpacity.value / 100 * 255).toString(16).padStart(2, '0');\n\n                if (strValue) {\n                    let strValueColor = strValue.slice(0, 6) + curOpacity;\n                    this.value = strValueColor;\n                }\n            });\n        }\n\n\n        // 滑块拖动事件\n        const objPosArrow = {};\n        const objPosCircle = {};\n        // 三角上下\n        eleArrow.addEventListener('pointerdown', (event) => {\n            event.preventDefault();\n\n            objPosArrow.pageY = event.pageY;\n            objPosArrow.top = parseFloat(window.getComputedStyle(eleArrow).top);\n        });\n        eleFill.addEventListener('pointerdown', (event) => {\n            event.preventDefault();\n\n            // 5. 渐变色的覆盖层\n            // offsetLeft, offsetTop\n            let eleTarget = event.target;\n            const objRect = eleTarget.getBoundingClientRect();\n            const numOffsetTop = event.pageY - window.pageYOffset - objRect.top;\n\n            eleArrow.style.top = numOffsetTop + 'px';\n\n            // 赋值\n            this.isTrustedEvent = true;\n            this.value = this.getValueByStyle();\n\n            objPosArrow.pageY = event.pageY;\n            objPosArrow.top = parseFloat(window.getComputedStyle(eleArrow).top);\n        });\n\n        // 范围上下左右\n        eleCircle.parentElement.querySelectorAll('a').forEach((eleRegion) => {\n            eleRegion.addEventListener('pointerdown', (event) => {\n                event.preventDefault();\n\n                objPosCircle.pageY = event.pageY;\n                objPosCircle.pageX = event.pageX;\n                // 当前位移位置\n                eleCircle.style.left = event.offsetX + 'px';\n                eleCircle.style.top = event.offsetY + 'px';\n                objPosCircle.top = parseFloat(event.offsetY);\n                objPosCircle.left = parseFloat(event.offsetX);\n\n                // UI变化\n                this.isTrustedEvent = true;\n                this.value = this.getValueByStyle();\n            });\n        });\n\n        document.addEventListener('pointermove', (event) => {\n            if (typeof objPosArrow.top == 'number') {\n                event.preventDefault();\n\n                let numTop = objPosArrow.top + (event.pageY - objPosArrow.pageY);\n                const numMaxTop = eleArrow.parentElement.clientHeight;\n\n                // 边界判断\n                if (numTop < 0) {\n                    numTop = 0;\n                } else if (numTop > numMaxTop) {\n                    numTop = numMaxTop;\n                }\n                eleArrow.style.top = numTop + 'px';\n                // 赋值，此次赋值，无需重定位\n                this.isTrustedEvent = true;\n                this.value = this.getValueByStyle();\n            } else if (typeof objPosCircle.top == 'number') {\n                event.preventDefault();\n\n                const objPos = {\n                    top: event.pageY - objPosCircle.pageY + objPosCircle.top,\n                    left: event.pageX - objPosCircle.pageX + objPosCircle.left\n                };\n\n                const objMaxPos = {\n                    top: eleCircle.parentElement.clientHeight,\n                    left: eleCircle.parentElement.clientWidth\n                };\n\n                // 边界判断\n                if (objPos.left < 0) {\n                    objPos.left = 0;\n                } else if (objPos.left > objMaxPos.left) {\n                    objPos.left = objMaxPos.left;\n                }\n                if (objPos.top < 0) {\n                    objPos.top = 0;\n                } else if (objPos.top > objMaxPos.top) {\n                    objPos.top = objMaxPos.top;\n                }\n\n                // 根据目标位置位置和变色\n                const numColorH = objPos.left / objMaxPos.left;\n                const strColorS = 1 - objPos.top / objMaxPos.top;\n\n                // 圈圈定位\n                eleCircle.style.left = objPos.left + 'px';\n                eleCircle.style.top = objPos.top + 'px';\n\n                const strHsl = `hsl('${[360 * numColorH, 100 * strColorS + '%', '50%'].join()})`;\n\n                eleCircle.style[BG_COLOR] = strHsl;\n\n                // 赋值\n                this.isTrustedEvent = true;\n                this.value = this.getValueByStyle();\n            }\n        }, {\n            passive: false\n        });\n        document.addEventListener('pointerup', () => {\n            objPosArrow.top = null;\n            objPosCircle.top = null;\n        });\n\n        // 滑块的键盘支持\n        eleFill.parentElement.querySelectorAll('a').forEach((eleButton) => {\n            eleButton.addEventListener('keydown', (event) => {\n                // 上下控制\n                if (event.keyCode == 38 || event.keyCode == 40) {\n                    event.preventDefault();\n\n                    let numTop = parseFloat(window.getComputedStyle(eleArrow).top);\n                    const numMaxTop = eleFill.clientHeight;\n\n                    if (event.keyCode == 38) {\n                        numTop--;\n                        if (numTop < 0) {\n                            numTop = 0;\n                        }\n                    } else {\n                        numTop++;\n                        if (numTop > numMaxTop) {\n                            numTop = numMaxTop;\n                        }\n                    }\n\n                    const ariaLabel = eleArrow.getAttribute('aria-label');\n\n                    eleArrow.style.top = numTop + 'px';\n                    eleArrow.setAttribute('aria-label', ariaLabel.replace(/\\d+/, Math.round(100 * numTop / numMaxTop)));\n\n                    // 赋值，此次赋值，无需重定位\n                    this.isTrustedEvent = true;\n                    this.value = this.getValueByStyle();\n                }\n            });\n        });\n\n        // 圈圈的键盘访问\n        // 区域背景的键盘支持\n        eleCircle.parentElement.querySelectorAll('a').forEach((eleRegion) => {\n            eleRegion.addEventListener('keydown', (event) => {\n                // 上下左右控制\n                if (event.keyCode >= 37 && event.keyCode <= 40) {\n                    event.preventDefault();\n\n                    const objStyleCircle = window.getComputedStyle(eleCircle);\n\n                    let numTop = parseFloat(objStyleCircle.top);\n                    let numLeft = parseFloat(objStyleCircle.left);\n\n                    const numMaxTop = eleRegion.clientHeight;\n                    const numMaxLeft = eleRegion.clientWidth;\n\n                    if (event.keyCode == 38) {\n                        // up\n                        numTop--;\n                        if (numTop < 0) {\n                            numTop = 0;\n                        }\n                    } else if (event.keyCode == 40) {\n                        // down\n                        numTop++;\n                        if (numTop > numMaxTop) {\n                            numTop = numMaxTop;\n                        }\n                    } else if (event.keyCode == 37) {\n                        // left\n                        numLeft--;\n                        if (numLeft < 0) {\n                            numLeft = 0;\n                        }\n                    } else if (event.keyCode == 39) {\n                        // down\n                        numLeft++;\n                        if (numLeft > numMaxLeft) {\n                            numLeft = numMaxLeft;\n                        }\n                    }\n\n                    eleCircle.style.left = numLeft + 'px';\n                    eleCircle.style.top = numTop + 'px';\n\n                    // 赋值\n                    this.isTrustedEvent = true;\n                    this.value = this.getValueByStyle();\n                }\n            });\n        });\n\n        return this;\n    }\n\n    /**\n     * container内HTML的创建\n     * @return {Object} 返回当前DOM元素对象\n     */\n    create () {\n        // 元素\n        const eleContainer = this.element.target;\n        const isSupportOpacity = this.type === 'color-opacity';\n\n        // switch button\n        const strHtmlConvert = `<button class=\"${Color.addClass('switch')} colorMode\" data-mode=\"more\" role=\"button\">更多</button>`;\n        // current color\n\n        const strHtmlCurrent =\n        `<div class=\"${Color.addClass('current')}\">\n            <i class=\"${isSupportOpacity ? Color.addClass('current', 'square', 'opacity')  : Color.addClass('current', 'square')} colorCurrent\"></i>\n            #<input class=\"${Color.addClass('current', 'input')}\" value=\"${this.value.replace('#', '')}\">\n        </div>`;\n\n        // const arrBasicColor = this.params.color.basic;\n        const arrBasicColorPreset = this.params.color.basicPreset;\n        const arrFixedColor = this.params.color.fixed;\n\n        // body\n        const strHtmlBody = `<div class=\"${Color.addClass('body')}\">` +\n            (function () {\n                // basic color picker\n                let strHtml = `<div class=\"${Color.addClass('basic')} colorBasicX\" role=\"listbox\">`;\n                let arrCommonColors = (localStorage.commonColors || '').split(',');\n                // color left\n                strHtml += `<aside class=\"${Color.addClass('basic', 'l')}\">` + (function () {\n                    return arrFixedColor.concat(arrCommonColors[0] || '0ff', arrCommonColors[1] || '800180').map(function (color) {\n                        const strColor = Color.funRgbToHex(color).replace('#', '');\n\n                        return `<a href=\"javascript:\" class=\"${Color.addClass('lump')}\" data-color=\"${strColor}\" aria-label=\"${strColor}\" style=\"${BG_COLOR}:#${strColor}\" role=\"option\"></a>`;\n                    }).join('');\n                })() + '</aside>';\n\n                // color main\n                strHtml = strHtml + `<div class=\"${Color.addClass('basic', 'r')}\">` + (function () {\n                    let strHtmlRG = '';\n\n                    arrBasicColorPreset.forEach(colorItem => {\n                        strHtmlRG += `<a href=\"javascript:\" title=\"#${colorItem}${isSupportOpacity ? 'ff' : ''}\" class=\"${Color.addClass('lump', 'preset')}\" data-color=\"${colorItem}${isSupportOpacity ? 'ff' : ''}\" style=\"${BG_COLOR}:#${colorItem}${isSupportOpacity ? 'ff' : ''}\" aria-label=\"${colorItem}${isSupportOpacity ? 'ff' : ''}\" role=\"option\"></a>`;\n                    });\n\n                    return strHtmlRG;\n                })() + '</div>';\n\n                return strHtml + '</div>';\n            })() +\n\n            (function () {\n                // more color picker\n                let html = `<div class=\"${Color.addClass('more')} colorMoreX\">`;\n                // color left\n                html += `<div class=\"${Color.addClass('more', 'l')}\">\n                <a href=\"javascript:\" class=\"${Color.addClass('cover', 'white')}\" aria-label=\"色域背景块\" role=\"region\"></a><div class=\"${Color.addClass('circle')} colorCircle\"></div>\n                <div class=\"${Color.addClass('gradient')}\">\n                </div>\n                </div><div class=\"${Color.addClass('more', 'r')}\">\n                    <div class=\"${Color.addClass('more', 'fill')} colorFill\">\n                        <a href=\"javascript:\" class=\"${Color.addClass('more', 'cover')}\" aria-label=\"明度控制背景条\" role=\"region\"></a>\n                        <div class=\"${Color.addClass('gradient')}\" style=\"background: linear-gradient(#ffffff 0%, rgba(255,255,255,0) 50%, rgba(0,0,0,0) 50%, ${Color.defaultValue} 100%);\">\n                        </div>\n                    </div>\n                    <a href=\"javascript:\" class=\"${Color.addClass('more', 'arrow')} colorArrow\" role=\"slider\" aria-label=\"明度控制按钮：100%\"></a>\n                </div>`;\n\n                return html + '</div>';\n            })() +\n            (function () {\n                // 透明度-滑动条\n                if (isSupportOpacity) {\n                    let opacityHtml = '<div' + ` class=\"${Color.addClass('opacity')}\">透明度：<input class=\"${Color.addClass('opacity', 'range')} colorOpacity\"` + 'type=\"range\"  value=\"100\" min=\"0\" max=\"100\" step=\"1\" data-tips=\"${value}%\" is=\"ui-range\"></div>';\n                    return opacityHtml;\n                }\n                return '';\n            })() + '</div>';\n\n        // footer\n        const strHtmlFooter = '';\n        // append\n        eleContainer.innerHTML = strHtmlConvert + strHtmlCurrent + strHtmlBody + strHtmlFooter;\n\n        // 一些元素\n        Object.assign(this.element, {\n            field: eleContainer.querySelector('input'),\n            basic: eleContainer.querySelector('.colorBasicX'),\n            more: eleContainer.querySelector('.colorMoreX'),\n            mode: eleContainer.querySelector('.colorMode'),\n            opacity: eleContainer.querySelector('.colorOpacity'),\n            circle: eleContainer.querySelector('.colorCircle'),\n            fill: eleContainer.querySelector('.colorFill'),\n            arrow: eleContainer.querySelector('.colorArrow'),\n            current: eleContainer.querySelector('.colorCurrent')\n        });\n\n        // filed做一些事情\n        const propValue = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');\n        let eleField = this.element.field;\n\n        Object.defineProperty(eleField, 'value', {\n            ...propValue,\n            set (value) {\n                // 赋值\n                propValue.set.call(this, value);\n                // 回调触发\n                eleField.dispatchEvent(new CustomEvent('change'));\n            }\n        });\n\n        if (document.body.contains(eleContainer) == false) {\n            document.body.appendChild(eleContainer);\n        }\n\n        // 事件\n        this.events();\n\n        return this;\n    }\n\n    /**\n     * 面板的色块啊，圆和尖角位置匹配\n     * @param  {String} value 面板UI相匹配的色值，可缺省，表示使用当前输入框的颜色值进行UI变化\n     * @return {Object}       返回当前DOM元素对象\n     */\n    match (value) {\n        // 首先要面板显示\n        if (this.display != true) {\n            return this;\n        }\n        // 元素对象\n        const objElement = this.element;\n        // 元素\n        const eleContainer = objElement.target;\n        const eleCurrent = objElement.current;\n        // 更多元素\n        const eleMore = objElement.more;\n        // 元素\n        const eleCircle = objElement.circle;\n        const eleFill = objElement.fill;\n        const eleArrow = objElement.arrow;\n        // 面板内部唯一的输入框元素\n        const eleField = objElement.field;\n\n        const eleOpacity = objElement.opacity;\n\n        // 重定位\n        let isRePosition = true;\n        if (value === false) {\n            isRePosition = false;\n        }\n\n        // 当前的颜色值\n        let strValue = value || eleField.value;\n        if (strValue == '') {\n            // 如果输入框没有值\n            // 使用之前一个合法的颜色值作为现在值\n            strValue = Color.funRgbToHex(getComputedStyle(eleCurrent)[BG_COLOR]).replace('#', '');\n            eleField.value = strValue;\n        }\n        strValue = strValue.replace('#', '');\n\n        // 色块值示意&透明度条状态更新\n        if (eleOpacity) {\n            if (/^[0-9A-F]{8}$/i.test(strValue)) {\n                eleOpacity.value = parseInt(strValue.slice(6, 8), 16) / 255 * 100;\n            }\n            if (/^[0-9A-F]{6}$/i.test(strValue)) {\n                eleField.value += Math.round(eleOpacity.value / 100 * 255).toString(16).padStart(2, '0');\n            }\n        } else {\n            eleCurrent.style[BG_COLOR] = '#' + strValue;\n        }\n\n        // 当前是基本色面板还是任意色面板\n        if (window.getComputedStyle(eleMore).display == 'none') {\n            // 1. 基本色\n            // 所有当前高亮的元素不高亮\n            const eleActive = eleContainer.querySelector('.active');\n            if (eleActive) {\n                eleActive.classList.remove('active');\n            }\n            // 所有颜色一致的高亮\n            const eleColorMatch = eleContainer.querySelector(`a[data-color=\"${strValue.toUpperCase()}\"]`);\n            if (eleColorMatch) {\n                eleColorMatch.classList.add('active');\n            }\n        } else {\n            let numWidth = eleCircle.parentElement.clientWidth;\n            let numHeight = eleCircle.parentElement.clientHeight;\n\n            let numColorH = 0;\n            let numColorS = 1;\n            let numColorL = 0.5;\n\n            // 滑块和尖角的颜色和位置\n            if (isRePosition == true) {\n                // to HSL\n                let arrHSL = Color.funHexToHsl(strValue);\n                // hsl value\n                numColorH = arrHSL[0];\n                numColorS = arrHSL[1];\n                numColorL = arrHSL[2];\n\n                eleCircle.style.left = numWidth * numColorH + 'px';\n                eleCircle.style.top = numHeight * (1 - numColorS) + 'px';\n\n                eleArrow.style.top = eleArrow.parentElement.clientHeight * (1 - numColorL) + 'px';\n            } else {\n                numColorH = parseFloat(eleCircle.style.left || 0) / numWidth;\n                numColorS = 1 - parseFloat(eleCircle.style.top || 0) / numHeight;\n            }\n\n            // 滑块和尖角的颜色和位置\n            let strColor = `hsl(${[360 * numColorH, Math.round(100 * numColorS) + '%', '50%'].join()}`;\n            eleFill.style[BG_COLOR] = strColor;\n            eleCircle.style[BG_COLOR] = strColor;\n        }\n\n        return this;\n    }\n\n    /**\n     * 浮层定位方法\n     * @return undefined\n     */\n    position () {\n        // 面板定位\n        this.follow();\n\n        return this;\n    }\n\n    /**\n    * 颜色面板显示\n    * @return undefined\n    */\n    show () {\n        // 元素\n        let eleContainer = this.element.target;\n\n        // 输入框赋值\n        if (eleContainer.innerHTML.trim() == '') {\n            this.create();\n        }\n\n        // 改变显示状态\n        this.display = true;\n\n        // 面板显示\n        eleContainer.style.display = 'inline';\n        // 键盘ESC隐藏支持\n        eleContainer.classList.add('ESC');\n\n        // aria\n        this.setAttribute('aria-expanded', 'true');\n\n        // 定位\n        this.position();\n\n        // 面板UI匹配\n        const eleCurrent = this.element.current;\n        if (!eleCurrent.getAttribute('style')) {\n            eleCurrent.style[BG_COLOR] = this.value;\n        }\n        this.match();\n\n        // show callback\n        this.dispatchEvent(new CustomEvent('show', {\n            detail: {\n                type: 'ui-color'\n            }\n        }));\n\n        return this;\n    }\n\n    /**\n     * 颜色面板隐藏\n     * @return undefined\n     */\n    hide () {\n        let eleContainer = this.element.target;\n        // 面板隐藏\n        eleContainer.style.display = 'none';\n        eleContainer.classList.remove('ESC');\n\n        // aria\n        this.setAttribute('aria-expanded', 'false');\n\n        // 改变显示状态\n        this.display = false;\n\n        // 聚焦，键盘访问顺序回归正常\n        this.focus();\n\n        // hide callback\n        // 因为this.drop.hide的时候还会执行一次这里的hide()方法，\n        // 因此这里加了个display判断\n        // 避免连续两次hide事件的实习\n        this.dispatchEvent(new CustomEvent('hide', {\n            detail: {\n                type: 'ui-color'\n            }\n        }));\n\n        return this;\n    }\n\n    /**\n     * 给当前元素对象扩展方法、重置原生value属性\n     */\n    setProperty () {\n\n        /**\n         * 根据坐标位置获得hsl值\n         * 私有\n         * @return {String} [返回当前坐标对应的hex表示的颜色值]\n         */\n        Object.defineProperty(this, 'getValueByStyle', {\n            value: () => {\n            // 需要的元素\n                const eleCircle = this.element.circle;\n                const eleArrow = this.element.arrow;\n                const eleOpacity = this.element.opacity;\n\n                if (eleCircle.length * eleArrow.length == 0) {\n                    return Color.defaultValue;\n                }\n\n                let numColorH, numColorS, numColorL;\n                // get color\n                // hsl color\n                if (eleCircle.style.left) {\n                    numColorH = parseFloat(window.getComputedStyle(eleCircle).left) / eleCircle.parentElement.clientWidth;\n                } else {\n                    numColorH = 0;\n                }\n                if (eleCircle.style.top) {\n                    numColorS = 1 - parseFloat(window.getComputedStyle(eleCircle).top) / eleCircle.parentElement.clientHeight;\n                } else {\n                    numColorS = 1;\n                }\n                if (eleArrow.style.top) {\n                    numColorL = 1 - parseFloat(window.getComputedStyle(eleArrow).top) / eleArrow.parentElement.clientHeight;\n                } else {\n                    numColorL = 0;\n                }\n                // 支持透明度\n                if (eleOpacity && eleOpacity.value) {\n                    return '#' + Color.funHslToHex(numColorH, numColorS, numColorL, eleOpacity.value / 100);\n                }\n                return '#' + Color.funHslToHex(numColorH, numColorS, numColorL);\n            }\n        });\n\n        const props = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');\n        Object.defineProperty(Color.prototype, 'value', {\n            ...props,\n            set (value) {\n                let strValue = value;\n                // 元素\n                // 目前的颜色值\n                let strOldValue = this.value;\n                // 取值还是赋值\n                if (typeof value == 'string') {\n                    // 如果是纯字母，则认为是关键字\n                    if (/^[a-z]{3,}$/.test(strValue)) {\n                        document.head.style.backgroundColor = strValue;\n                        strValue = window.getComputedStyle(document.head).backgroundColor;\n                        document.head.style.backgroundColor = '';\n                    }\n\n                    // 使用hex值\n                    strValue = Color.funRgbToHex(strValue);\n                    // 赋值\n                    props.set.call(this, strValue);\n\n                    // 可能存在还未和页面建立联系的时候执行value赋值\n                    if (!this.params) {\n                        return;\n                    }\n\n                    // 作为常用颜色记录下来\n                    const strCommonColors = localStorage.commonColors || '';\n                    let arrCommonColors = strCommonColors.split(',');\n                    // 前提颜色非纯灰色若干色值\n                    const arrFixedColor = this.params.color.fixed;\n\n                    if (arrFixedColor.some((strFixedColor) => {\n                        return Color.funRgbToHex(strFixedColor) == strValue;\n                    }) == false) {\n                        // 过滤已经存在的相同颜色的色值\n                        arrCommonColors = arrCommonColors.filter((strValueWithSharp) => {\n                            return strValueWithSharp && strValueWithSharp != strValue.replace('#', '');\n                        });\n\n                        // 从前面插入\n                        arrCommonColors.unshift(strValue.replace('#', ''));\n\n                        // 本地存储\n                        localStorage.commonColors = arrCommonColors.join();\n\n                        // 2个动态色值更新\n                        const eleBasic = this.element.basic;\n                        if (eleBasic) {\n                            const eleAsideColors = eleBasic.querySelectorAll('aside a');\n                            const eleBasicColorLast = eleAsideColors[eleAsideColors.length - 2];\n                            const eleBasicColorSecond = eleAsideColors[eleAsideColors.length - 1];\n\n                            eleBasicColorLast.setAttribute('data-color', arrCommonColors[0]);\n                            eleBasicColorLast.setAttribute('aria-label', arrCommonColors[0]);\n                            eleBasicColorLast.style[BG_COLOR] = strValue;\n\n                            const strColorSecond = arrCommonColors[1] || '0ff';\n                            eleBasicColorSecond.setAttribute('data-color', strColorSecond);\n                            eleBasicColorSecond.setAttribute('aria-label', strColorSecond);\n                            eleBasicColorSecond.style[BG_COLOR] = '#' + strColorSecond;\n                        }\n                    }\n\n                    this.style.setProperty('--ui-color-opacity', strValue);\n                    this.element.target.style.setProperty('--ui-color-opacity', strValue);\n                    if (this.element.field) {\n                        this.element.field.value = strValue.replace('#', '');\n                    }\n\n                    // 面板上的值，各种定位的匹配\n                    if (this.isTrustedEvent) {\n                        this.match(false);\n                        this.isTrustedEvent = null;\n                    } else {\n                        this.match();\n                    }\n                } else if (!strOldValue) {\n                    // 取值\n                    // 如果默认无值，使用颜色作为色值，一般出现在初始化的时候\n                    strOldValue = Color.defaultValue;\n                    // 赋值\n                    props.set.call(this, strOldValue);\n                }\n\n                if (strOldValue && strValue != strOldValue) {\n                    this.dispatchEvent(new CustomEvent('change', {\n                        'bubbles': true\n                    }));\n                    this.dispatchEvent(new CustomEvent('input', {\n                        'bubbles': true\n                    }));\n                }\n            }\n        });\n\n        // 标题设置\n        if (!this.title) {\n            this.title = (this.disabled ? '禁止' : '') + '颜色选择';\n        }\n    }\n\n    attributeChangedCallback (name) {\n        if (name == 'disabled') {\n            if (this.title == '颜色选择' && this.disabled) {\n                this.title = '禁止颜色选择';\n            } else if (this.title == '禁止颜色选择' && !this.disabled) {\n                this.title = '颜色选择';\n            }\n        }\n    }\n\n    connectedCallback () {\n        if (!this.id) {\n            // 创建随机id\n            this.id = 'lulu_' + (Math.random() + '').split('.')[1];\n        }\n\n        // 阻止默认的颜色选择出现\n        this.addEventListener('click', event => {\n            event.preventDefault();\n\n            if (this.display != true) {\n                this.show();\n            }\n        });\n\n        // 默认朝下居中对齐\n        if (!this.dataset.position) {\n            this.dataset.position = '7-5';\n        }\n\n        // 浮层容器\n        const eleContainer = document.createElement('div');\n        eleContainer.classList.add(Color.addClass('container'));\n        eleContainer.id = ('lulu_' + Math.random()).replace('0.', '');\n        this.dataset.target = eleContainer.id;\n\n        // 全局暴露的一些元素\n        this.element = {\n            target: eleContainer\n        };\n\n        if (this.getAttribute('type') === 'color-opacity') {\n            this.style.setProperty('--ui-color-opacity', this.value);\n            eleContainer.style.setProperty('--ui-color-opacity', this.value);\n        }\n\n        // 全局的基础色值\n        const arrBasicColor = ['0', '3', '6', '9', 'c', 'f'];\n        const arrBasicColorPreset = ['2a80eb', '0057c3', '7fdbff', 'f7f9fa', '1cad70', '3d9970', '39cccc', 'dddddd', 'eb4646', 'ab2526', 'ef8a5e', 'a2a9b6', 'f59b00', 'de6d00', 'ffdc00', '4c5161'];\n        const arrFixedColor = arrBasicColor.concat('eb4646', '1cad70', '2a80eb', 'f59b00');\n\n        this.params = this.params || {};\n\n        this.params.color = {\n            basic: arrBasicColor,\n            basicPreset: arrBasicColorPreset,\n            fixed: arrFixedColor\n        };\n\n        // 点击空白隐藏浮层的处理\n        document.addEventListener('click', event => {\n            const eleClicked = event && event.target;\n\n            if (!eleClicked || !this.display) {\n                return;\n            }\n\n            if (eleClicked != this && eleContainer.contains(eleClicked) == false) {\n                this.hide();\n            }\n        });\n\n        // 窗口尺寸变化时候的处理\n        window.addEventListener('resize', () => {\n            if (this.display) {\n                this.position();\n            }\n        });\n\n        // 全局事件\n        this.dispatchEvent(new CustomEvent('connected', {\n            detail: {\n                type: 'ui-color'\n            }\n        }));\n\n        this.isConnectedCallback = true;\n    }\n}\n\nColor.defaultValue = '#000000';\n\nif (!customElements.get('ui-color')) {\n    customElements.define('ui-color', Color, {\n        extends: 'input'\n    });\n}\n\n// export default Color;\n\n/**\n * @Dialog.js\n * @author  zhangxinxu\n * @version\n * @created 15-06-18\n * @edited  19-11-01\n * @edited  20-06-26 @ziven27\n * @edited  20-12-01 by zhangxinxu method extends from <dialog>\n * @edited  24-04-15 by zhangxinxu support modal dialog\n */\n\nconst Dialog = (() => {\n\n    // 类名前缀\n    const DIALOG = 'dialog';\n\n    // 处理类名\n    const CL = {\n        add: (...arg) => `ui-${DIALOG}-${arg.join('-')}`,\n        toString: (value) => `ui-${value || DIALOG}`\n    };\n\n    /**\n   * 弹框实例方法\n   * @param {Object} options 纯对象，可选参数\n   */\n    class Component {\n        constructor (options = {}) {\n            // 最终参数\n            const objParams = {\n                title: '',\n                // 不同类别的内容类型\n                content: '',\n                // 弹框的宽度\n                width: 'auto',\n                // 弹框高度\n                height: 'auto',\n                // 不同类别的默认按钮\n                buttons: [],\n                // 关闭按钮\n                closable: true,\n                // 弹框显示、隐藏、移除的回调\n                onShow: function () {\n                },\n                onHide: function () {\n                },\n                onRemove: function () {\n                },\n                ...options\n            };\n\n            // 各个元素创建\n            // 容器-含半透明遮罩背景\n            const dialog = document.createElement(DIALOG);\n            dialog.setAttribute('is', 'ui-dialog');\n\n            // MutationObserver是一个异步的过程，因此\n            // 元素样式的设置在'DOMContentLoaded'事件之后完成\n            dialog.addEventListener('DOMContentLoaded', () => {\n                // 务必有传参\n                // 否则不会对初始元素进行处理\n                if (JSON.stringify(options) != '\"{}\"') {\n                    // 改变参数，会自动触发DOM元素内容的变化\n                    dialog.setParams({\n                        ...objParams\n                    });\n                }\n\n                // 显示\n                if (dialog.hasAttribute('modal')) {\n                    dialog.showModal();\n                } else {\n                    dialog.show();\n                }\n            });\n\n            // 插入的细节\n            // 1. 插在所有dialog的前面\n            // 2. 如果没有，则放在页面后面\n            const eleExistDialog = document.querySelector('body > ' +  DIALOG);\n\n            if (eleExistDialog) {\n                eleExistDialog.insertAdjacentElement('beforebegin', dialog);\n            } else {\n                document.body.appendChild(dialog);\n            }\n\n            // 注册当前<dialog>元素\n            // 为了可以立即使用alert()、confirm()方法，\n            // 在这里提前注册了\n            funDialogRegist(dialog);\n\n            return dialog;\n        }\n    }\n\n    // 对不支持<dialog>元素的浏览器进行polyfill\n    // 仅polyfill部分主要功能\n    const DialogPolyfill = function (dialog) {\n        this.element = {\n            dialog: dialog\n        };\n        // aria支持\n        if (!dialog.hasAttribute('role')) {\n            dialog.setAttribute('role', 'dialog');\n        }\n        // 内置方法\n        dialog.show = this.show.bind(this);\n        dialog.showModal = this.showModal.bind(this);\n        dialog.close = this.close.bind(this);\n        // 自定义方法\n        dialog.zIndex = this.zIndex.bind(this);\n\n        Object.defineProperty(dialog, 'open', {\n            set: this.setOpen.bind(this),\n            get: dialog.hasAttribute.bind(dialog, 'open')\n        });\n    };\n\n    DialogPolyfill.prototype = {\n        get dialog () {\n            return this.element.dialog;\n        },\n        show () {\n            this.setOpen(true);\n            // 层级最高\n            this.zIndex();\n        },\n        showModal () {\n            this.setOpen(true);\n        },\n        close () {\n            this.setOpen(false);\n            // 原生<dialog>就有close事件\n            this.dialog.dispatchEvent(new CustomEvent('close', {\n                bubbles: false,\n                cancelable: false\n            }));\n        },\n        setOpen (value) {\n            if (value) {\n                this.dialog.setAttribute('open', '');\n            } else {\n                this.dialog.removeAttribute('open');\n            }\n        },\n\n        /**\n         * 弹框元素zIndex实时最大化\n         * 原生dialog无需此能力（更正，浏览器变化，现在也需要了）\n         * @return {[type]} [description]\n         */\n        zIndex () {\n            var dialog = this.dialog;\n            // 原生元素需要\n            if (this.matches && this.matches('dialog')) {\n                dialog = this;\n            }\n            // 返回eleTarget才是的样式计算对象\n            const objStyleTarget = window.getComputedStyle(dialog);\n            // 此时元素的层级\n            const numZIndexTarget = objStyleTarget.zIndex;\n            // 用来对比的层级，也是最小层级\n            let numZIndexNew = 19;\n\n            // 只对<body>子元素进行层级最大化计算处理\n            [...document.body.children].forEach(function (eleChild) {\n                const objStyleChild = window.getComputedStyle(eleChild);\n\n                const numZIndexChild = objStyleChild.zIndex * 1;\n\n                if (numZIndexChild && (dialog !== eleChild && objStyleChild.display !== 'none')) {\n                    numZIndexNew = Math.max(numZIndexChild + 1, numZIndexNew);\n                }\n            });\n\n            if (numZIndexNew !== numZIndexTarget) {\n                dialog.style.zIndex = numZIndexNew;\n            }\n        }\n    };\n\n    // 对弹框元素进行方法注册\n    const funDialogRegist = function (dialog) {\n        if (dialog.hide && dialog.button) {\n            // 已经注册过\n            return;\n        }\n        if ('open' in document.createElement('dialog') == false) {\n            new DialogPolyfill(dialog);\n        }\n\n        // 自定义的方法支持\n        // 全新的remove和show方法\n        // 新增hide, alert, confirm等方法\n        if (dialog.getAttribute('is') == 'ui-dialog') {\n            Object.defineProperties(dialog, {\n                // 劫持原生的open属性\n                open: {\n                    get () {\n                        return this.hasAttribute('open');\n                    },\n                    set (value) {\n                        this.toggleAttribute('open', value);\n                    }\n                },\n                setParams: {\n                    value: function (options) {\n                        Object.assign(this.params, options || {});\n\n                        // 回调处理\n                        if (typeof options.onShow == 'function') {\n                            this.addEventListener('show', function (event) {\n                                options.onShow.call(this, event);\n                            });\n                        }\n                        if (typeof options.onHide == 'function') {\n                            this.addEventListener('hide', function (event) {\n                                options.onHide.call(this, event);\n                            });\n                        }\n                        if (typeof options.onRemove == 'function') {\n                            this.addEventListener('remove', function (event) {\n                                options.onRemove.call(this, event);\n                            });\n                        }\n\n                        return this.params;\n                    }\n                },\n\n                /**\n                 * 弹框按钮的处理\n                 * @returns {Object}  返回当前<dialog>元素\n                 */\n                button: {\n                    value: function () {\n                        const objParams = this.params;\n                        const objElement = this.element;\n\n                        // 清除之前的按钮内容和数据\n                        objElement.footer.innerHTML = '';\n                        // 元素数据清除\n                        for (const keyElement in objElement) {\n                            if (/^button/.test(keyElement)) {\n                                delete objElement[keyElement];\n                            }\n                        }\n\n                        // 按钮元素创建\n                        objParams.buttons.forEach(function (objButton, numIndex) {\n                            // objButton可能是null等\n                            objButton = objButton || {\n                                type: 'normal'\n                            };\n\n                            // 按钮类型和值的处理\n                            let strType = objButton.type;\n                            let strValue = objButton.value;\n\n                            if (strType === 'remind' || (!strType && numIndex === 0)) {\n                                strType = 'primary';\n                            } else if (!strType && numIndex === 1) {\n                                strType = 'normal';\n                            }\n\n                            if (!strValue) {\n                                strValue = ['确定', '取消'][numIndex];\n                            }\n\n                            let eleButton = document.createElement('button');\n                            if (objButton['for']) {\n                                eleButton = document.createElement('label');\n                                eleButton.setAttribute('for', objButton['for']);\n                            } else if (objButton.form) {\n                                eleButton.setAttribute('form', objButton.form);\n                                eleButton.type = 'submit';\n                            }\n                            // 自定义的类名\n                            if (objButton.className) {\n                                eleButton.className = objButton.className;\n                            }\n                            // 按钮样式\n                            eleButton.classList.add(CL.toString('button'));\n                            if (strType) {\n                                eleButton.setAttribute('data-type', strType);\n                            }\n                            // 按钮是否禁用\n                            eleButton.disabled = Boolean(objButton.disabled);\n                            // 按钮内容\n                            eleButton.innerHTML = strValue;\n\n                            // 放在底部元素中\n                            objElement.footer.appendChild(eleButton);\n\n                            // 对外暴露\n                            objElement['button' + numIndex] = eleButton;\n                        });\n\n                        // 按钮事件\n                        // 底部确定取消按钮\n                        objParams.buttons.forEach((objButton, numIndex) => {\n                            // objButton可能是null等\n                            objButton = objButton || {};\n\n                            const eleButton = objElement['button' + numIndex];\n\n                            if (!eleButton || objButton['for'] || objButton.form) {\n                                return;\n                            }\n\n                            let objEvents = objButton.events || {\n                                click: () => {\n                                    this[this.closeMode]();\n                                }\n                            };\n\n                            if (typeof objEvents === 'function') {\n                                objEvents = {\n                                    click: objEvents\n                                };\n                            }\n\n                            for (const strEventType in objEvents) {\n                                eleButton.addEventListener(strEventType, (event) => {\n                                    // 把实例对象传入\n                                    event.dialog = this;\n                                    // 事件执行\n                                    objEvents[strEventType](event);\n                                });\n                            }\n\n                            // 额外的focus事件支持\n                            eleButton.addEventListener('focus', function () {\n                                if (window.isKeyEvent) {\n                                    this.style.outline = '';\n                                } else {\n                                    this.style.outline = 'none';\n                                }\n                            });\n                        });\n\n                        return this;\n                    }\n                },\n\n                /**\n                 * 固定结构元素的事件绑定\n                 * @returns {Object}    返回当前<dialog>元素对象\n                 */\n                events: {\n                    value: function () {\n                        const objElement = this.element;\n\n                        this.addEventListener('animationend', function (event) {\n                            if (event.target.tagName.toLowerCase() === DIALOG) {\n                                this.classList.remove(CL.add('animation'));\n                            }\n                        });\n\n                        // 关闭弹框按钮\n                        const eleClose = objElement.close;\n                        if (eleClose) {\n                            eleClose.addEventListener('click', () => {\n                                // 有其他可ESC元素存在时候，弹框不关闭\n                                const eleActiveElement = document.activeElement;\n                                const attrActiveElement = eleActiveElement.getAttribute('data-target');\n                                let eleTargetElement = null;\n\n                                if (attrActiveElement) {\n                                    eleTargetElement = document.getElementById(attrActiveElement);\n                                }\n\n                                // 如果是其他元素的键盘访问\n                                if (window.isKeyEvent && eleTargetElement && eleActiveElement !== eleClose && document.querySelector('a[data-target=\"' + attrActiveElement + '\"],input[data-target=\"' + attrActiveElement + '\"],button[data-target=\"' + attrActiveElement + '\"]') && eleTargetElement.clientWidth > 0) {\n                                    return;\n                                }\n\n                                // 关闭弹框\n                                this[this.closeMode]();\n                            });\n                        }\n\n                        this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n\n                        return this;\n                    }\n                },\n\n                /**\n                 * alert类型的弹框，默认仅一个“确定”按钮\n                 * @param  {String} content    提示文字或者提示HTML片段\n                 * @param  {Object} options    提示可选参数\n                 * @return {Object}            返回当前<dialog>元素对象\n                 */\n                alert: {\n                    value: function (content, options) {\n                        if (!content) {\n                            return;\n                        }\n\n                        let strContent = content;\n\n                        // alert框的默认参数\n                        const defaults = {\n                            title: '',\n                            // 类型, 'remind', 'success', 'warning', danger', 或者任意 'custom'\n                            type: 'remind',\n                            buttons: [{}]\n                        };\n                        // 最终参数\n                        const objParams = {\n                            ...defaults,\n                            ...options\n                        };\n\n                        if (objParams.type === 'error' || objParams.type === 'fail') {\n                            objParams.type = 'danger';\n                        } else if (objParams.type === 'primary') {\n                            objParams.type = 'remind';\n                        }\n\n                        if (objParams.buttons.length && !objParams.buttons[0].type) {\n                            objParams.buttons[0].type = objParams.type;\n                            // 如果是自定义类型，则使用'primary'作为按钮类型\n                            if (/^remind|success|warning|danger$/.test(objParams.type) === false) {\n                                objParams.buttons[0].type = defaults.type;\n                            }\n                        }\n\n                        let nodes = new DOMParser().parseFromString(strContent, 'text/html').body.childNodes;\n\n                        if (nodes.length == 1) {\n                            // 如果是纯文本\n                            if (nodes[0].nodeType === 3) {\n                                strContent = '<p class=\"' + CL.add('wrap') + '\">' + strContent + '</p>';\n                            }\n                        } else {\n                            strContent = '<div class=\"' + CL.add('wrap') + '\">' + strContent + '</div>';\n                        }\n\n                        // 主体内容更新\n                        strContent = '<div class=\"' + CL.add(objParams.type) + ' ' + CL.add('alert') + '\">' + strContent + '</div>';\n\n                        this.setParams({\n                            width: 'auto',\n                            title: objParams.title,\n                            buttons: objParams.buttons,\n                            content: strContent\n                        });\n\n                        this.type = 'alert';\n\n                        this.showModal();\n\n                        return this;\n                    }\n                },\n\n                /**\n                 * confirm类型的弹框，默认有一个“确定”和一个“取消”按钮\n                 * @param  {String} content    提示文字或者提示HTML片段\n                 * @param  {Object} options    提示可选参数\n                 * @return {Object}            返回当前<dialog>元素对象\n                 */\n                confirm: {\n                    value: function (content, options) {\n                        if (!content) {\n                            return;\n                        }\n\n                        let strContent = content;\n\n                        // confirm框的默认参数\n                        const defaults = {\n                            title: '',\n                            type: 'danger',\n                            buttons: [{}, {}]\n                        };\n\n                        // 最终参数\n                        const objParams = {\n                            ...defaults,\n                            ...options\n                        };\n\n                        if (objParams.type === 'error' || objParams.type === 'fail') {\n                            objParams.type = 'danger';\n                        }\n                        if (objParams.type === 'primary') {\n                            objParams.type = 'remind';\n                        }\n\n                        // danger类型的按钮可缺省\n                        if (objParams.buttons.length && !objParams.buttons[0].type) {\n                            objParams.buttons[0].type = objParams.type;\n                            // 如果是自定义类型，则使用'primary'作为按钮类型\n                            if (/^remind|success|warning|danger$/.test(objParams.type) === false) {\n                                objParams.buttons[0].type = defaults.type;\n                            }\n                        }\n\n                        let nodes = new DOMParser().parseFromString(strContent, 'text/html').body.childNodes;\n\n                        if (nodes.length == 1) {\n                            // 如果是纯文本\n                            if (nodes[0].nodeType === 3) {\n                                strContent = '<p class=\"' + CL.add('wrap') + '\">' + strContent + '</p>';\n                            }\n                        } else {\n                            strContent = '<div class=\"' + CL.add('wrap') + '\">' + strContent + '</div>';\n                        }\n\n                        // 主体内容设置\n                        strContent = '<div class=\"' + CL.add(objParams.type) + ' ' + CL.add('confirm') + '\">' + strContent + '</div>';\n\n                        // 参数对外\n                        this.setParams({\n                            width: 'auto',\n                            title: objParams.title,\n                            buttons: objParams.buttons,\n                            content: strContent\n                        });\n\n                        this.type = 'confirm';\n\n                        this.showModal();\n\n                        return this;\n                    }\n                },\n\n                /**\n                 * loading弹框，通常用在ajax请求之前使用\n                 * loading结束后可以直接调用弹框实例的open()方法显示\n                 * @return {Object} 返回当前实例对象\n                 */\n                loading: {\n                    value: function () {\n                        const objElement = this.element;\n\n                        this.params.content = '<ui-loading rows=\"10\" size=\"3\"></ui-loading>';\n                        // 显示loading样式\n                        objElement.dialog.classList.add(CL.add('loading'));\n\n                        this.showModal();\n\n                        return this;\n                    }\n                },\n\n                /**\n                 * 内容赋值\n                 */\n                content: {\n                    get () {\n                        return this.params.content;\n                    },\n                    set (content) {\n                        // 让直接设置content时候可以和params.content数据保持一致\n                        if (content != this.params.content) {\n                            this.params.content = content;\n                            return;\n                        }\n\n                        let eleBody = this.element.body;\n                        let eleDialog = this.element.dialog;\n                        // 去除可能的loading类名\n                        eleDialog.classList.remove(CL.add('loading'));\n                        // content可以是函数\n                        if (typeof content == 'function') {\n                            content = content();\n                        } else if (typeof content == 'string' && /^#?\\w+(?:[-_]\\w+)*$/i.test(content)) {\n                            // 如果是字符串\n                            // 如果是选择器，仅支持ID选择器\n                            let eleMatch = document.querySelector(content);\n                            if (eleMatch) {\n                                if (eleMatch.matches('textarea')) {\n                                    content = eleMatch.value;\n                                } else if (eleMatch.matches('script')) {\n                                    content = eleMatch.innerHTML;\n                                } else {\n                                    content = eleMatch;\n                                }\n                            }\n                        }\n\n                        // 基于内容的数据类型，使用不同的默认的弹框关闭方式\n                        this.closeMode = typeof content == 'string' ? 'remove' : 'hide';\n\n                        // 是隐藏模式，则eleBody里面的内容保护出来\n                        // 主要是使用content语法替换内容时候用到，这段代码一般不会执行到\n                        if (this.closeMode == 'hide' && eleBody.innerHTML) {\n                            let eleProtect = document.createElement('div');\n                            eleProtect.setAttribute('hidden', '');\n                            // 遍历并转移\n                            eleBody.childNodes.forEach(node => {\n                                eleProtect.appendChild(node);\n                            });\n                            // 保护到页面中\n                            document.body.appendChild(eleProtect);\n                        }\n\n                        // 清空主内容区域的内容\n                        eleBody.innerHTML = '';\n\n                        if (this.closeMode == 'remove') {\n                            eleBody.innerHTML = content;\n                        } else {\n                            let eleContentParent = content.parentElement;\n                            let isParentHidden = eleContentParent && eleContentParent.matches('div[hidden]');\n                            // 弹框中显示\n                            eleBody.appendChild(content);\n                            // 如果原父级是隐藏div，该div删除\n                            if (isParentHidden && eleContentParent.innerHTML.trim() === '') {\n                                eleContentParent.remove();\n                            }\n                            // 如果content是隐藏的则显示\n                            if (content.nodeType === 1 && getComputedStyle(content).display == 'none') {\n                                content.removeAttribute('hidden');\n                                content.style.display = '';\n                                // 如果此时元素的display状态还是none，则设置为浏览器初始display值\n                                if (getComputedStyle(content).display == 'none') {\n                                    content.style.display = 'revert';\n                                }\n                            }\n                        }\n                    }\n                },\n\n                /**\n                 * 背景滚动锁定带来的\n                 * @returns    当前<dialog>元素\n                 */\n                scrollbar: {\n                    value: function () {\n                        const eleAllDialog = document.querySelectorAll('dialog[is=\"ui-dialog\"]');\n\n                        // 是否有显示的弹框\n                        const isDisplayed = [].slice.call(eleAllDialog).some(function (eleDialog) {\n                            return window.getComputedStyle(eleDialog).display !== 'none' && eleDialog.clientWidth > 0;\n                        });\n\n                        document.documentElement.style.overflow = '';\n                        document.body.style.borderRight = '';\n\n                        const widthScrollbar = window.innerWidth - document.documentElement.clientWidth;\n\n                        // 因为去掉了滚动条，所以宽度需要偏移，保证页面内容没有晃动\n                        if (isDisplayed && widthScrollbar) {\n                            // 所有PC浏览器都滚动锁定\n                            document.documentElement.style.overflow = 'hidden';\n                            document.body.style.borderRight = widthScrollbar + 'px solid transparent';\n                        }\n\n                        return this;\n                    }\n                },\n\n                /**\n                 * 弹框显示\n                 * @returns    当前<dialog>元素\n                 */\n                show: {\n                    value: function () {\n                        if (!this.open) {\n                            this.classList.add(CL.add('animation'));\n\n                            if (typeof HTMLDialogElement == 'function') {\n                                HTMLDialogElement.prototype.show.call(this);\n                            }\n                        }\n\n                        \n                        if (!this.zIndex) {\n                            this.zIndex = DialogPolyfill.prototype.zIndex.bind(this);\n                        }\n\n                        // 面板显示\n                        if (this.zIndex) {\n                            this.zIndex();\n                        }\n\n                        this.dispatchEvent(new CustomEvent('show', {\n                            detail: {\n                                type: 'ui-dialog'\n                            }\n                        }));\n\n                        return this;\n                    }\n                },\n\n                /**\n                 * 弹框隐藏\n                 * @returns    当前<dialog>元素\n                 */\n                hide: {\n                    value: function () {\n                        this.close();\n\n                        this.dispatchEvent(new CustomEvent('hide', {\n                            detail: {\n                                type: 'ui-dialog'\n                            }\n                        }));\n\n                        return this;\n                    }\n                },\n\n                /**\n                 * 弹框移除\n                 * @returns    当前<dialog>元素\n                 */\n                remove: {\n                    value: function () {\n                        this.open = false;\n\n                        this.parentElement.removeChild(this);\n\n                        this.dispatchEvent(new CustomEvent('remove', {\n                            detail: {\n                                type: 'ui-dialog'\n                            }\n                        }));\n\n                        return this;\n                    }\n                }\n            });\n\n            // 重置 removeAttribute、setAttribute 和 toggleAttribute 方法\n            // 如果是 open 属性，不允许直接设置\n            dialog.removeAttribute = function (name) {\n                if (name == 'open') {\n                    dialog.hide();\n                    return;\n                }\n                HTMLElement.prototype.removeAttribute.call(this, name);\n            };\n            dialog.setAttribute = function (name, value) {\n                if (name == 'open') {\n                    dialog.toggleAttribute('open', true);\n                    return;\n                }\n                HTMLElement.prototype.setAttribute.call(this, name, value);\n            }\n            dialog.toggleAttribute = function (name, force) {\n                if (name == 'open') {\n                    const value = force !== undefined ? force : !dialog.open;\n                    // 有open属性，显示\n                    if (value) {\n                        if (this.hasAttribute('modal')) {\n                            this.showModal();\n                        } else {\n                            this.show();\n                        }\n                    } else {\n                        this.hide();\n                    }\n\n                    return;\n                }\n                HTMLElement.prototype.toggleAttribute.call(this, name, force);\n            }\n\n            // 暴露的参数\n            // 并观察参数变化\n            dialog.params = new Proxy(dialog.params || {}, {\n                get (target, prop) {\n                    return target[prop];\n                },\n                set (target, prop, value) {\n                    if (!dialog.element) {\n                        return false;\n                    }\n                    // 赋值\n                    target[prop] = value;\n\n                    // 拦截\n                    if (prop == 'title' && dialog.element.title) {\n                        dialog.element.title.innerHTML = value;\n                    } else if (prop == 'content') {\n                        dialog.content = value;\n                    } else if (prop == 'buttons') {\n                        dialog.button();\n                    } else if (prop == 'closable' && dialog.element.close) {\n                        dialog.element.close.style.display = value ? '' : 'none';\n                    } else if (dialog.element.dialog && (prop == 'width' || prop == 'height')) {\n                        let eleDialog = dialog.element.dialog;\n                        eleDialog.classList.remove(CL.add('stretch'));\n                        // 纯数值认为是px长度\n                        if (value !== '' && Number(value) == value) {\n                            eleDialog.style[prop] = value + 'px';\n                        } else if (prop == 'height' && value == 'stretch') {\n                            eleDialog.classList.add(CL.add(value));\n                        } else {\n                            if (value == 'auto') {\n                                value = '';\n                            }\n                            eleDialog.style[prop] = value;\n                        }\n                    }\n\n                    return true;\n                }\n            });\n\n            // 弹框主要元素的创建\n            // 1. 主体\n            const eleDialog = dialog;\n            eleDialog.classList.add(CL);\n\n            // 2. 标题\n            const eleTitle = document.createElement('h4');\n            eleTitle.classList.add(CL.add('title'));\n            eleTitle.innerHTML = dialog.title;\n            dialog.removeAttribute('title');\n\n            // 3. 关闭按钮\n            // 随机id，ESC快捷键关闭弹框用到\n            const strIdClose = ('lulu_' + Math.random()).replace('0.', '');\n            // 关闭按钮元素创建\n            const eleClose = document.createElement('button');\n            eleClose.textContent = '关闭';\n            eleClose.classList.add(CL.add('close'), 'ESC');\n            eleClose.id = strIdClose;\n            // 无障碍支持\n            eleClose.setAttribute('data-target', strIdClose);\n\n            // 4. 主体内容元素\n            const eleBody = document.createElement('div');\n            eleBody.classList.add(CL.add('body'));\n\n            // 5. 底部元素\n            const eleFooter = document.createElement('div');\n            eleFooter.classList.add(CL.add('footer'));\n\n            // 暴露元素\n            dialog.element = Object.assign(dialog.element || {}, {\n                dialog: eleDialog,\n                close: eleClose,\n                title: eleTitle,\n                body: eleBody,\n                footer: eleFooter\n            });\n\n            // 下面是主体元素的创建\n            // 如果默认弹框里面就有文本节点或元素节点\n            let nodesOriginDialog = [...dialog.childNodes].filter(node => node.nodeType == 1 || node.nodeType == 3);\n\n            // 则不参与任何组装\n            if (!nodesOriginDialog.length) {\n                // 元素插入\n                // 组装\n                eleDialog.append(eleClose, eleTitle, eleBody, eleFooter);\n            } else {\n                eleDialog.prepend(eleClose);\n                if (eleTitle.innerHTML) {\n                    eleDialog.prepend(eleTitle);\n                }\n            }\n\n\n            // 参数处理，如果有\n            const strParams = dialog.dataset.params || dialog.getAttribute('params');\n\n            if (strParams && /{/.test(strParams)) {\n                try {\n                    const objParams = (new Function('return ' + strParams))();\n                    if (nodesOriginDialog.length) {\n                        if (objParams.buttons) {\n                            eleDialog.append(eleFooter);\n                        }\n                        if (objParams.title && !eleDialog.contains(eleTitle)) {\n                            eleDialog.prepend(eleTitle);\n                        }\n                    }\n                    // 参数设置\n                    dialog.setParams(objParams);\n                } catch (e) {\n                    console.error(e);\n                }\n            } \n\n            // 观察open属性变化\n            const moDialogOpen = new MutationObserver(function (mutationsList) {\n                mutationsList.forEach(mutation => {\n                    let eleDialog = mutation.target;\n                    if (mutation.type == 'attributes') {\n                        // 滚动条状态变化\n                        eleDialog.scrollbar();\n                    }\n                });\n            });\n            moDialogOpen.observe(dialog, {\n                attributes: true,\n                attributeFilter: ['open']\n            });\n\n            // 默认模式是关闭\n            dialog.closeMode = 'hide';\n            // 事件\n            dialog.events();\n        }\n\n        // 回调\n        dialog.dispatchEvent(new CustomEvent('connected', {\n            detail: {\n                type: 'ui-dialog'\n            }\n        }));\n\n        // 设置定义完毕标志量\n        dialog.setAttribute('defined', '');\n\n        dialog.isConnectedCallback = true;\n    };\n\n    // 弹框观察并注册\n    const funDialogInitAndWatching = function () {\n        const elesDialog = document.querySelectorAll('dialog');\n        elesDialog.forEach(item => {\n            funDialogRegist(item);\n        });\n        // 观察Dialog元素载入页面\n        var observerTips = new MutationObserver(function (mutationsList) {\n            // 此时不检测DOM变化\n            mutationsList.forEach(function (mutation) {\n                mutation.addedNodes.forEach(function (eleAdd) {\n                    if (eleAdd.matches && eleAdd.matches('dialog')) {\n                        funDialogRegist(eleAdd);\n                    } else if (eleAdd.querySelector) {\n                        eleAdd.querySelectorAll('dialog').forEach(item => {\n                            funDialogRegist(item);\n                        });\n                    }\n                });\n            });\n        });\n\n        observerTips.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    };\n\n    // 如果浏览器不支持<dialog>，则对出现在页面上的<dialog>元素进行注册\n    if (document.readyState != 'loading') {\n        funDialogInitAndWatching();\n    } else {\n        window.addEventListener('DOMContentLoaded', funDialogInitAndWatching);\n    }\n\n    return Component;\n})();\n\n\n// 为了直接使用\nwindow.Dialog = Dialog;\n\n// 可以 import\n// export default Dialog;\n\n/**\n * @Datalist.js\n * @author zhangxinxu\n * @version\n * Created: 16-03-28\n * edited: 20-07-30 edit by yanmeng\n * @description 多功能下拉数据列表\n **/\n\n// import './Follow.js';\n\nconst Datalist = (() => {\n\n    /**\n     * 数据下拉列表\n     * 类似于传统Autocomplete功能\n     * 仿HTML5原生datalist功能实现\n     * 支持静态呈现(基于现有HTML构建)和动态获取(本地存储或ajax请求)\n     */\n\n    // 常量变量\n    const DATALIST = 'datalist';\n    const SELECTED = 'selected';\n    const DISABLED = 'disabled';\n    const ACTIVE = 'active';\n    const REVERSE = 'reverse';\n\n    // 样式类名统一处理\n    const CL = {\n        add: (props) => ['ui', DATALIST].concat([props]).join('-'),\n        toString: () => `ui-${DATALIST}`\n    };\n\n    let objEventType = {\n        end: 'mouseup'\n    };\n\n    if ('ontouchstart' in document) {\n        objEventType = {\n            end: 'touchend'\n        };\n    }\n\n    /**\n     * 对输入框元素进行Datalist类扩展\n     */\n\n    class Datalist extends HTMLInputElement {\n        constructor () {\n            super();\n\n            if (!this.params) {\n                this.params = {};\n            }\n            if (!this.element) {\n                this.element = {};\n            }\n        }\n\n        /**\n         * 过滤HTML标签的方法\n         * @param  {String} str 需要过滤的HTML字符串\n         * @return {String}     返回过滤后的HTML字符串\n         */\n        static stripHTML (str) {\n            if (typeof str == 'string') {\n                return str.replace(/<\\/?[^<>]*>/g, '').replace(/<\\/?[^<>]*>/g, '');\n            }\n\n            return '';\n        }\n\n        /**\n         * 转义HTML标签的方法\n         * @param  {String} str 需要转义的HTML字符串\n         * @return {String}     转义后的字符串\n         */\n        static encodeHTML (str) {\n            if (typeof str == 'string') {\n                return str.replace(/<|&|>/g, function (matches) {\n                    return {\n                        '<': '&lt;',\n                        '>': '&gt;',\n                        '&': '&amp;'\n                    }[matches];\n                });\n            }\n\n            return '';\n        }\n\n        /**\n         * 反转义HTML标签的方法\n         * @param  {String} str 需要反转义的字符串\n         * @return {String}     反转义后的字符串\n         */\n        static decodeHTML (str) {\n            if (typeof str == 'string') {\n                return str.replace(/&lt;|&gt;|&amp;/gi, (matches) => {\n                    return {\n                        '&lt;': '<',\n                        '&gt;': '>',\n                        '&amp;': '&'\n                    }[matches.toLowerCase()];\n                });\n            }\n\n            return '';\n        }\n\n        // 多个参数快捷设置方法\n        setParams (options) {\n            Object.assign(this.params, options || {});\n        }\n\n        /**\n         * @param {Object} value 不同的数据类型统一为function类型\n         */\n        convertData (value) {\n            this.params.data = value || this.params.data;\n            // 从本地自动获得数据\n            if (this.params.data == 'auto') {\n                // 数据实时从<datalist>元素获取\n                let strAttrList = this.getAttribute('list');\n                if (strAttrList) {\n                // 走<datalist>元素获取数据\n                    let eleDatalist = document.getElementById(strAttrList);\n                    if (!eleDatalist) {\n                        // 有可能是内容在后面渲染，没来得及识别\n                        setTimeout(() => {\n                            if (document.getElementById(strAttrList)) {\n                                this.convertData();\n                            }\n                        }, 1);\n                        return;\n                    }\n                    // 去掉浏览器原生的行为\n                    this.removeAttribute('list');\n                    // 数据实时从<datalist>元素获取\n                    this.params.data = function () {\n                        return [].slice.call(eleDatalist.querySelectorAll('option')).map(function (eleOption) {\n                            let objAttr = {};\n\n                            [].slice.call(eleOption.attributes).forEach(function (objNameValue) {\n                                objAttr[objNameValue.name] = objNameValue.value;\n                            });\n\n                            // value和label是必须的\n                            // 降低filter中出错概率\n                            objAttr.value = objAttr.value || '';\n                            // 如果没有设置value值，尝试使用内容值作为value值\n                            if (!eleOption.hasAttribute('value')) {\n                                objAttr.value = eleOption.textContent || '';\n                            }\n                            objAttr.label = objAttr.label || '';\n\n                            // 将dataset值也合并到对象中\n                            let objDataset = eleOption.dataset;\n                            for (let strKey in objDataset) {\n                                if (strKey != 'value' && strKey != 'label') {\n                                    objAttr[strKey] = objDataset[strKey];\n                                } else {\n                                    objAttr[strKey + '2'] = objDataset[strKey];\n                                }\n                                \n                            }\n\n                            return objAttr;\n                        });\n                    };\n                    this.element.datalist = eleDatalist;\n                } else if (this.name && (this.autocomplete === '' || this.autocomplete == 'on')) {\n                    this.params.twice = true;\n                    // autocomplete交互占位符不参与\n                    this.params.placeholder = false;\n                    // 走本地存储获取数据，模拟浏览器autocomplete效果\n                    // 跟随浏览器autocomplete行为规范实现\n                    // 数据从本地localStorage实时获取\n                    this.params.data = () => {\n                        let data = [];\n                        // 本地获取\n                        let strList = localStorage[DATALIST + '-' + this.name];\n\n                        if (strList) {\n                            strList.split(',').forEach(function (value) {\n                                // value必须\n                                if (value && value.trim()) {\n                                    data.push({\n                                        label: '',\n                                        value: value\n                                    });\n                                }\n                            });\n                        }\n\n                        return data;\n                    };\n                } else {\n                    this.params.data =  function () {\n                        return [];\n                    };\n                }\n            } else if (this.params.data instanceof Array) {\n                // 2. 如果直接data参数\n                let array = this.params.data;\n                this.params.data = function () {\n                    return array;\n                };\n\n            } else if (typeof this.params.data == 'function') {\n                // 3. 如果是函数\n            } else if (typeof this.params.data == 'object' && this.params.data.url) {\n                // 4. 如果是ajax参数对象\n                let timerAjaxDatalist = null;\n                let objParams = {\n                    ...this.params.data\n                };\n                this.params.data = () => {\n                    // 清除延时，避免每次输入都请求\n                    clearTimeout(timerAjaxDatalist);\n\n                    // 搜索关键字的查询字段\n                    let strName = objParams.name || this.name || 'k';\n\n                    // 没有值的时候清空数据\n                    // 不请求\n                    let strValue = this.value.trim();\n\n                    if (strValue == '') {\n                        this.datalist = [];\n\n                        return [];\n                    }\n\n                    let objAjaxParams = new URLSearchParams(objParams.data);\n                    // 加入输入数据\n                    objAjaxParams.append(strName, strValue);\n\n                    // URL处理\n                    let strUrlAjax = objParams.url.split('#')[0];\n                    // URL拼接\n                    if (strUrlAjax.split('?').length > 1) {\n                        strUrlAjax = strUrlAjax + '&' + objAjaxParams.toString();\n                    } else {\n                        strUrlAjax = strUrlAjax + '?' + objAjaxParams.toString();\n                    }\n\n                    // 有2个参数有内置，需要合并\n                    // 1是搜索查询参数\n                    // 2是成功后的回调\n                    let funAjax = async () => {\n                        const response = await fetch(strUrlAjax);\n                        this.setAttribute('aria-busy', 'true');\n                        const json = await response.json();\n                        this.removeAttribute('aria-busy');\n\n                        if (json && json.data) {\n                            let jsonData = json.data;\n                            // encode转义处理\n                            if (this.params.encode && jsonData.map) {\n                                jsonData = jsonData.map(obj => {\n                                    if (obj.value) {\n                                        obj.value = Datalist.encodeHTML(obj.value);\n                                    }\n                                    return obj;\n                                });\n                            }\n                            this.refresh(this.params.filter.call(this, jsonData, strValue));\n                            // 成功回调\n                            if (objParams.success) {\n                                objParams.success(json);\n                            }\n                        } else if (objParams.error) {\n                            objParams.error(json);\n                        }\n                    };\n                    // 请求保护，200毫秒延迟判断\n                    timerAjaxDatalist = setTimeout(funAjax, 200);\n\n                };\n                // autocomplete交互占位符不参与\n                this.params.placeholder = false;\n                // 边缘超出不重定位\n                if (!this.dataset.edgeAdjust) {\n                    this.dataset.edgeAdjust = 'false';\n                }\n            }\n        }\n\n        /**\n         * 本地存储输入框的值\n         * @return {Object} 返回当前输入框元素\n         */\n        store () {\n            // 元素属性值\n            const strValue = this.val();\n            const {\n                name: strName\n            } = this;\n\n            // 只有有值的时候才本地记忆\n            if (strValue && strName) {\n                // 本地获取\n                let arrList = (localStorage[`${DATALIST}-${strName}`] || '').split(',');\n                // 如果当前数据并未保存过\n                const numIndexMatch = arrList.indexOf(strValue);\n                if (numIndexMatch == -1) {\n                    // 新值，前面插入\n                    arrList.unshift(strValue);\n                } else if (numIndexMatch != 0) {\n                    // 如果当前匹配内容不是首位，顺序提前\n                    // 把需要提前的数组弄出来\n                    let arrSplice = arrList.splice(numIndexMatch, 1);\n                    // 重新连接\n                    arrList = [arrSplice, ...arrList];\n                }\n\n                // 更改对应的本地存储值\n                localStorage[`${DATALIST}-${strName}`] = arrList.join();\n            }\n\n            return this;\n        }\n\n        /**\n         * 清除本地存储的值\n         * @param  {String} value value参数存在3种逻辑，具体参见方法内注释\n         * @return {Object}       返回当前输入框元素\n         */\n        removeStore (value) {\n            // value参数存在下面3种逻辑\n            // 1. 字符串内容，表示移除本地该值数据（如果有）\n            // 2. true，表示清空本地对应该存储\n            // 3. undefined, 表示使用输入框的value值作为移除对象\n\n            // 元素属性值\n            const strName = this.name;\n            // 值\n            const strValue = value || this.val();\n            // 只有data为auto时候才本地记忆\n            if (strValue && strName) {\n                if (strValue === true) {\n                    localStorage.removeItem(`${DATALIST}-${strName}`);\n                } else if (typeof strValue == 'string') {\n                    // 本地获取\n                    let arrList = (\n                        localStorage[`${DATALIST}-${strName}`] || ''\n                    ).split(',');\n                    // 当前数据位置\n                    const numIndexMatch = arrList.indexOf(strValue);\n                    if (numIndexMatch != -1) {\n                        // 删除\n                        arrList.splice(numIndexMatch, 1);\n                        // 更改对应的本地存储值\n                        localStorage[`${DATALIST}-${strName}`] = arrList.join();\n                    }\n                }\n            }\n\n            return this;\n        }\n\n        /**\n         * 刷新列表\n         * @param  {Array} data 刷新列表的数据，可缺省，缺省则调用API中的data()方法获取\n         * @return {Object}     返回当前输入框元素\n         */\n        refresh (data) {\n            // 元素们\n            let eleTarget = this.element.target;\n\n            if (!eleTarget) {\n                this.create();\n                eleTarget = this.element.target;\n            }\n            // 此时输入框的值\n            const strValue = this.val();\n            // 显示的列表数据\n            let arrData = data;\n\n            // 列表的刷新\n            // 根据data和filter得到最终呈现的数据\n            if (typeof arrData == 'undefined') {\n                if (typeof this.params.data != 'function') {\n                    this.convertData();\n                }\n                if (typeof this.params.data != 'function') {\n                    return this;\n                }\n                arrData = this.params.data();\n                if (!arrData) {\n                    return this;\n                }\n                if (this.params.encode && arrData.map) {\n                    arrData = arrData.map(obj => {\n                        if (obj.value) {\n                            obj.value = Datalist.encodeHTML(obj.value);\n                        }\n                        return obj;\n                    });\n                }\n                arrData = this.params.filter.call(this, arrData, strValue);\n                if (arrData instanceof Array == false) {\n                    return this;\n                }\n            }\n            // max是否通过原生的results属性设置\n            const strResults = this.getAttribute('results');\n            const numResults = Number(strResults);\n            if (strResults) {\n                arrData = arrData.slice(0, numResults);\n            }\n            // 暴露最终使用的列表数据\n            this.datalist = arrData;\n            // 列表HTML组装\n            let strHtmlList = '';\n            if (arrData && arrData.length) {\n                // 先不匹配任何列表项\n                this.params.index = -1;\n\n                // 占位符\n                const strAttrPlaceholder = this.getAttribute('placeholder');\n                const strParamPlaceholder = this.params.placeholder;\n\n                // 拼接列表字符内容\n                arrData.forEach((objData, numIndex) => {\n                    let strValueEncode = objData.value || '';\n                    // 过滤HTML标签和换行\n                    let strValueStrip = Datalist.stripHTML(strValueEncode).trim().replace(/\\n/g, '');\n                    let strLabelStrip = Datalist.stripHTML(objData.label || '').trim().replace(/\\n/g, '');\n\n                    let strClassList = '';\n                    if (\n                        (strValue && strValueStrip == strValue) ||\n                        (!strValue &&\n                            strValueStrip == strAttrPlaceholder &&\n                            strValueStrip != strParamPlaceholder)\n                    ) {\n                        strClassList = ` ${SELECTED}`;\n                        // 这个键盘操作时候需要\n                        this.params.index = numIndex;\n                    }\n                    // 禁用态，禁用态和选中态不能同时存在\n                    if (objData[DISABLED] || typeof objData[DISABLED] == 'string') {\n                        strClassList = ' ' + DISABLED;\n                    }\n\n                    if (objData.label) {\n                        // 虽然使用其他标签模拟<datalist>\n                        // 但是，一些属性值，还是遵循HTML规范\n                        // label应该前置，可以通过相邻选择器控制后面内容的UI\n                        strHtmlList = `${strHtmlList}<li class=\"${CL.add(\n                            'option'\n                        )}${strClassList}\" data-value=\"${strValueStrip}\" label=\"${strLabelStrip}\" data-index=\"${numIndex}\"><label class=\"${CL.add(\n                            'label'\n                        )}\">${objData.label}</label><span class=\"${CL.add(\n                            'value'\n                        )}\">${strValueEncode}</span></li>`;\n                    } else {\n                        // 但是，一些属性值，还是遵循HTML规范\n                        strHtmlList = `${strHtmlList}<li class=\"${CL.add(\n                            'option'\n                        )}${strClassList}\" data-value=\"${strValueStrip}\" data-index=\"${numIndex}\"><span class=\"${CL.add(\n                            'value'\n                        )}\">${strValueEncode}</span></li>`;\n                    }\n                });\n            }\n\n            if (strHtmlList != '') {\n                strHtmlList = `<ul class=\"${CL.add(\n                    DATALIST\n                )}\">${strHtmlList}</ul>`;\n            }\n\n            eleTarget.innerHTML = strHtmlList;\n\n            const eleSelected = eleTarget.querySelector('.' + SELECTED);\n            if (this.display == true && eleSelected) {\n                // 选中元素距离容器上边缘的位置\n                const numOffsetTop =\n                    eleSelected.offsetTop - (eleTarget.lastScrollTop || 0);\n\n                // 如果不可见\n                if (\n                    numOffsetTop < 0 ||\n                    numOffsetTop >= eleSelected.parentElement.clientHeight\n                ) {\n                    eleSelected.parentElement.scrollTop = eleSelected.offsetTop;\n                    eleTarget.lastScrollTop = eleSelected.offsetTop;\n                } else {\n                    eleSelected.parentElement.scrollTop =\n                        eleTarget.lastScrollTop || 0;\n                }\n            }\n\n            if (strHtmlList) {\n                if (this.display == false) {\n                    this.show();\n                }\n                // 重定位\n                this.position();\n            } else if (this.display == true) {\n                this.hide();\n            }\n        }\n\n        /**\n         * 创建下拉面板\n         * 方法私有\n         * @return {Object} 返回当前输入框元素\n         */\n        create () {\n            // list属性值需要和创建的列表元素id对应获取\n\n            // 原生HTML5应该是对应datalist元素\n            // 但1. datalist无法自定义UI; 2. IE9-不支持；3. 一些bug存在\n            // 所以，我们使用普通的ul列表元素模拟\n            if (!this.element.target) {\n                // 看看是否有list属性值\n                let strId = this.element.datalist && this.element.datalist.id;\n                if (!strId) {\n                    // 如果没有关联id，创建之\n                    strId = `lulu_${Math.random()}`.replace('0.', '');\n                    // 设置关联id\n                    this.setAttribute('data-target', strId);\n                }\n\n                const eleTarget = document.createElement('div');\n                eleTarget.classList.add(CL);\n                eleTarget.addEventListener('click', (event) => {\n                    if (event.touches && event.touches.length) {\n                        event = event.touches[0];\n                    }\n\n                    if (!event.target) {\n                        return;\n                    }\n\n                    const eleClicked = event.target.closest('li');\n\n                    if (eleClicked && eleClicked.classList.contains(DISABLED) == false) {\n                        const strIndex = eleClicked.getAttribute('data-index');\n                        this.params.index = Number(strIndex);\n                        // 赋值并关闭列表\n                        this.val(this.datalist[this.params.index]);\n                        this.hide();\n\n                        this.dispatchEvent(new CustomEvent('select', {\n                            detail: this.datalist[this.params.index]\n                        }));\n                    }\n                });\n\n                // 方便区分不同的数据列表\n                if (this.id) {\n                    eleTarget.classList.add(\n                        CL.add(\n                            this.id\n                                .replace(\n                                    /[A-Z]/g,\n                                    (matches) => `-${matches.toLowerCase()}`\n                                )\n                                .replace(/^-+|-+$/g, '')\n                        )\n                    );\n                }\n                // 载入页面\n                document.body.appendChild(eleTarget);\n\n                // 元素暴露\n                this.element.target = eleTarget;\n\n                // 默认display态\n                this.display = false;\n\n                this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n            }\n\n            return this;\n        }\n\n        /**\n         * 输入框赋值或者取值\n         * @param  {String} value 赋予输入框的值，如果缺省，则表示取值\n         * @param  {String} label 赋予输入框的值，如果缺省，则表示取值\n         * @return {Object}       返回当前输入框元素\n         */\n        val (props = {}) {\n            const {value} = props;\n            // 元素们\n\n            if (typeof value == 'undefined') {\n                // 取值\n                return Datalist.encodeHTML(this.value.trim());\n            }\n\n            const strValue = value.toString();\n\n            // 赋值\n            this.value = Datalist.decodeHTML(Datalist.stripHTML(strValue.trim()));\n\n            // 事件\n            if (strValue != this.oldValue) {\n                // 赋值时候触发的回调事件们\n                this.dispatchEvent(\n                    new CustomEvent('change', {\n                        bubbles: true,\n                        detail: {...props}\n                    })\n                );\n                // 由于输入框可输入，因此input事件是一定要触发的\n                this.dispatchEvent(\n                    new CustomEvent('input', {\n                        bubbles: true,\n                        detail: {...props}\n                    })\n                );\n            }\n\n            this.oldValue = strValue;\n\n            return this;\n        }\n\n        /**\n         * 一些事件\n         * @return {Object} 返回当前输入框元素\n         */\n        events () {\n            // 事件\n            // 元素们\n            if (document.activeElement != this) {\n                this.isFocus = false;\n            }\n\n            this.addEventListener('blur', function () {\n                this.isFocus = false;\n            });\n\n            this.addEventListener('focus', function () {\n                if (window.isKeyEvent) {\n                    this.click();\n                }\n            });\n\n            this.addEventListener('click', () => {\n                if (this.display == false) {\n                    // autocomplete模式不执行占位符交互\n                    if (this.params.placeholder === true) {\n                        this.focusValue = this.value.trim();\n                        if (this.focusValue) {\n                            this.setAttribute('placeholder', this.focusValue);\n                        }\n                        this.value = '';\n                    }\n\n                    if (this.params.twice == true && this.isFocus == true) {\n                        this.refresh();\n                    } else if (!this.params.twice) {\n                        this.refresh();\n                    }\n                }\n\n                this.isFocus = true;\n            });\n\n            this.addEventListener('input', (event) => {\n                if (event.isTrusted === false) {\n                    return;\n                }\n                // 输入行为的时候，如果内容为空，内隐藏列表\n                if (this.params.placeholder == true || this.value.trim()) {\n                    this.refresh();\n                } else {\n                    this.hide();\n                }\n            });\n\n            this.addEventListener('keydown', (event) => {\n                // data为当前列表使用的数据\n                // index表示当前选中列表的索引值\n                let arrData = this.datalist;\n                let numIndex = this.params.index;\n\n                // 面板元素\n                const eleTarget = this.element.target;\n\n                if (!eleTarget) return;\n\n                const eleSelected = eleTarget.querySelector(`.${SELECTED}`);\n\n                switch (event.code) {\n                    case 'Escape':\n                    case 'Enter': {\n                        // ESC-27 ENTER-13\n                        if (this.display == true) {\n                            // 列表隐藏\n                            this.hide();\n\n                            event.preventDefault();\n\n                            if (eleSelected) {\n                                eleSelected.click();\n                                // 当键盘选值的时候，阻止默认行为\n                                // 例如ENTER表单提交，ESC输入框内容清空\n                                event.preventDefault();\n                                // 文本内容从选中态改为focus态\n                                setTimeout(function () {\n                                    const eleInput = this;\n                                    if (this.setSelectionRange) {\n                                        try {\n                                            // 部分输入框类型，例如email, number不支持selection\n                                            eleInput.setSelectionRange(\n                                                eleInput.value.length,\n                                                eleInput.value.length\n                                            );\n                                        } catch (e) {\n                                            eleInput.value = eleInput.value;\n                                        }\n                                    } else {\n                                        eleInput.value = eleInput.value;\n                                    }\n\n                                    // 触发Validate.js中的验证\n                                    eleInput.dispatchEvent(\n                                        new CustomEvent('input', {\n                                            bubbles: true,\n                                            detail: arrData[numIndex]\n                                        })\n                                    );\n                                }, 17);\n                            }\n                        }\n\n                        break;\n                    }\n                    case 'ArrowUp':\n                    case 'ArrowDown': {\n                        // UP-38\n                        if (this.display == true && arrData && arrData.length) {\n                            event.preventDefault();\n\n                            // 过滤出可以用来选中的索引\n                            const arrIndexMatchAble = [];\n                            arrData.forEach((objData, numIndexMatch) => {\n                                if (\n                                    !objData[DISABLED] &&\n                                    objData[DISABLED] !== ''\n                                ) {\n                                    arrIndexMatchAble.push(numIndexMatch);\n                                }\n                            });\n\n                            // 全部列表都禁用，忽略\n                            if (arrIndexMatchAble.length == 0) return;\n\n                            // 然后索引往后挪一位\n                            let numIndexFilterMatch = arrIndexMatchAble.indexOf(\n                                numIndex\n                            );\n\n                            if (event.code == 'ArrowUp') {\n                                numIndexFilterMatch--;\n                            } else {\n                                numIndexFilterMatch++;\n                            }\n\n                            if (numIndexFilterMatch < 0) {\n                                numIndex =\n                                    arrIndexMatchAble[\n                                        arrIndexMatchAble.length - 1\n                                    ];\n                            } else if (\n                                numIndexFilterMatch >\n                                arrIndexMatchAble.length - 1\n                            ) {\n                                numIndex = arrIndexMatchAble[0];\n                            } else {\n                                numIndex =\n                                    arrIndexMatchAble[numIndexFilterMatch];\n                            }\n                        }\n\n                        // 上下键的时候，列表数据不动态获取和过滤\n                        if (arrData[numIndex]) {\n                            const curValue = arrData[numIndex];\n                            this.val(curValue);\n                        }\n\n                        this.select();\n\n                        this.refresh(arrData);\n\n                        break;\n                    }\n                    case 'Delete': {\n                        // DELETE-46\n                        if (\n                            this.display == true &&\n                            this.params.twice == true &&\n                            eleSelected\n                        ) {\n                            let strValueSelected = eleSelected.getAttribute(\n                                'data-value'\n                            );\n                            // 清除本地存储内容\n                            this.removeStore(strValueSelected);\n                            // data中对应对象删除\n                            arrData = arrData.filter(\n                                (objData) => objData.value != strValueSelected\n                            );\n                            // 阻止默认删除行为\n                            event.preventDefault();\n\n                            // 获取现在应该显示的值\n                            const objDataLeave =\n                                arrData[numIndex] || arrData[numIndex - 1];\n                            if (objDataLeave) {\n                                this.val(objDataLeave.value);\n                                // 列表刷新\n                                this.refresh(arrData);\n                            } else {\n                                // 全部删除\n                                this.value = '';\n                                // 列表隐藏\n                                this.hide();\n                            }\n                        }\n\n                        break;\n                    }\n                }\n            });\n\n            // 表单记忆，模拟原生autocomplete行为\n            if (this.form && this.params.data == 'auto' && this.name && (this.autocomplete == '' || this.autocomplete == 'on')) {\n                this.form.addEventListener('submit', () => {\n                    this.store();\n                });\n            }\n\n            // 点击空白处隐藏\n            document.addEventListener(objEventType.end, (event) => {\n                if (event.touches && event.touches.length) {\n                    event = event.touches[0];\n                }\n\n                const eleClicked = event.target;\n                const eleTarget = this.element.target;\n\n                if (\n                    eleTarget &&\n                    eleClicked.nodeType == 1 &&\n                    eleTarget.contains(eleClicked) == false\n                ) {\n                    this.hide();\n                }\n\n                if (eleClicked != this && this.value.trim() == '') {\n                    if (this.focusValue) {\n                        this.value = this.focusValue;\n                    } else if (typeof this.params.placeholder == 'string' && this.params.placeholder !== 'auto') {\n                        this.setAttribute('placeholder', this.params.placeholder);\n                    }\n                }\n            });\n\n            // 浏览器窗口改变重定位\n            window.addEventListener('resize', () => {\n                if (this.display == true) {\n                    this.position();\n                }\n            });\n\n            return this;\n        }\n\n        /**\n         * 下拉面板的定位\n         * @return {Object} 返回当前实例\n         */\n        position () {\n            // 元素们\n            const eleTarget = this.element.target;\n\n            if (this && eleTarget) {\n                this.follow(eleTarget);\n\n                if (this.display == true) {\n                    this.classList.add(ACTIVE);\n                }\n            }\n\n            // 列表的定位\n            return this;\n        }\n\n        /**\n         * 下拉面板显示\n         * @return {Object} 返回当前实例\n         */\n        show () {\n            // 元素们\n            let eleTarget = this.element.target;\n\n            if (!eleTarget) {\n                this.create();\n                eleTarget = this.element.target;\n            }\n\n            // 当前的显示状态\n            const isDisplay = this.display;\n\n            // 列表的宽度\n            let numWidthTarget = this.params.width;\n            const numWidthTrigger =\n                this.getBoundingClientRect().width ||\n                this.clientWidth;\n\n            if (numWidthTarget == 'auto') {\n                numWidthTarget = numWidthTrigger;\n            } else if (typeof numWidthTarget == 'function') {\n                numWidthTarget = numWidthTarget.call(\n                    this,\n                    eleTarget\n                );\n            }\n\n            if (numWidthTarget != 'auto' && typeof numWidthTarget != 'number') {\n                numWidthTarget = numWidthTrigger;\n            }\n\n            eleTarget.style.display = 'block';\n            eleTarget.style.width = numWidthTarget + 'px';\n\n            if (\n                typeof eleTarget.lastScrollTop == 'number' &&\n                eleTarget.querySelector('ul')\n            ) {\n                eleTarget.querySelector('ul').scrollTop =\n                    eleTarget.lastScrollTop;\n            }\n\n            // 显示状态标记\n            this.display = true;\n\n            // 定位\n            this.position();\n\n            // 显示回调，当之前隐藏时候才触发\n            if (isDisplay == false) {\n                this.dispatchEvent(new CustomEvent('show', {\n                    detail: {\n                        type: 'ui-datalist'\n                    }\n                }));\n            }\n        }\n\n        /**\n         * 下拉面板隐藏\n         * @return {Object} 返回当前实例\n         */\n        hide () {\n            // 元素们\n            const eleTarget = this.element.target;\n\n            if (eleTarget && this.display == true) {\n                // 记住滚动高度\n                if (eleTarget.querySelector('ul')) {\n                    eleTarget.lastScrollTop = eleTarget.querySelector(\n                        'ul'\n                    ).scrollTop;\n                }\n\n                eleTarget.style.display = 'none';\n                eleTarget.classList.remove(REVERSE);\n\n                // 隐藏回调\n                this.dispatchEvent(new CustomEvent('hide', {\n                    detail: {\n                        type: 'ui-datalist'\n                    }\n                }));\n            }\n\n            this.classList.remove(ACTIVE);\n            this.classList.remove(REVERSE);\n\n            // 隐藏状态标记\n            this.display = false;\n        }\n\n        // 元素进入页面时候的生命周期函数执行\n        connectedCallback () {\n            // 避免重复初始化\n            if (this.isConnectedCallback) {\n                return;\n            }\n            this.params = Object.assign(this.params, {\n                filter (data, value) {\n                    // this是当前输入框元素\n                    const arr = [];\n\n                    if (!data || !data.forEach) {\n                        return arr;\n                    }\n\n                    // 如果设置了filter=\"none\"\n                    // 直接返回原始data\n                    if (this.getAttribute('filter') == 'none') {\n                        return data;\n                    }\n\n                    // 默认是从头到尾完全字符匹配\n                    data.forEach(function (obj) {\n                        if (!value || obj.value.indexOf(value) == 0) {\n                            arr.push(obj);\n                        }\n                    });\n\n                    return arr;\n                },\n                encode: true,\n                index: -1,\n                data: 'auto',\n                // 默认值是'auto'，还支持true/和false\n                placeholder: 'auto',\n                width: 'auto'\n            });\n\n            // 记住输入框默认的placeholder值\n            const strAttrPlaceholder = this.getAttribute('placeholder');\n            if (strAttrPlaceholder) {\n                this.params.placeholder = strAttrPlaceholder;\n            }\n            this.display = false;\n            // 占位符交互标示量\n            if (this.params.placeholder == 'auto') {\n                this.params.placeholder = true;\n            }\n            // 事件绑定\n            this.events();\n            // 列表数据的格式转换\n            this.convertData();\n            // 去掉浏览器原生的行为\n            // 务必灭了浏览器内置的autocomplete 谷歌off 会带出密码\n            if (this.form) {\n                this.setAttribute('autocomplete', 'off');\n            } else {\n                this.setAttribute('autocomplete', 'new-password');\n            }\n\n            // 全局事件\n            this.dispatchEvent(new CustomEvent('connected', {\n                detail: {\n                    type: 'ui-datalist'\n                }\n            }));\n\n            this.isConnectedCallback = true;\n\n            // 观察<datalist>元素的变化，实时更新\n            setTimeout(() => {\n                if (this.element.datalist) {\n                    new MutationObserver(() => {\n                        if (this.display == true) {\n                            this.refresh();\n                        }\n                    }).observe(this.element.datalist, {\n                        childList: true,\n                        subtree: true\n                    });\n                }\n            }, 20);\n        }\n    }\n\n    return Datalist;\n})();\n\nif (!customElements.get('ui-datalist')) {\n    customElements.define('ui-datalist', Datalist, {\n        extends: 'input'\n    });\n}\n\n// export default Datalist;\n\n/**\n * @DateTime.js\n * @author zhangxinxu\n * @version\n * @created: 15-07-03\n * @edited:   19-11-12\n * @edited:    20-07-27 edit by wanghao\n */\n\n// import './Follow.js';\n\n\n/**\n * 日期，时间选择器\n * 基于HTML5时间类输入框\n * @example is=\"ui-datetime\"\n * @trigger 触发的元素，可以是文本框也可以是文本框容器(父级)\n * @options 可选参数\n */\nconst DateTime = (() => {\n    // 样式类名统一处理\n    const CL = {\n        toString: () => 'ui-datetime'\n    };\n    ['date', 'range', 'day', 'year', 'month', 'hour', 'minute', 'time', 'datetime'].forEach((key) => {\n        CL[key] = (...args) => ['ui', key, ...args].join('-');\n    });\n\n    const SELECTED = 'selected';\n    const ACTIVE = 'active';\n    const regDate = /-|\\//g;\n\n    // 拓展方法之字符串变时间对象\n    String.prototype.toDate = function () {\n        let year, month, day;\n        const arrDate = this.replace(/年|月|日/g, '-').split(regDate);\n        // 字符串变数值\n        year = arrDate[0] * 1;\n        month = arrDate[1] || 1;\n        day = arrDate[2] || 1;\n        // 年份需要是数值字符串\n        if (!year) {\n            return new Date();\n        }\n\n        return new Date(year, month - 1, day);\n    };\n\n    String.prototype.toTime = function () {\n        let arrTime = this.trim().split(':').map((hm, index) => {\n            if (!hm || /\\D/.test(hm))  {\n                return '';\n            }\n\n            if (hm < 0) {\n                return '00';\n            } else if (index === 0) {\n                if (hm > 23) {\n                    hm = '23';\n                }\n            } else if (hm > 59) {\n                hm = '59';\n            }\n\n            return hm.padStart(2, '0');\n        }).filter(_ => _).slice(0, 3);\n\n        // 至少有时分\n        if (arrTime.length == 1) {\n            arrTime.push('00');\n        }\n\n        return arrTime;\n    };\n\n    // 日期对象变成年月日数组\n    Date.prototype.toArray = function () {\n        let year = this.getFullYear();\n        let month = this.getMonth() + 1;\n        let date = this.getDate();\n        if (month < 10) {\n            month = `0${month}`;\n        }\n        if (date < 10) {\n            date = `0${date}`;\n        }\n\n        return [year, month, date];\n    };\n\n\n    class Component extends HTMLInputElement {\n        constructor () {\n            super();\n        }\n\n        minMaxConvert (value) {\n            // 直接设置为数值\n            if (typeof value == 'number' && Number.isInteger(value)) {\n                // 认为是时间戳\n                if (value > 10000000) {\n                    value = new Date(value);\n                } else if (value < 9999) {\n                    // 认为是年份\n                    value = String(value);\n                }\n            }\n\n            // 日期和时间\n            let arrDate = [];\n            let arrHourMin = [];\n\n            // value可以是Date对象\n            if (value.toArray) {\n                arrDate = value.toArray();\n                // 此时的对应的时间值\n                arrHourMin = (value.getHours() + ':' + value.getMinutes()).toTime();\n            } else if (value && typeof value == 'string') {\n                const arrDateTime = value.split(/\\s+|T/);\n                arrDate = arrDateTime[0].toDate().toArray();\n\n                if (arrDateTime[1] && arrDateTime[1].includes(':')) {\n                    arrHourMin = arrDateTime[1].toTime();\n                }\n            }\n\n            let strType = this.getAttribute('type') || 'date';\n\n            // 赋值\n            if (strType == 'date' || strType == 'date-range') {\n                value = arrDate.join('-');\n            } else if (strType == 'year') {\n                value = arrDate[0];\n            } else if (strType == 'month' || strType == 'month-range') {\n                value = arrDate.slice(0, 2).join('-');\n            } else if (/^datetime/.test(strType)) {\n                value = arrDate.join('-') + ' ' + arrHourMin.join(':');\n            } else  {\n                if (value.toArray) {\n                    // 其他日期类型转换成 时:分 模式\n                    value = value.getHours() + ':' + value.getMinutes();\n                }\n                // 补0的处理\n                let arrHourMin = value.toTime();\n                // 时间类型\n                if (!arrHourMin[0]) {\n                    return '';\n                }\n\n                value = arrHourMin.join(':');\n            }\n\n            return value;\n        }\n\n        get min () {\n            let strAttrMin = this.getAttribute('min') || '';\n            if (strAttrMin) {\n                return this.minMaxConvert(strAttrMin).toString();\n            }\n            return strAttrMin;\n        }\n\n        set min (value) {\n            if (!value) {\n                this.removeAttribute('min');\n                return;\n            }\n\n            this.setAttribute('min', this.minMaxConvert(value));\n        }\n\n        get max () {\n            let strAttrMax = this.getAttribute('max') || '';\n            if (strAttrMax) {\n                return this.minMaxConvert(strAttrMax).toString();\n            }\n            return strAttrMax;\n        }\n\n        set max (value) {\n            if (!value) {\n                this.removeAttribute('max');\n                return;\n            }\n\n            this.setAttribute('max', this.minMaxConvert(value));\n        }\n        get step () {\n            let strStep = this.getAttribute('step');\n            let strType = this.params.type;\n            let numStep = Number(strStep);\n            if (strStep && /^\\d+$/.test(strStep)) {\n                if (strType == 'time') {\n                    if (strStep > 60) {\n                        if (strStep % 60 != 0 || strStep / 60 > 30) {\n                            numStep = 1;\n                        }\n                    } else if (numStep > 30) {\n                        numStep = 1;\n                    }\n                } else if (strType == 'hour') {\n                    if (numStep > 12) {\n                        numStep = 1;\n                    }\n                } else if (strType == 'minute' && numStep > 30) {\n                    numStep = 1;\n                }\n\n                return numStep;\n            }\n            return '';\n        }\n\n        set step (value) {\n            if (!value) {\n                this.removeAttribute('step');\n                return;\n            }\n\n            this.setAttribute('step', value);\n        }\n\n        /**\n         * 事件\n         * @return {[type]} [description]\n         */\n        events () {\n            // 具体元素们\n            const eleContainer = this.element.target;\n\n            // 点击容器的事件处理\n            eleContainer.addEventListener('click', (event) => {\n                // IE可能是文件节点\n                if (event.target.nodeType != 1 || !event.target.closest) {\n                    return;\n                }\n\n                const eleClicked = event.target.closest('a, button');\n                if (!eleClicked) {\n                    return;\n                }\n                // 各个分支中可能会用到的变量\n                let numYear = 0;\n                let numMonth = 0;\n                // var numDate = 0;\n                let numHour = 0;\n                let numDay = 0;\n                // 日期范围\n                let arrRange = [];\n                // 根据选中状态决定新的状态\n                let dataRange;\n                // 按钮类型\n                let strTypeButton = '';\n\n                // 选择的日期类型\n                const strType = eleContainer.dataset.type;\n\n                // 各种事件\n                switch (strType) {\n                    case 'date': {\n                        // 日期选择主体\n                        // 1. 前后月份选择\n                        if (/prev|next/.test(eleClicked.className)) {\n                            numMonth = eleClicked.dataset.month;\n\n                            // 设置选择月份\n                            // 这样可以获得目标月份对应的日期数据\n                            // 就是下面this.getMonthDay做的事情\n                            this[SELECTED][1] = numMonth * 1;\n\n                            // 日期和月份要匹配，例如，不能出现4月31日\n                            // arrMonthDay是一个数组，当前年份12个月每月最大的天数\n                            const arrMonthDay = this.getMonthDay(this[SELECTED]);\n\n                            // 切分月份\n                            // 日期正常是不会变化的\n                            // 但是类似31号这样的日子不是每个月都有的\n                            // 因此，需要边界判断\n                            // 下面这段逻辑就是做这个事情的\n\n                            // 1. 当前月份最大多少天\n                            const numDayMax = (() => {\n                                if (numMonth - 1 < 0) {\n                                    return arrMonthDay[11];\n                                } else if (numMonth > arrMonthDay.length) {\n                                    return arrMonthDay[0];\n                                }\n\n                                return arrMonthDay[numMonth - 1];\n                            })();\n\n                            // 2. 之前选择的天数\n                            numDay = this[SELECTED][2];\n                            // 之前记住的日期\n                            const numDayOverflow = eleContainer.dataDayOverflow;\n                            // 例如，我们超出日期是31日，如果月份可以满足31日，使用31日\n                            if (numDayOverflow) {\n                                this[SELECTED][2] = Math.min(numDayOverflow, numDayMax);\n                            } else if (this[SELECTED][2] > numDayMax) {\n                                this[SELECTED][2] = numDayMax;\n\n                                // 这里是对体验的升级，\n                                // 虽然下月份变成了30号，但是再回来时候，原来的31号变成了30号\n                                // 不完美，我们需要处理下\n                                // 通过一个变量记住，点击item项的时候，移除\n                                // 且只在第一次的时候记住\n                                // 因为28,29,30,31都可能出现，每次记忆会混乱\n                                eleContainer.dataDayOverflow = numDay;\n                            }\n\n                            // 更新选择的月日数据\n                            this[SELECTED] = this[SELECTED].join('-').toDate().toArray();\n\n                            // 刷新\n                            this.date();\n\n                            // 如果在时间范围内\n                            if (eleContainer.querySelector(`.${SELECTED}[href]`)) {\n                                this.setValue();\n                            }\n                        } else if (/item/.test(eleClicked.className)) {\n                            // 选择某日期啦\n                            numDay = eleClicked.innerHTML;\n\n                            // 含有非数字，认为是今天\n                            if (/\\D/.test(numDay)) {\n                                // 今天\n                                this[SELECTED] = new Date().toArray();\n                            } else {\n                                if (numDay < 10) {\n                                    numDay = `0${numDay}`;\n                                }\n                                // 修改全局\n                                this[SELECTED][2] = numDay;\n                            }\n\n                            // 赋值\n                            this.setValue();\n                            // 隐藏\n                            this.hide();\n\n                            delete eleContainer.dataDayOverflow;\n                        } else if (eleClicked.dataset.type == 'month') {\n                            // 切换到年份选择\n                            this.month();\n                        }\n                        break;\n                    }\n                    case 'date-range': {\n                        // 区域选择\n                        // 1. 前后月份选择\n                        if (/prev|next/.test(eleClicked.className)) {\n                            numMonth = eleClicked.dataset.month * 1;\n\n                            arrRange = eleContainer.dataDate || this[SELECTED][0];\n\n                            // 跟其他面板不同，这里只刷新，点击确定再赋值\n                            eleContainer.dataDate = new Date(arrRange[0], numMonth - 1, 1).toArray();\n                            // 之前arrRange[2]存在跨多月风险，尤其31号的日子\n                            // 刷新\n                            this['date-range']();\n                        } else if (/item/.test(eleClicked.className)) {\n                            // 选择某日期\n                            // 获得选中的年月日\n                            numYear = eleClicked.dataset.year;\n                            numMonth = eleClicked.dataset.month;\n                            numDay = eleClicked.innerHTML;\n\n                            // 位数不足补全\n                            if (numMonth < 10) {\n                                numMonth = `0${numMonth}`;\n                            }\n                            if (numDay < 10) {\n                                numDay = `0${numDay}`;\n                            }\n                            // 根据选中状态决定新的状态\n                            dataRange = this[SELECTED];\n                            if (dataRange[0].join() == dataRange[1].join()) {\n                                // 如果之前前后日期一样，说明只选中了一个日期\n                                // 根据前后顺序改变其中一个日期\n                                if (numYear + numMonth + numDay > dataRange[0].join('')) {\n                                    // 新时间靠后\n                                    dataRange[1] = [numYear, numMonth, numDay];\n                                } else {\n                                    dataRange[0] = [numYear, numMonth, numDay];\n                                }\n                            } else {\n                                // 如果前后时间不一样，说明现在有范围\n                                // 则取消范围，变成单选\n                                dataRange = [[numYear, numMonth, numDay], [numYear, numMonth, numDay]];\n                            }\n                            this[SELECTED] = dataRange;\n\n                            this['date-range']();\n                        } else if (/button/.test(eleClicked.className)) {\n                            strTypeButton = eleClicked.dataset.type;\n                            if (strTypeButton == 'primary') {\n                                // 点击确定按钮\n                                // 赋值\n                                this.setValue();\n                                // 修改存储值\n                                this.dataRangeSelected = this[SELECTED];\n                                // 关闭浮层\n                                this.hide();\n                            } else if (strTypeButton == 'normal') {\n                                // 重置选中值\n                                if (this.dataRangeSelected) {\n                                    this[SELECTED] = this.dataRangeSelected;\n                                }\n                                // 关闭浮层\n                                this.hide();\n                            }\n                        }\n                        break;\n                    }\n                    case 'month-range': {\n                        // 区域选择\n                        // 1. 前后年份选择\n                        if (/prev|next/.test(eleClicked.className)) {\n                            numYear = eleClicked.dataset.year * 1;\n\n                            arrRange = eleContainer.dataDate || this[SELECTED][0];\n\n                            // 跟其他面板不同，这里只刷新，点击确定再赋值\n                            eleContainer.dataDate = new Date(numYear, arrRange[1], 1).toArray();\n                            // 刷新\n                            this['month-range']();\n                        } else if (/item/.test(eleClicked.className)) {\n                            // 选择某日期\n                            // 获得选中的年月日\n                            numYear = eleClicked.dataset.year;\n                            numMonth = eleClicked.dataset.value;\n                            numDay = '01';\n                            // 根据选中状态决定新的状态\n                            dataRange = this[SELECTED];\n                            if (dataRange[0].join() == dataRange[1].join()) {\n                                // 如果之前前后日期一样，说明只选中了一个日期\n                                // 根据前后顺序改变其中一个日期\n                                if (numYear + numMonth + numDay > dataRange[0].join('')) {\n                                    // 新时间靠后\n                                    dataRange[1] = [numYear, numMonth, numDay];\n                                } else {\n                                    dataRange[0] = [numYear, numMonth, numDay];\n                                }\n                            } else {\n                                // 如果前后时间不一样，说明现在有范围\n                                // 则取消范围，变成单选\n                                dataRange = [[numYear, numMonth, numDay], [numYear, numMonth, numDay]];\n                            }\n                            this[SELECTED] = dataRange;\n                            this['month-range']();\n                        } else if (/button/.test(eleClicked.className)) {\n                            strTypeButton = eleClicked.dataset.type;\n                            if (strTypeButton == 'primary') {\n                                // 点击确定按钮\n                                // 赋值\n                                this.setValue();\n                                // 修改存储值\n                                this.dataRangeSelected = this[SELECTED];\n                                // 关闭浮层\n                                this.hide();\n                            } else if (strTypeButton == 'normal') {\n                                // 重置选中值\n                                if (this.dataRangeSelected) {\n                                    this[SELECTED] = this.dataRangeSelected;\n                                }\n                                // 关闭浮层\n                                this.hide();\n                            }\n                        }\n\n                        break;\n                    }\n                    case 'month': {\n                        // 选择月份，可能从年份，也可能从日期过来\n                        // 1. 前后年份\n                        if (/prev|next/.test(eleClicked.className)) {\n                            numYear = eleClicked.dataset.year;\n                            // 修改当前选中的年份数\n                            this[SELECTED][0] = numYear * 1;\n                            // 刷新\n                            this.month();\n                            // 文本框赋值\n                            // 如果在区域内状态\n                            if (eleContainer.querySelector(`.${SELECTED}[href]`)) {\n                                this.setValue();\n                            }\n                        } else if (/item/.test(eleClicked.className)) {\n                            // value实际上是月份两位数值\n                            const value = eleClicked.dataset.value;\n                            if (value) {\n                                this[SELECTED][1] = value;\n                            } else {\n                                // 今月，只改变年月为今年和今月\n                                const arrToday = new Date().toArray();\n                                this[SELECTED][0] = arrToday[0];\n                                this[SELECTED][1] = arrToday[1];\n                            }\n\n                            // 日是否匹配月的合法性判断\n                            var day = this[SELECTED][2];\n                            var arrMonthDay = this.getMonthDay(this[SELECTED]);\n                            // 如果日超出当月限制，使用本月最后一天作为日期\n                            if (day > arrMonthDay[this[SELECTED][1] - 1]) {\n                                this[SELECTED][2] = arrMonthDay[this[SELECTED][1] - 1];\n                            }\n\n                            // 赋值\n                            this.setValue();\n\n                            // 根据是否是月份输入框，决定是面板切换，还是关闭\n                            if (this.params.type == 'month') {\n                                // 隐藏\n                                this.hide();\n                            } else {\n                                this.date();\n                            }\n                        } else if (eleClicked.dataset.type == 'year') {\n                            // 切换到年份选择\n                            this.year();\n                        }\n                        break;\n                    }\n                    case 'year': {\n                        // 选择年份，可能从月份过来，也可能直接打开\n                        // 1. 前后12年翻页\n                        if (/prev|next/.test(eleClicked.className)) {\n                            numYear = eleClicked.dataset.year;\n                            // 修改当前选中的年份数\n                            this[SELECTED][0] = numYear * 1;\n                            // 刷新\n                            this.year();\n                            // 文本框赋值\n                            // 如果在区域内状态\n                            if (eleContainer.querySelector(`.${SELECTED}[href]`)) {\n                                this.setValue();\n                            }\n                        } else if (/item/.test(eleClicked.className)) {\n                            if (eleClicked.innerHTML == '今年') {\n                                this[SELECTED][0] = new Date().getFullYear();\n                            } else {\n                                this[SELECTED][0] = eleClicked.innerHTML * 1;\n                            }\n\n                            // 赋值\n                            this.setValue();\n                            // 如果是年份选择输入框\n                            if (this.params.type == 'year') {\n                                // 隐藏\n                                this.hide();\n                            } else {\n                                // 回到月份面板\n                                this.month();\n                            }\n                        }\n\n                        break;\n                    }\n                    case 'time': {\n                        if (eleClicked.tagName == 'BUTTON' && eleClicked.classList.contains(SELECTED) == false) {\n                            let strTypeButton = eleClicked.parentElement.dataset.type;\n                            let numIndexButton = eleClicked.dataset.index;\n                            if (strTypeButton == 'ampm') {\n                                if (numIndexButton == '0') {\n                                    this[SELECTED][0] -= 12;\n                                } else {\n                                    this[SELECTED][0] = Number(this[SELECTED][0]) + 12;\n                                }\n                                this[SELECTED][0] = String(this[SELECTED][0]).padStart(2, '0');\n                            } else if (strTypeButton == 'hour') {\n                                this[SELECTED][0] = numIndexButton.padStart(2, '0');\n                            } else if (strTypeButton == 'minute') {\n                                this[SELECTED][1] = numIndexButton.padStart(2, '0');\n                            } else if (strTypeButton == 'second') {\n                                this[SELECTED][2] = numIndexButton.padStart(2, '0');\n                            }\n\n                            this.setValue();\n                            this.time();\n                        }\n                        break;\n                    }\n                    case 'minute': {\n                        // 选择分钟，可以是minute类型，或者time类型, 但不包括hour类型\n                        // 1. 前后翻页\n                        if (/prev|next/.test(eleClicked.className)) {\n                            numHour = eleClicked.getAttribute('data-hour');\n                            if (numHour.length == 1) {\n                                numHour = `0${numHour}`;\n                            }\n                            // 修改当前选中的小时数\n                            this[SELECTED][0] = numHour;\n\n                            // 刷新\n                            this.minute();\n                            // 文本框赋值\n                            // 如果在区域内状态\n                            if (eleContainer.querySelector(`.${SELECTED}[href]`)) {\n                                this.setValue();\n                            }\n                        } else if (/item/.test(eleClicked.className)) {\n                            // 确定选择时间\n                            this[SELECTED] = eleClicked.innerHTML.split(':');\n                            this.setValue();\n                            this.hide();\n                        } else if (eleClicked.dataset.type == 'hour') {\n                            // 切换到小时选择\n                            this.hour();\n                        }\n\n                        break;\n                    }\n                    case 'hour': {\n                        if (/item/.test(eleClicked.className)) {\n                            // 修改选中的小时\n                            this[SELECTED][0] = eleClicked.innerHTML.split(':')[0];\n                            // 赋值\n                            this.setValue();\n\n                            // 如果是从分钟模式切换过来，则切换回去，否则，直接隐藏\n                            if (this.params.type == 'hour') {\n                                this.hide();\n                            } else {\n                                this.minute();\n                            }\n                        }\n                        break;\n                    }\n                    case 'datetime': {\n                        // 日期时间选择\n                        const arrSelected = this[SELECTED];\n                        const eleContainerDate = eleClicked.closest('[data-type=\"date\"]');\n                        const eleContainerMonth = eleClicked.closest('[data-type=\"month\"]');\n                        const eleContainerYear = eleClicked.closest('[data-type=\"year\"]');\n                        const eleContainerTime = eleContainer.querySelector('[data-type=\"time\"]');\n                        // 日期选择主体\n                        if (eleContainerDate) {\n                            // 日期数组项\n                            const arrDate = arrSelected[0];\n                            // 1. 前后月份选择\n                            if (/prev|next/.test(eleClicked.className)) {\n                                numMonth = eleClicked.dataset.month;\n\n                                // 设置选择月份\n                                // 这样可以获得目标月份对应的日期数据\n                                // 就是下面this.getMonthDay做的事情\n                                arrDate[1] = numMonth * 1;\n\n                                // 日期和月份要匹配，例如，不能出现4月31日\n                                // arrMonthDay是一个数组，当前年份12个月每月最大的天数\n                                const arrMonthDay = this.getMonthDay(this[SELECTED]);\n\n                                // 切分月份\n                                // 日期正常是不会变化的\n                                // 但是类似31号这样的日子不是每个月都有的\n                                // 因此，需要边界判断\n                                // 下面这段逻辑就是做这个事情的\n\n                                // 1. 当前月份最大多少天\n                                const numDayMax = (() => {\n                                    if (numMonth - 1 < 0) {\n                                        return arrMonthDay[11];\n                                    } else if (numMonth > arrMonthDay.length) {\n                                        return arrMonthDay[0];\n                                    }\n\n                                    return arrMonthDay[numMonth - 1];\n                                })();\n\n                                // 2. 之前选择的天数\n                                numDay = arrDate[2];\n                                // 之前记住的日期\n                                const numDayOverflow = eleContainer.dataDayOverflow;\n                                // 例如，我们超出日期是31日，如果月份可以满足31日，使用31日\n                                if (numDayOverflow) {\n                                    arrDate[2] = Math.min(numDayOverflow, numDayMax);\n                                } else if (arrDate[2] > numDayMax) {\n                                    arrDate[2] = numDayMax;\n\n                                    // 这里是对体验的升级，\n                                    // 虽然下月份变成了30号，但是再回来时候，原来的31号变成了30号\n                                    // 不完美，我们需要处理下\n                                    // 通过一个变量记住，点击item项的时候，移除\n                                    // 且只在第一次的时候记住\n                                    // 因为28,29,30,31都可能出现，每次记忆会混乱\n                                    eleContainer.dataDayOverflow = numDay;\n                                }\n\n                                // 更新选择的月日数据\n                                this[SELECTED][0] = arrDate.join('-').toDate().toArray();\n\n                                // 刷新\n                                this.date(eleContainerDate);\n                                // 时间也刷新，因为可能禁用态变化\n                                this.time(eleContainerTime);\n\n                                // 如果在时间范围内\n                                if (eleContainer.querySelector(`[data-type=\"date\"] .${SELECTED}[href]`)) {\n                                    this.setValue();\n                                }\n                            } else if (/item/.test(eleClicked.className)) {\n                                // 选择某日期啦\n                                numDay = eleClicked.innerHTML;\n\n                                // 含有非数字，认为是今天\n                                if (/\\D/.test(numDay)) {\n                                    // 今天\n                                    this[SELECTED][0] = new Date().toArray();\n                                } else {\n                                    if (numDay < 10) {\n                                        numDay = `0${numDay}`;\n                                    }\n                                    // 修改全局\n                                    this[SELECTED][0][2] = numDay;\n                                }\n\n                                // 赋值和选中态更新\n                                this.setValue();\n                                this.date(eleContainerDate);\n                                // 时间也刷新，因为可能禁用态变化\n                                this.time(eleContainerTime);\n\n                                delete eleContainer.dataDayOverflow;\n                            } else if (eleClicked.dataset.type == 'month') {\n                                // 切换到年份选择\n                                this.month(eleContainerDate);\n                            }\n                        } else if (eleContainerMonth) {\n                            // 月份切换\n                            // 选择月份，可能从年份，也可能从日期过来\n                            // 1. 前后年份\n                            if (/prev|next/.test(eleClicked.className)) {\n                                numYear = eleClicked.dataset.year;\n                                // 修改当前选中的年份数\n                                this[SELECTED][0][0] = numYear * 1;\n                                // 刷新\n                                this.month(eleContainerMonth);\n                                // 时间也刷新，因为可能禁用态变化\n                                this.time(eleContainerTime);\n                                // 文本框赋值\n                                // 如果在区域内状态\n                                if (eleContainerMonth.querySelector(`.${SELECTED}[href]`)) {\n                                    this.setValue();\n                                }\n                            } else if (/item/.test(eleClicked.className)) {\n                                // value实际上是月份两位数值\n                                const value = eleClicked.dataset.value;\n                                if (value) {\n                                    this[SELECTED][0][1] = value;\n                                } else {\n                                    // 今月，只改变年月为今年和今月\n                                    const arrToday = new Date().toArray();\n                                    this[SELECTED][0][0] = arrToday[0];\n                                    this[SELECTED][0][1] = arrToday[1];\n                                }\n\n                                // 赋值\n                                this.setValue();\n\n                                this.date(eleContainerMonth);\n                                // 时间也刷新，因为可能禁用态变化\n                                this.time(eleContainerTime);\n                            } else if (eleClicked.dataset.type == 'year') {\n                                // 切换到年份选择\n                                this.year(eleContainerMonth);\n                            }\n                        } else if (eleContainerYear) {\n                            // 选择年份，从月份过来\n                            if (/prev|next/.test(eleClicked.className)) {\n                                numYear = eleClicked.dataset.year;\n                                // 修改当前选中的年份数\n                                this[SELECTED][0][0] = numYear * 1;\n                                // 刷新\n                                this.year(eleContainerYear);\n                                // 时间也刷新，因为可能禁用态变化\n                                this.time(eleContainerTime);\n                                // 文本框赋值\n                                // 如果在区域内状态\n                                if (eleContainerYear.querySelector(`.${SELECTED}[href]`)) {\n                                    this.setValue();\n                                }\n                            } else if (/item/.test(eleClicked.className)) {\n                                if (eleClicked.innerHTML == '今年') {\n                                    this[SELECTED][0][0] = new Date().getFullYear();\n                                } else {\n                                    this[SELECTED][0][0] = eleClicked.innerHTML * 1;\n                                }\n\n                                // 赋值\n                                this.setValue();\n                                // 回到月份面板\n                                this.month(eleContainerYear);\n                                // 时间也刷新，因为可能禁用态变化\n                                this.time(eleContainerTime);\n                            }\n                        } else if (eleClicked.tagName == 'BUTTON' && eleClicked.classList.contains(SELECTED) == false) {\n                            const arrTime = this[SELECTED][1];\n\n                            let strTypeButton = eleClicked.parentElement.dataset.type;\n                            let numIndexButton = eleClicked.dataset.index;\n                            if (strTypeButton == 'ampm') {\n                                if (numIndexButton == '0') {\n                                    arrTime[0] -= 12;\n                                } else {\n                                    arrTime[0] = Number(arrTime[0]) + 12;\n                                }\n                                arrTime[0] = String(arrTime[0]).padStart(2, '0');\n                            } else if (strTypeButton == 'hour') {\n                                arrTime[0] = numIndexButton.padStart(2, '0');\n                            } else if (strTypeButton == 'minute') {\n                                arrTime[1] = numIndexButton.padStart(2, '0');\n                            } else if (strTypeButton == 'second') {\n                                arrTime[2] = numIndexButton.padStart(2, '0');\n                            }\n\n                            // 改变时间值\n                            this[SELECTED][1] = arrTime;\n\n                            // 赋值并刷新样式\n                            this.setValue();\n                            this.time(eleContainerTime);\n                        }\n                    }\n                }\n            });\n\n            // 显隐控制\n            this.addEventListener('click', (event) => {\n                event.preventDefault();\n\n                // 显隐控制\n                if (!this.display) {\n                    this.show();\n                } else {\n                    this.hide();\n                }\n            });\n\n            // 输入框元素行为\n            this.addEventListener('keydown', (event) => {\n                if (event.code == 'Enter') {\n                    event.preventDefault();\n                    this.click();\n                }\n            });\n\n            // 时间范围选择点击页面空白区域不会隐藏\n            document.addEventListener('mouseup', (event) => {\n                // 点击页面空白区域，隐藏\n                const eleTarget = event.target;\n\n                if (eleTarget && eleTarget != this && eleContainer.contains(eleTarget) == false) {\n                    if (this.display) {\n                        this.hide();\n                    }\n                }\n            });\n\n            // time类型的上下左右快捷键处理\n            document.addEventListener('keydown', event => {\n                const strType = eleContainer.dataset.type;\n                if (!strType) {\n                    return;\n                }\n                if (strType.includes('time') && this.display == true && eleContainer.contains(document.activeElement)) {\n                    if (/^arrow/i.test(event.key)) {\n                        event.preventDefault();\n                        // 所有列选中元素\n                        let eleButtonSelected = [...eleContainer.querySelectorAll('.' + SELECTED)];\n                        if (strType.includes('datetime')) {\n                            eleButtonSelected = [...eleContainer.querySelectorAll('[data-type=\"time\"] .' + SELECTED)];\n                        }\n                        let numIndexButton = eleButtonSelected.findIndex(item => item == event.target);\n                        // 当前列所有可点击元素\n                        let eleButtonClickable = [...event.target.parentElement.querySelectorAll('button:enabled:not([data-visibility=\"false\"])')];\n                        let numIndexButtonClickable = eleButtonClickable.findIndex(item => item == event.target);\n                        // 上下左右快捷键的处理\n                        if (event.key == 'ArrowLeft') {\n                            numIndexButton--;\n                            if (eleButtonSelected[numIndexButton]) {\n                                eleButtonSelected[numIndexButton].focus();\n                            }\n                        } else if (event.key == 'ArrowRight') {\n                            numIndexButton++;\n                            if (eleButtonSelected[numIndexButton]) {\n                                eleButtonSelected[numIndexButton].focus();\n                            }\n                        } else if (event.key == 'ArrowUp') {\n                            let eleButtonPrev = eleButtonClickable[numIndexButtonClickable - 1];\n                            if (!eleButtonPrev) {\n                                eleButtonPrev = eleButtonClickable[eleButtonClickable.length - 1];\n                            }\n                            if (eleButtonPrev) {\n                                eleButtonPrev.click();\n                                eleButtonPrev.focus();\n                            }\n                        } else if (event.key == 'ArrowDown') {\n                            let eleButtonNext = eleButtonClickable[numIndexButtonClickable + 1];\n                            if (!eleButtonNext) {\n                                eleButtonNext = eleButtonClickable[0];\n                            }\n                            if (eleButtonNext) {\n                                eleButtonNext.click();\n                                eleButtonNext.focus();\n                            }\n                        }\n                    }\n\n                    if (event.key == 'Enter') {\n                        this.hide();\n                    }\n                }\n            });\n\n            // 窗口尺寸变化与重定位\n            window.addEventListener('resize', () => {\n                if (this.display) {\n                    this.position();\n                }\n            });\n\n            return this;\n        }\n\n        /**\n         * 输入框的值根据日期类型进行格式化\n         * @return {Object} 返回当前DOM对象\n         */\n        format () {\n            // 根据当前value值修改DOM元素对象缓存的选中值\n            // 特殊情况一般不处理\n            const strType = this.params.type;\n\n            // 此时输入框初始值\n            const strInitValue = this.value.trim();\n\n            if (!strInitValue) {\n                return this;\n            }\n\n            switch (strType) {\n                case 'date': case 'year': case 'month': {\n                    // 日期\n                    const objInitDate = strInitValue.toDate();\n                    const arrDate = objInitDate.toArray();\n                    // eg. [2015,07,20]\n                    this[SELECTED] = arrDate;\n\n                    break;\n                }\n                case 'time': case 'hour': case 'minute': {\n                    // 时间\n                    const arrTime = strInitValue.toTime();\n                    // 补0\n                    if (arrTime.length > 1) {\n                        this[SELECTED] = [...arrTime];\n                    }\n\n                    break;\n                }\n                case 'datetime': case 'datetime-local': {\n                    // 日期和时间\n                    const arrDateTime = strInitValue.split(/\\s+|T/);\n                    const arrPart1 = arrDateTime[0].toDate().toArray();\n                    let arrPart2 = ['00', '00'];\n                    if (arrDateTime[1] && arrDateTime[1].includes(':')) {\n                        arrPart2 = arrDateTime[1].toTime();\n                    }\n\n                    this[SELECTED] = [arrPart1, arrPart2];\n\n                    break;\n                }\n                case 'date-range': case 'month-range': {\n                    // 日期范围\n                    let objBeginDate = new Date();\n                    let objEndDate = new Date();\n                    // 前后时间字符串\n                    const arrRange = strInitValue.split(' ');\n                    if (arrRange.length == 3) {\n                        objBeginDate = arrRange[0].toDate();\n                        objEndDate = arrRange[arrRange.length - 1].toDate();\n                        // 存储\n                        this[SELECTED] = [objBeginDate.toArray(), objEndDate.toArray()];\n                    }\n                    break;\n                }\n            }\n\n            return this;\n        }\n\n        /**\n         * 赋值\n         * @return {Object} 返回当前输入框的值\n         */\n        setValue () {\n            const arrSelected = this[SELECTED];\n            const strValue = this.value;\n\n            switch (this.params.type) {\n                case 'date': {\n                    this.value = arrSelected.join('-');\n                    break;\n                }\n                case 'month': {\n                    this.value = arrSelected.slice(0, 2).join('-');\n                    break;\n                }\n                case 'year': {\n                    this.value = arrSelected[0];\n                    break;\n                }\n                case 'date-range': {\n                    this.value = `${arrSelected[0].join('-')} 至 ${arrSelected[1].join('-')}`;\n                    break;\n                }\n                case 'month-range': {\n                    this.value = `${arrSelected[0].slice(0, 2).join('-')} 至 ${arrSelected[1].slice(0, 2).join('-')}`;\n                    break;\n                }\n                case 'time': case 'minute': {\n                    this.value = arrSelected.join(':');\n                    break;\n                }\n                case 'hour': {\n                    this.value = `${arrSelected[0]}:00`;\n                    break;\n                }\n                case 'datetime': case 'datetime-local': {\n                    this.value = arrSelected[0].join('-') + ' ' + arrSelected[1].join(':');\n                    break;\n                }\n            }\n\n            if (this.value != strValue) {\n                this.dispatchEvent(new CustomEvent('change', {\n                    'bubbles': true\n                }));\n            }\n\n            return this.value;\n        }\n\n        /**\n         * 返回日历HTML字符串等数据的私有方法\n         * 因date和range浮层主结构类似，因此这里公用下\n         * @param  {Array} arrDate 格式化为数组的日期\n         * @return {Object}     返回包含需要的数据的对象，生成的HTML字符内容以及最大最小月份等\n         */\n        getCalendarData (arrDate) {\n            let strHtml = '';\n            // 根据当前日期数据返回\n            // eg. [2015,'02', 23]\n\n            // 最大最小限制\n            let strMin = this.min;\n            let strMax = this.max;\n            // 类型\n            const strType = this.params.type;\n\n            // 如果是日期时间选择，则最大最小月份是前面部分内容\n            if (strType.includes('datetime')) {\n                if (strMin) {\n                    strMin = strMin.split(/\\s+/)[0];\n                }\n                if (strMax) {\n                    strMax = this.max.split(/\\s+/)[0];\n                }\n            }\n\n            // 最大日期和最小日期\n            let numMin = (strMin || '0001-01-01').toDate();\n            let numMax = (strMax || '9999-00-01').toDate();\n\n            const arrChinese = ['日', '一', '二', '三', '四', '五', '六'];\n            const arrMonthDay = this.getMonthDay(arrDate);\n\n            // 目前日期对象\n            const currentDate = arrDate.join('-').toDate();\n\n            const getStrHtmlDay = () => {\n                let strHtmlDay = '';\n                arrChinese.forEach((strChineseDay, indexDay) => {\n                    strHtmlDay = `${strHtmlDay}<span class=\"${CL.day('item')} col${indexDay}\">${strChineseDay}</span>`;\n                });\n                return strHtmlDay;\n            };\n\n            // 3 星期几七大罪\n            strHtml = `<div class=\"${CL.day('x')}\">${getStrHtmlDay()}</div>`;\n\n            // 4. 日期详细\n            //  4.1 首先算出今月1号是星期几\n            const objNewDate = arrDate.join('-').toDate();\n            let numDayFirst = 0;\n            // 设置为1号\n            objNewDate.setDate(1);\n\n            if (objNewDate.getDate() == 2) {\n                objNewDate.setDate(0);\n            }\n            // 每月的第一天是星期几\n            numDayFirst = objNewDate.getDay();\n            // 上个月是几月份\n            let numLastMonth = objNewDate.getMonth() - 1;\n            if (numLastMonth < 0) {\n                numLastMonth = 11;\n            }\n\n            const strHtmlData = `data-year=\"${arrDate[0]}\" data-month=\"${objNewDate.getMonth() + 1}\"`;\n            const strHtmlYearMonthData = 'data-date=';\n            let strHtmlFullData = '';\n\n            const getStrHtmlDate = () => {\n                let strHtmlDate = '';\n                let strClass = '';\n\n                // 列表生成\n                for (let tr = 0; tr < 6; tr++) {\n                    strHtmlDate = `${strHtmlDate}<div class=\"${CL.date('tr')}\">`;\n\n                    // 日期遍历\n                    for (let td = 0; td < 7; td++) {\n                        // 类名\n                        strClass = `${CL.date('item')} col${td}`;\n\n                        // 今天\n                        const numYearNow = arrDate[0];\n                        const numMonthNow = objNewDate.getMonth() + 1;\n                        let numDayNow;\n                        let objDateNow;\n\n                        // 由于range选择和date选择UI上有比较大大差异\n                        // 为了可读性以及后期维护\n                        // 这里就不耦合在一起，而是分开处理\n                        if (strType == 'date' || strType.includes('datetime')) {\n                            // 第一行上个月一些日期补全\n                            if (tr == 0 && td < numDayFirst) {\n                                // 当前日子\n                                numDayNow = arrMonthDay[numLastMonth] - numDayFirst + td + 1;\n                                // 当前日期\n                                objDateNow = new Date(numYearNow, numLastMonth, numDayNow);\n                                // 完整data-date属性及其值\n                                strHtmlFullData = strHtmlYearMonthData + objDateNow.toArray().join('-');\n                                // HTML拼接\n                                strHtmlDate = `${strHtmlDate}<span class=\"${strClass}\" ${strHtmlFullData}>${numDayNow}</span>`;\n                            } else {\n                                // 当前日子\n                                numDayNow = tr * 7 + td - numDayFirst + 1;\n                                // 如果没有超过这个月末\n                                if (numDayNow <= arrMonthDay[objNewDate.getMonth()]) {\n                                    // 这个日子对应的时间对象\n                                    objDateNow = new Date(numYearNow, objNewDate.getMonth(), numDayNow);\n                                    // 完整data-date属性及其值\n                                    strHtmlFullData = strHtmlYearMonthData + objDateNow.toArray().join('-');\n                                    // 如果日子匹配\n                                    if (currentDate.getDate() == numDayNow) {\n                                        strClass = `${strClass} ${SELECTED}`;\n                                    }\n                                    // 如果在日期范围内\n                                    // 直接使用时间对象 Date 类作比较\n                                    if (objDateNow >= numMin && objDateNow <= numMax) {\n                                        strHtmlDate = `${strHtmlDate}<a href=\"javascript:;\" ${strHtmlData} class=\"${strClass}\" ${strHtmlFullData}>${numDayNow}</a>`;\n                                    } else {\n                                        strHtmlDate = `${strHtmlDate}<span class=\"${strClass}\" ${strHtmlFullData}>${numDayNow}</span>`;\n                                    }\n                                } else {\n                                    numDayNow = numDayNow - arrMonthDay[objNewDate.getMonth()];\n                                    // 更新strHtmlFullData\n                                    strHtmlFullData = strHtmlYearMonthData + new Date(numYearNow, numMonthNow, numDayNow).toArray().join('-');\n                                    // 日期字符拼接\n                                    strHtmlDate = `${strHtmlDate}<span class=\"${strClass}\" ${strHtmlFullData}>${numDayNow}</span>`;\n                                }\n                            }\n                        } else if (strType == 'date-range') {\n                            // 非当前月部分使用空格补全\n                            if (tr == 0 && td < numDayFirst) {\n                                strHtmlDate = `${strHtmlDate}<span class=\"${strClass}\"></span>`;\n                            } else {\n                                numDayNow = tr * 7 + td - numDayFirst + 1;\n                                // 如果没有超过这个月末\n                                if (numDayNow <= arrMonthDay[objNewDate.getMonth()]) {\n                                    // 这个日子对应的时间对象\n                                    objDateNow = new Date(numYearNow, objNewDate.getMonth(), numDayNow);\n\n                                    // 完整data-date属性及其值\n                                    strHtmlFullData = strHtmlYearMonthData + objDateNow.toArray().join('-');\n\n                                    // range选择的匹配规则如下：\n                                    // 1. 获得已经选中到时间范围\n                                    // 2. 起始时间和结束时间是方框表示\n                                    // 3. 之间的时间是选中表示\n                                    const dateBegin = this[SELECTED][0].join('-').toDate();\n                                    const dateEnd = this[SELECTED][1].join('-').toDate();\n\n                                    // 各个时间的时间戳\n                                    const timeNow = objDateNow.getTime();\n                                    const timeBegin = dateBegin.getTime();\n                                    const timeEnd = dateEnd.getTime();\n\n                                    if (timeNow >= timeBegin && timeNow <= timeEnd) {\n                                        // 在时间范围之内\n                                        strClass = `${strClass} ${SELECTED}`;\n                                        // 跟开始时间一样\n                                        if (timeNow == timeBegin) {\n                                            strClass = `${strClass} ${CL.date('begin')}`;\n                                        }\n                                        // 跟结束时间一样\n                                        if (timeNow == timeEnd) {\n                                            strClass = `${strClass} ${CL.date('end')}`;\n                                        }\n                                        // 今月的第一天还是最后一天\n                                        if (numDayNow == 1) {\n                                            strClass = `${strClass} ${CL.date('first')}`;\n                                        } else if (numDayNow == arrMonthDay[objNewDate.getMonth()]) {\n                                            strClass = `${strClass} ${CL.date('last')}`;\n                                        }\n                                    }\n\n                                    // 如果在日期范围内\n                                    // 直接使用时间对象 Date 类作比较\n                                    if (objDateNow >= numMin && objDateNow <= numMax) {\n                                        strHtmlDate = `${strHtmlDate}<a href=\"javascript:;\" ${strHtmlData} class=\"${strClass}\" ${strHtmlFullData}>${numDayNow}</a>`;\n                                    } else {\n                                        strHtmlDate = `${strHtmlDate}<span class=\"${strClass}\" ${strHtmlFullData}>${numDayNow}</span>`;\n                                    }\n                                } else {\n                                    strHtmlDate = `${strHtmlDate}<span class=\"${strClass}\"></span>`;\n                                }\n                            }\n                        }\n                    }\n                    strHtmlDate += '</div>';\n                }\n\n                return strHtmlDate;\n            };\n\n            strHtml = `${strHtml}<div class=\"${CL.date('body')}\">${getStrHtmlDate()}</div>`;\n\n            return {\n                monthDay: arrMonthDay,\n                html: strHtml,\n                min: numMin,\n                max: numMax\n            };\n        }\n\n        /**\n         * 月份组装\n         * @param  {Array} arrDate 数组化的日期表示值\n         * @return {Object}        返回的是后续方法需要的数据的纯对象，包括组装的HTML字符数据，月份最大和最小值。\n         */\n        getMonthData (arrDate) {\n            // 类型\n            const strType = this.params.type;\n            // 最大最小限制\n            let strMin = this.min;\n            let strMax = this.max;\n\n            // 如果是日期时间选择，则最大最小月份是前面部分内容\n            if (strType.includes('datetime')) {\n                if (strMin) {\n                    strMin = strMin.split(/\\s+/)[0];\n                }\n                if (strMax) {\n                    strMax = this.max.split(/\\s+/)[0];\n                }\n            }\n\n            // 最大月份和最小月份\n            let numMin = (strMin || '000000').replace(regDate, '').slice(0, 6);\n            let numMax = (strMax || '999912').replace(regDate, '').slice(0, 6);\n\n            const arrChinese = ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'];\n\n            // 年份\n            const numYear = arrDate[0] * 1;\n\n            // 获取字符内容方法\n            const getStrHtmlDate = () => {\n                let strHtmlDate = '';\n                let strClass = '';\n                let strMonth = '';\n\n                for (let i = 1; i <= 12; i += 1) {\n                    // 合法格式字符串\n                    if (i < 10) {\n                        strMonth = `0${i}`;\n                    } else {\n                        strMonth = `${i}`;\n                    }\n\n                    // 基本类名\n                    strClass = CL.date('item');\n\n                    if (strType == 'month' || strType.includes('datetime')) {\n                        if (i == arrDate[1]) {\n                            // 选中态的类名\n                            strClass = `${strClass} ${SELECTED}`;\n                        }\n                    } else if (strType == 'month-range') {\n                        // range选择的匹配规则如下：\n                        // 1. 获得已经选中到时间范围\n                        // 2. 起始时间和结束时间是选中表示\n                        // 3. 之间的时间也是选中表示\n                        const strBegin = this[SELECTED][0].slice(0, 2).join('');\n                        const strEnd = this[SELECTED][1].slice(0, 2).join('');\n                        const strNow = numYear + strMonth;\n                        if (strNow >= strBegin && strNow <= strEnd) {\n                            strClass = `${strClass} ${SELECTED}`;\n                        }\n                    }\n                    // 是否在范围以内\n                    if (numYear + strMonth >= numMin && numYear + strMonth <= numMax) {\n                        strHtmlDate = `${strHtmlDate}<a href=\"javascript:\" class=\"${strClass}\" data-year=\"${numYear}\" data-value=\"${strMonth}\">${arrChinese[i - 1]}月</a>`;\n                    } else {\n                        strHtmlDate = `${strHtmlDate}<span class=\"${strClass}\" data-value=\"${strMonth}\">${arrChinese[i - 1]}月</span>`;\n                    }\n                }\n\n                return strHtmlDate;\n            };\n\n            const strHtml = `<div class=\"${CL.month('body')}\">${getStrHtmlDate()}</div>`;\n\n            return {\n                html: strHtml,\n                min: numMin,\n                max: numMax\n            };\n        }\n\n        /**\n         * 当前日期下这一年每月最大的日期数目\n         * @param  {Array} date 格式化为数组的日期\n         * @return {Array}      返回这一年每月最大的日期数目\n         */\n        getMonthDay (date) {\n            let arrDate = date;\n            // 如果不是数组\n            if (typeof date != 'object' && !date.map) {\n                arrDate = date.toArray();\n            }\n\n            const arrMonthDay = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n            // 如果是闰年\n            if (((arrDate[0] % 4 == 0) && (arrDate[0] % 100 != 0)) || (arrDate[0] % 400 == 0)) {\n                arrMonthDay[1] = 29;\n            }\n\n            return arrMonthDay;\n        }\n\n        /**\n         * 上个月同日期\n         * @param  {Array} date 格式化为数组的日期\n         * @return {Object}     返回Date类型对象\n         */\n        getDatePrevMonth (date) {\n            // add on 2016-03-31\n            // 原先的加减月份的跨月计算是有些问题的\n            // 因为例如31号的下一月，系统会自动变成下下个月的1号\n            let arrDate = date;\n            // 如果不是数组\n            if (typeof date != 'object' && !date.map) {\n                // 日期数组化\n                arrDate = date.toArray();\n            }\n\n            const numMonth = arrDate[1] * 1;\n            const arrMonthDay = this.getMonthDay(arrDate);\n\n            if (numMonth == 1) {\n                // 上个月是前一年的12月\n                // 12月有31号，无压力\n                return [arrDate[0] - 1, 12, arrDate[2]].join('-').toDate();\n            }\n\n            // 其他月份不跨年\n            // 如果上一个月的最后1天小于本月的最后1天\n            // 嘿嘿嘿嘿\n            // 年不变，月减一，日期下个月\n            if (arrMonthDay[numMonth - 2] < arrDate[2]) {\n                return [arrDate[0], numMonth - 1, arrMonthDay[numMonth - 2]].join('-').toDate();\n            }\n\n            // 年不变，月减一，日期不变\n            return [arrDate[0], numMonth - 1, arrDate[2]].join('-').toDate();\n        }\n\n        /**\n         * 下个月同日期\n         * @param  {Array} date 格式化为数组的日期\n         * @return {Object}     返回Date类型对象\n         */\n        getDateNextMonth (date) {\n            let arrDate = date;\n            // 如果不是数组\n            if (typeof date != 'object' && !date.map) {\n                // 日期数组化\n                arrDate = date.toArray();\n            }\n\n            const numMonth = arrDate[1] * 1;\n            const arrMonthDay = this.getMonthDay(arrDate);\n\n            if (numMonth == 12) {\n                // 下个月跨年了\n                // 1月份也有31天，无压力\n                return [arrDate[0] + 1, 1, arrDate[2]].join('-').toDate();\n            }\n\n            // 其他月份不跨年\n            // 如果下个月最后1天小于本月最后1天，例如，3月31日\n            if (arrMonthDay[numMonth] < arrDate[2]) {\n                return [arrDate[0], numMonth + 1, arrMonthDay[numMonth]].join('-').toDate();\n            }\n\n            // 其他时候正常\n            return [arrDate[0], numMonth + 1, arrDate[2]].join('-').toDate();\n        }\n\n        /**\n         * 选择日期\n         * @return {Object} 返回当前DOM对象\n         */\n        date (container) {\n            const eleContainer = container || this.element.target;\n\n            let arrDate = this[SELECTED];\n\n            // 如果是日期时间类型\n            if (this.params.type.includes('datetime')) {\n                arrDate = arrDate[0];\n            }\n\n            // 上一个月\n            const numPrevMonth = arrDate[1] - 1;\n            // 下一个月\n            const numNextMonth = arrDate[1] * 1 + 1;\n\n            const objCalender = this.getCalendarData(arrDate);\n\n            // 选择日期的完整HTML代码\n            // 1. 日期专属类名容器\n            let strHtml = `<div class=\"${CL.date('x')}\">`;\n            // 2. 头部月份切换\n            strHtml = `${strHtml}<div class=\"${CL.date('head')}\">`;\n            // 根据前后月份是否在范围之外，决定使用的标签类型\n            // span标签则是禁用态，本组件全部都是如此\n            // 2.1 上个月\n            // datePrevMonth指上个月日期\n            const datePrevMonth = this.getDatePrevMonth(arrDate);\n            // numPrevMonth指上个月\n            const numPrevMonthGet = datePrevMonth.getMonth();\n            const numPrevYearGet = datePrevMonth.getFullYear();\n            const datePrevMonthLastDay = new Date(numPrevYearGet, numPrevMonthGet, objCalender.monthDay[numPrevMonthGet]);\n\n            // 上个月份的最大日期比最小限制大\n            // 或者没有最小限制\n            // 或者\n            if (datePrevMonthLastDay >= objCalender.min) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('prev')}\" data-month=\"${numPrevMonth}\" role=\"button\" aria-label=\"上一月\"></a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('prev')}\" aria-label=\"上一月\"></span>`;\n            }\n\n            // 2.2 下个月\n            const objDateNextMonth = this.getDateNextMonth(arrDate);\n            const numNextMonthGet = objDateNextMonth.getMonth();\n            const numNextYearGet = objDateNextMonth.getFullYear();\n\n            if (new Date(numNextYearGet, numNextMonthGet, 1) <= objCalender.max) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('next')}\" data-month=\"${numNextMonth}\" role=\"button\" aria-label=\"下一月\"></a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('next')}\" aria-label=\"下一月\"></span>`;\n            }\n\n            // 头部月份公用结束\n            strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('switch')}\" data-type=\"month\" role=\"button\" aria-label=\"快速切换月份\">${arrDate.slice(0, 2).join('-')}</a></div>`;\n\n            // 3. 主体内容来自getCalendarData()方法\n            strHtml += objCalender.html;\n\n            // 今天\n            // 首先，今天要在时间范围内\n            if (new Date() >= objCalender.min && new Date() <= objCalender.max) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('item')} ${CL.date('now')}\" role=\"button\">今天</a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('item')} ${CL.date('now')}\">今天</span>`;\n            }\n\n            // 容器闭合标签\n            strHtml += '</div>';\n\n            // 设置当前时间选择类型\n            eleContainer.dataset.type = 'date';\n            eleContainer.innerHTML = strHtml;\n\n            return this;\n        }\n\n        /**\n         * 选择日期范围\n         * @return {Object} 返回当前DOM对象\n         */\n        ['date-range'] (container) {\n            const eleContainer = container || this.element.target;\n\n            // 选择的日期范围数组\n            const arrDates = this[SELECTED];\n            // 当前起始日期\n            // 默认（第一次）打开使用选中日期\n            // 如果有，使用面板存储月份\n            // 因为range选择不是即时更新文本框\n            const arrDate = eleContainer.dataDate || arrDates[0];\n            eleContainer.dataDate = arrDate;\n            // 前一个月\n            const numPrevMonth = arrDate[1] - 1;\n            // 后一个月\n            const numNextMonth = arrDate[1] * 1 + 1;\n\n            // 含时间范围和对应月份日历HTML的对象\n            const objCalender = this.getCalendarData(arrDate);\n\n            // 选择时间范围完整HTML代码\n            // 1. 同样的，range容器\n            let strHtml = `<div class=\"${CL.range('x')}\">`;\n            // 2. 头部\n            strHtml = `${strHtml}<div class=\"${CL.date('head')}\"><div class=\"${CL.date('half')}\">`;\n            //  2.1 上一个月箭头\n            const datePrevMonthLastDay = new Date(arrDate[0], numPrevMonth - 1, objCalender.monthDay[numPrevMonth]);\n            // 上个月的最后1天大于min最小限制\n            if (datePrevMonthLastDay >= objCalender.min) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('prev')}\" data-month=\"${numPrevMonth}\" aria-label=\"上一个月，当前${arrDate[1]}月\"></a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('prev')}\"></span>`;\n            }\n            // 今月月份显示\n            strHtml = `${strHtml}<span class=\"${CL.date('switch')}\">${new Date(arrDate[0], numPrevMonth, arrDate[2]).toArray().slice(0, 2).join('-')}</span></div><div class=\"${CL.date('half')}\">`;\n\n            // 2.2 下下个月\n            const objDateNextMonth = new Date(arrDate[0], arrDate[1], 1);\n            const objDateAfterMonth = new Date(arrDate[0], numNextMonth, arrDate[2]);\n\n            // 下个月的当前日期在合理范围之内，则使用该月\n            if (objDateAfterMonth <= objCalender.max) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('next')}\" data-month=\"${numNextMonth}\" aria-label=\"下一个月，当前${numNextMonth}月\"></a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('next')}\"></span>`;\n            }\n\n            // 下月月份显示\n            strHtml = `${strHtml}<span class=\"${CL.date('switch')}\">${objDateNextMonth.toArray().slice(0, 2).join('-')}</span></div>`;\n\n            // 头部闭合\n            strHtml += '</div>';\n\n            // 3. 两个主体列表\n            // 这里要嵌套一层range特有的body\n            // 根据getCalendarData()方法创建两个月份日历\n            // 主体标签闭合\n            strHtml = `${strHtml}<div class=\"${CL.range('body')} ${CL.range('date', 'body')}\">\\\n            <div class=\"${CL.date('half')}\">${objCalender.html}</div>\\\n            <div class=\"${CL.date('half')}\">${this.getCalendarData(objDateNextMonth.toArray()).html}</div>\\\n            </div>`;\n\n            // 4. 确定与取消按钮\n            strHtml = `${strHtml}<div class=\"${CL.range('footer')}\">\\\n            <button class=\"ui-button\" data-type=\"primary\">确定</button>\\\n            <button class=\"ui-button\" data-type=\"normal\">取消</button>\\\n            </div>`;\n\n            // 容器闭合标签\n            strHtml += '</div>';\n\n            // 设置当前时间选择类型\n            eleContainer.dataset.type = 'date-range';\n            eleContainer.innerHTML = strHtml;\n\n            return this;\n        }\n\n        /**\n         * 选择月份\n         * @return {Object} 返回当前DOM对象\n         */\n        month (container) {\n            const eleContainer = container || this.element.target;\n\n            // 当前选择日期\n            let arrDate = this[SELECTED];\n\n            if (this.params.type.includes('datetime')) {\n                arrDate = arrDate[0];\n            }\n\n            // 对应的月份数据\n            const objMonth = this.getMonthData(arrDate);\n\n            // 返回的最大值最小值\n            const numMin = objMonth.min;\n            const numMax = objMonth.max;\n\n            // 选择月份的完整HTML代码\n            // 1. month专属类名容器\n            let strHtml = `<div class=\"${CL.month('x')}\">`;\n            // 2. 月份切换的头部\n            const numYear = arrDate[0] * 1;\n            //    为什么呢？因为年份的范围是当前年份前面6个，后面5个\n            //    例如，假设今年是2015年，则头部年份范围是2009-2020\n            strHtml = `${strHtml}<div class=\"${CL.date('head')}\">`;\n            //    2.1 是否还有上一年\n            if (numYear - 1 >= Math.floor(numMin / 100) && numYear - 1 <= Math.floor(numMax / 100)) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('prev')}\" data-year=\"${numYear - 1}\" role=\"button\" aria-label=\"上一年\"></a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('prev')}\" aria-label=\"上一年\"></span>`;\n            }\n            // 2.2 是否还有下一年\n            if (numYear + 1 >= Math.floor(numMin / 100) && numYear + 1 <= Math.floor(numMax / 100)) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('next')}\" data-year=\"${numYear + 1}\" role=\"button\" aria-label=\"下一年\"></a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('next')}\"></span>`;\n            }\n            // 头部结束\n            strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('switch')}\" data-type=\"year\" role=\"button\" title=\"快速切换年份\" aria-label=\"快速切换年份\">${numYear}</a>\\\n            </div>`;\n            // 3. 月份切换主体列表\n            strHtml += objMonth.html;\n\n            // 今月\n            // 首先，今月要在时间范围内\n            const objThisYearMonth = new Date().toArray().slice(0, 2).join('');\n            if (objThisYearMonth >= numMin && objThisYearMonth <= numMax) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('item')} ${CL.date('now')}\">今月</a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('item')} ${CL.date('now')}\">今月</span>`;\n            }\n\n            // 容器闭合标签\n            strHtml += '</div>';\n\n            // 设置当前时间选择类型\n            eleContainer.dataset.type = 'month';\n            eleContainer.innerHTML = strHtml;\n\n            return this;\n        }\n\n        /**\n         * 选择月份范围\n         * @return {Object} 返回当前DOM对象\n         */\n        ['month-range'] (container) {\n            const eleContainer = container || this.element.target;\n\n            // 当前选择日期\n            const arrDates = this[SELECTED];\n            // 当前起始日期\n            // 默认（第一次）打开使用选中日期\n            // 如果有，使用面板存储月份\n            // 因为range选择不是即时更新文本框\n            const arrDate = eleContainer.dataDate || arrDates[0];\n            eleContainer.dataDate = arrDate;\n            // 前一年\n            const numPrevYear = arrDate[0] * 1 - 1;\n            // 后一个年\n            const numNextYear = arrDate[0] * 1 + 1;\n\n            // 含时间范围和对应月份日历HTML的对象\n            const objMonth = this.getMonthData(arrDate);\n            // 最大年份\n            const numMaxYear = objMonth.max.slice(0, 4);\n            const numMinYear = objMonth.min.slice(0, 4);\n\n            // 选择时间范围完整HTML代码\n            // 1. 同样的，range容器\n            let strHtml = `<div class=\"${CL.range('x')}\">`;\n            // 2. 头部\n            strHtml = `${strHtml}<div class=\"${CL.date('head')}\">\\\n            <div class=\"${CL.date('half')}\">`;\n            //  2.1 上一年箭头\n            if (numPrevYear >= numMinYear && numPrevYear <= numMaxYear) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('prev')}\" data-year=\"${numPrevYear}\" role=\"button\" aria-label=\"上一年\"></a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('prev')}\" aria-label=\"上一年\"></span>`;\n            }\n            // 今年年份显示\n            strHtml = `${strHtml}<span class=\"${CL.date('switch')}\">${arrDate[0]}</span>\\\n            </div>\\\n            <div class=\"${CL.date('half')}\">`;\n\n            // 2.2 下一年\n            if (numNextYear >= numMinYear && numNextYear < numMaxYear) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('next')}\" data-year=\"${numNextYear}\" role=\"button\" aria-label=\"下一年\"></a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('next')}\" aria-label=\"下一年\"></span>`;\n            }\n\n            // 下月月份显示\n            strHtml = `${strHtml}<span class=\"${CL.date('switch')}\">${numNextYear}</span>\\\n            </div>`;\n\n            // 头部闭合\n            strHtml += '</div>';\n\n            // 3. 两个主体列表\n            // 这里要嵌套一层range特有的body\n            // 根据getCalendarData()方法创建两个月份日历\n            // 主体标签闭合\n            strHtml = `${strHtml}<div class=\"${CL.range('body')} ${CL.range('month', 'body')}\">\\\n            <div class=\"${CL.date('half')}\">${objMonth.html}</div>\\\n            <div class=\"${CL.date('half')}\">${this.getMonthData([numNextYear, arrDate[1], arrDate[2]]).html}</div>\\\n            </div>`;\n\n            // 4. 确定与取消按钮\n            strHtml = `${strHtml}<div class=\"${CL.range('footer')}\">\\\n            <button class=\"ui-button\" data-type=\"primary\">确定</button>\\\n            <button class=\"ui-button\" data-type=\"normal\">取消</button>\\\n            </div>`;\n\n            // 容器闭合标签\n            strHtml += '</div>';\n\n            // 设置当前时间选择类型\n            eleContainer.dataset.type = 'month-range';\n            eleContainer.innerHTML = strHtml;\n\n            return this;\n        }\n\n        /**\n         * 选择年份\n         * @return {Object} 返回当前DOM对象\n         */\n        year (container) {\n            // 元素\n            const eleContainer = container || this.element.target;\n\n            // 最大最小限制\n            let strMin = this.min;\n            let strMax = this.max;\n\n            // 最小年份和最大年份\n            let numMin = 0;\n            let numMax = 9999;\n            // 类型\n            const strType = this.params.type;\n\n            // 当前选择日期\n            let arrDate = this[SELECTED];\n\n            if (strType.includes('datetime')) {\n                arrDate = arrDate[0];\n\n                // 最大年份和最小年份\n                if (strMin) {\n                    numMin = strMin.split(/\\s+/)[0].toDate().getFullYear();\n                }\n                if (strMax) {\n                    numMax = strMax.split(/\\s+/)[0].toDate().getFullYear();\n                }\n            }\n\n            // 选择年份的完整HTML代码\n            // 1. 同样的，year专属类名容器\n            let strHtml = `<div class=\"${CL.year('x')}\">`;\n            // 2. 头部的年份切换，一切就是12年\n            //    有必要先知道当前的年份\n            const numYear = arrDate[0];\n            //    为什么呢？因为年份的范围是当前年份前面6个，后面5个\n            //    例如，假设今年是2015年，则头部年份范围是2009-2020\n            //    左右切换是没有限制的\n            strHtml = `${strHtml}<div class=\"${CL.date('head')}\">`;\n            //    年份不是你想翻就能翻到\n            //    2.1 上一个12年\n            if (numYear - 12 >= numMin && numYear - 12 <= numMax) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('prev')}\" data-year=\"${numYear - 12}\" role=\"button\" aria-label=\"上一个12年\"></a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('prev')}\"></span>`;\n            }\n            //    2.2 下一个12年\n            if (numYear + 12 >= numMin && numYear + 12 <= numMax) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('next')}\" data-year=\"${numYear + 12}\" role=\"button\" aria-label=\"下一个12年\"></a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('next')}\"></span>`;\n            }\n            // year选择是顶级类别，一定是不可点击的\n            strHtml = `${strHtml}<span class=\"${CL.date('switch')}\">${[numYear - 6, numYear + 5].join('-')}</span></div>`;\n\n            const getStrHtmlDate = () => {\n                let strHtmlDate = '';\n                let strClass = '';\n\n                for (let indexYear = numYear - 6; indexYear < numYear + 6; indexYear += 1) {\n                    // 选中态的类名\n                    strClass = CL.date('item');\n\n                    if (indexYear == numYear) {\n                        strClass = `${strClass} ${SELECTED}`;\n                    }\n\n                    // 是否在范围以内\n                    if (indexYear >= numMin && indexYear <= numMax) {\n                        strHtmlDate = `${strHtmlDate}<a href=\"javascript:\" class=\"${strClass}\">${indexYear}</a>`;\n                    } else {\n                        strHtmlDate = `${strHtmlDate}<span class=\"${strClass}\">${indexYear}</span>`;\n                    }\n                }\n\n                return strHtmlDate;\n            };\n            // 3. 年份选择的主体\n            strHtml = `${strHtml}<div class=\"${CL.year('body')}\">${getStrHtmlDate()}</div>`;\n\n            // 今年\n            // 首先，今年要在时间范围内\n            const numThisYear = new Date().getFullYear();\n            if (numThisYear >= numMin && numThisYear <= numMax) {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('item')} ${CL.date('now')}\" role=\"button\">今年</a>`;\n            } else {\n                strHtml = `${strHtml}<span class=\"${CL.date('item')} ${CL.date('now')}\">今年</span>`;\n            }\n\n            // 头部标签闭合\n            strHtml += '</div>';\n\n            // 容器闭合标签\n            strHtml += '</div>';\n\n            // 设置当前时间选择类型\n            eleContainer.dataset.type = 'year';\n            eleContainer.innerHTML = strHtml;\n\n            return this;\n        }\n\n        /**\n         * 选择小时\n         * @return {Object} 返回当前DOM对象\n         */\n        hour (container) {\n            // 元素\n            const eleContainer = container || this.element.target;\n\n            // 当前选择时间\n            const arrTime = this[SELECTED];\n\n            // 时间选择的小时间隔，默认是1小时\n            let numStep = this.step || 1;\n\n            // 最小时间，和最大时间\n            // 这里只比较小时\n            let numMin = Number(this.min.split(':')[0]) || 0;\n            let numMax = Number(this.max.split(':')[0]);\n            if (isNaN(numMax) || !this.max) {\n                numMax = 24;\n            }\n\n            // 选择小时的完整HTML\n            // 1. 同样的，专有容器\n            let strHtml = `<div class=\"${CL.hour('x')}\">`;\n\n            const getStrHtmlTime = () => {\n                let strHtmlTime = '';\n                let strHour = '';\n                let strClass = '';\n                // 遍历24小时\n                for (let indexHour = 0; indexHour < 24; indexHour += numStep) {\n                    strHour = String(indexHour).padStart(2, '0');\n\n                    // 选中态的类名\n                    strClass = CL.date('item');\n                    if (strHour == arrTime[0]) {\n                        strClass = `${strClass} ${SELECTED}`;\n                    }\n\n                    // 是否在范围以内\n                    if (indexHour >= numMin && indexHour <= numMax) {\n                        strHtmlTime = `${strHtmlTime}<a href=\"javascript:\" class=\"${strClass}\">${strHour}:00</a>`;\n                    } else {\n                        strHtmlTime = `${strHtmlTime}<span class=\"${strClass}\">${strHour}:00</span>`;\n                    }\n                }\n\n                return strHtmlTime;\n            };\n            // 2. 小时没有头部切换，直接列表们\n            strHtml = `${strHtml}<div class=\"${CL.hour('body')}\">${getStrHtmlTime()}</div>`;\n\n            // 容器闭合标签\n            strHtml += '</div>';\n\n            // 设置当前时间选择类型\n            eleContainer.dataset.type = 'hour';\n            eleContainer.innerHTML = strHtml;\n\n            return this;\n        }\n\n        /**\n         * 选择时间，多垂直列表选择模式，支持到时分秒\n         * step如果设置，则可以选择秒\n         */\n        time (container) {\n            // 元素\n            const eleContainer = container || this.element.target;\n\n            // 当前选择时间\n            let arrTime = this[SELECTED];\n            let arrDate = null;\n\n            // 如果是日期时间类型\n            const strType = this.params.type;\n            if (strType.includes('datetime')) {\n                arrDate = this[SELECTED][0];\n                arrTime = this[SELECTED][1];\n            }\n\n            let numHourSelected = Number(arrTime[0]);\n            let numMinuteSelected = Number(arrTime[1]);\n            let numSecondSelected = Number(arrTime[2]);\n\n            // 时间间隔, 默认为1秒或者1分钟\n            let numStep = this.step * 1 || 1;\n            if (numStep > 60) {\n                numStep = Math.floor(numStep / 60);\n            }\n\n            let strMin = this.min;\n            let strMax = this.max;\n\n            // 如果是日期时间选择，则时间范围与日期值强烈相关\n            if (strType.includes('datetime') && arrDate && (strMin || strMax)) {\n                let strMinDate = '';\n                let strMinTime = '';\n                if (strMin) {\n                    strMinDate = strMin.split(/\\s+/)[0];\n                    strMinTime = strMin.split(/\\s+/)[1];\n                }\n                let strMaxDate = '';\n                let strMaxTime = '';\n                if (strMax) {\n                    strMaxDate = strMax.split(/\\s+/)[0];\n                    strMaxTime = strMax.split(/\\s+/)[1];\n                }\n\n                // 如果日期范围不对\n                if ((strMinDate && arrDate.join('-').toDate() < strMinDate.toDate()) || (strMaxDate && arrDate.join('-').toDate() > strMaxDate.toDate())) {\n                    strMin = '24:60:60';\n                    strMax = '00:00:00';\n                } else if (arrDate.join('-') == strMinDate) {\n                    // 正好是最小日期，则超过的时间禁用\n                    strMin = strMinTime;\n                    strMax = '23:59:59';\n                } else if (arrDate.join('-') == strMaxDate) {\n                    // 正好是最大日期选拸禁用\n                    strMax = strMaxTime;\n                    strMin = '00:00:00';\n                }\n            }\n\n            // 默认时间范围的处理\n            strMin = strMin || '00:00:00';\n            strMax = strMax || '23:59:59';\n\n            let numMinHour = Number(strMin.split(':')[0]) || 0;\n            let numMinMinute = Number(strMin.split(':')[1]) || 0;\n            let numMinSecond = Number(strMin.split(':')[2]) || 0;\n\n            let numMaxHour = Number(strMax.split(':')[0]);\n            if (isNaN(numMaxHour)) {\n                numMaxHour = 23;\n            }\n            let numMaxMinute = Number(strMax.split(':')[1]);\n            let numMaxSecond = Number(strMax.split(':')[2]);\n            if (isNaN(numMaxMinute)) {\n                numMaxMinute = 59;\n            }\n            if (isNaN(numMaxSecond)) {\n                numMaxSecond = 59;\n            }\n\n            let arrAmpm = [];\n            if (this.datetimeformat != 'H:mm') {\n                // pm\n                arrAmpm = [0, 1].map(index => {\n                    if (index == 0) {\n                        return  {\n                            value: '上午',\n                            selected: numHourSelected <= 11\n                        };\n                    }\n                    return  {\n                        value: '下午',\n                        selected: numHourSelected > 11\n                    };\n                });\n            }\n\n            // 小时的范围\n            let arrHours = Array(24).fill().map((empty, index) => {\n                let disabled = false;\n                if (index < numMinHour || index > numMaxHour) {\n                    disabled = true;\n                }\n                // 是否隐藏\n                let visibility = true;\n                // 是否选中\n                let selected = false;\n\n                let value = String(index).padStart(2, '0');\n\n                if (this.datetimeformat != 'H:mm') {\n                    if ((index > 11 && arrAmpm[0].selected) || (index <= 11 && arrAmpm[1].selected)) {\n                        visibility = false;\n                    }\n\n                    if (index >= 12) {\n                        value = String(index - 12).padStart(2, '0');\n                    }\n                    if (value == '00') {\n                        value = '12';\n                    }\n                }\n\n                if (index == numHourSelected) {\n                    selected = true;\n                }\n\n                return {\n                    value: value,\n                    disabled: disabled,\n                    selected: selected,\n                    visibility: visibility\n                };\n            });\n\n            // 小时和分钟的禁用态处理\n            let arrMinutes = Array(60).fill().map((empty, index) => {\n                // 是否禁用\n                let disabled = false;\n                // 是否不可见\n                let visibility = true;\n                // 是否选中\n                let selected = false;\n\n                if (numHourSelected == numMinHour && index < numMinMinute) {\n                    disabled = true;\n                } else if (numHourSelected == numMaxHour && index > numMaxMinute) {\n                    disabled = true;\n                } else if (numHourSelected < numMinHour || numHourSelected > numMaxHour) {\n                    disabled = true;\n                }\n                // step的处理\n                if (arrTime.length == 2 && index % numStep != 0) {\n                    visibility = false;\n                }\n\n                if (index == numMinuteSelected) {\n                    selected = true;\n                }\n\n                return {\n                    value: String(index).padStart(2, '0'),\n                    disabled: disabled,\n                    visibility: visibility,\n                    selected: selected\n                };\n            });\n\n            let arrSeconds = Array(60).fill().map((empty, index) => {\n                // 是否禁用\n                let disabled = false;\n                // 是否不可见\n                let visibility = true;\n                // 是否选中\n                let selected = false;\n\n                if (numHourSelected == numMinHour && numMinuteSelected == numMinMinute && index < numMinSecond) {\n                    disabled = true;\n                } else if (numHourSelected == numMaxHour && numMinuteSelected == numMaxMinute && index > numMaxSecond) {\n                    disabled = true;\n                }\n                // step的处理\n                if (arrTime.length == 3 && index % numStep != 0) {\n                    visibility = false;\n                }\n\n                if (index == numSecondSelected) {\n                    selected = true;\n                }\n\n                return {\n                    value: String(index).padStart(2, '0'),\n                    disabled: disabled,\n                    visibility: visibility,\n                    selected: selected\n                };\n            });\n\n            if (eleContainer.innerHTML) {\n                // 如果有内容，基于DOM比对\n                [...eleContainer.querySelectorAll('button')].forEach(function (button) {\n                    // 所有样式先还原\n                    button.classList.remove(SELECTED);\n                    button.disabled = false;\n                    button.dataset.visibility = 'true';\n                    // 按钮再所在分组的索引值\n                    let numIndexButton = button.dataset.index;\n                    // 再分别匹配处理\n                    let strButtonType = button.parentElement.dataset.type;\n                    if (strButtonType == 'ampm') {\n                        if (arrAmpm[numIndexButton].selected) {\n                            button.classList.add(SELECTED);\n                        }\n                    } else {\n                        // 时分秒可以统一处理\n                        let objTypeData = {\n                            hour: arrHours,\n                            minute: arrMinutes,\n                            second: arrSeconds\n                        };\n                        let objDataMatch = objTypeData[strButtonType][numIndexButton];\n                        if (objDataMatch.selected) {\n                            button.classList.add(SELECTED);\n                        }\n                        if (objDataMatch.disabled) {\n                            button.disabled = true;\n                        }\n                        if (objDataMatch.visibility == false) {\n                            button.dataset.visibility = 'false';\n                        }\n                    }\n                });\n\n                return this;\n            }\n\n            // 选择时间的完整HTML\n            // 1. 外部的容器，含有专有容器类名，可以重置内部的一些样式\n            let strHtml = `<div class=\"${CL.time('x')}\" data-step=\"${numStep}\">`;\n\n            // 上午下午\n            if (this.datetimeformat != 'H:mm') {\n                strHtml = strHtml + `<div class=\"${CL.time('col')}\" data-type=\"ampm\">\n                    ${arrAmpm.map((obj, index) => `<button class=\"${CL.time('item')}${obj.selected ? ' selected' : ''}\" data-index=\"${index}\">${obj.value}</button>`).join('')}\n                </div>`;\n            }\n            // 时分秒\n            strHtml = strHtml + `<div class=\"${CL.time('col')}\" data-type=\"hour\">\n                ${arrHours.map((obj, index) => `<button class=\"${CL.time('item')}${obj.selected ? ' ' + SELECTED : ''}\" data-index=\"${index}\"${obj.disabled ? ' disabled' : ''} data-visibility=\"${obj.visibility}\">${obj.value}</button>`).join('')}\n            </div>`;\n            strHtml = strHtml + `<div class=\"${CL.time('col')}\" data-type=\"minute\">\n                ${arrMinutes.map((obj, index) => `<button class=\"${CL.time('item')}${obj.selected ? ' ' + SELECTED : ''}\" data-index=\"${index}\"${obj.disabled ? ' disabled' : ''} data-visibility=\"${obj.visibility}\">${obj.value}</button>`).join('')}\n            </div>`;\n\n            if (arrTime.length == 3) {\n                strHtml = strHtml + `<div class=\"${CL.time('col')}\" data-type=\"second\">\n                    ${arrSeconds.map((obj, index) => `<button class=\"${CL.time('item')}${obj.selected ? ' ' + SELECTED : ''}\" data-index=\"${index}\"${obj.disabled ? ' disabled' : ''} data-visibility=\"${obj.visibility}\">${obj.value}</button>`).join('')}\n                </div>`;\n            }\n\n            strHtml += '</div>';\n\n            // 设置当前时间选择类型\n            eleContainer.dataset.type = 'time';\n            eleContainer.innerHTML = strHtml;\n        }\n\n        /**\n         * 选择分钟\n         * @return {Object} 返回当前DOM对象\n         */\n        minute (container) {\n            // 元素\n            const eleContainer = container ||  this.element.target;\n\n            // 当前选择时间\n            const arrTime = this[SELECTED];\n\n            // 分钟时间间隔, 默认为5分钟\n            const numStep = this.step * 1 || 1;\n\n            // 最小时间，和最大时间\n            // 跟小时不同，这里必须符合00:00格式\n            // 由于格式固定，我们直接去除':'后的值进行比较\n            // 例如：10:20 → 1020\n            let numMin = (this.min || '0').replace(':', '') * 1;\n            let numMax = (this.max || '2359').replace(':', '') * 1;\n\n            // 选择分钟的完整HTML\n            // 1. 外部的容器，含有专有容器类名，可以重置内部的一些样式\n            let strHtml = `<div class=\"${CL.minute('x')}\" data-step=\"${numStep}\">`;\n            // 2. 头部小时的左右切换\n            const hour = arrTime[0] * 1;\n            //   首先是公共部分\n            strHtml = `${strHtml}<div class=\"${CL.date('head')}\">`;\n\n            //   2.1 可不可往前翻\n            if (hour <= Math.floor(numMin / 100)) {\n                strHtml = `${strHtml}<span class=\"${CL.date('prev')}\"></span>`;\n            } else {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('prev')}\" data-hour=\"${hour - 1}\" role=\"button\" aria-label=\"上一个小时\"></a>`;\n            }\n            // 2.2 可不可以往后翻\n            if (hour >= Math.floor(numMax / 100)) {\n                strHtml = `${strHtml}<span class=\"${CL.date('next')}\"></span>`;\n            } else {\n                strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('next')}\" data-hour=\"${hour + 1}\" role=\"button\" aria-label=\"下一个小时\"></a>`;\n            }\n\n            // 头部结束的公共html部分\n            strHtml = `${strHtml}<a href=\"javascript:\" class=\"${CL.date('switch')}\" data-type=\"hour\">${arrTime[0]}:00</a></div>`;\n\n            const getStrHtmlTime = () => {\n                let strHtmlTime = '';\n                let strMinute = '';\n                let strClass = '';\n                // 遍历60分钟\n                for (let indexMinute = 0; indexMinute < 60; indexMinute += numStep) {\n                    strMinute = `${indexMinute}`;\n                    if (strMinute.length == 1) {\n                        strMinute = `0${strMinute}`;\n                    }\n\n                    // 基本样式\n                    strClass = CL.date('item');\n\n                    // 是否在时间范围内\n                    if ((arrTime[0] + strMinute) * 1 >= numMin && (arrTime[0] + strMinute) * 1 <= numMax) {\n                        // 选中态\n                        if (strMinute == arrTime[1]) {\n                            strClass = `${strClass} ${SELECTED}`;\n                        }\n                        strHtmlTime = `${strHtmlTime}<a href=\"javascript:\" class=\"${strClass}\">${[arrTime[0], strMinute].join(':')}</a>`;\n                    } else {\n                        strHtmlTime = `${strHtmlTime}<span class=\"${strClass}\">${[arrTime[0], strMinute].join(':')}</span>`;\n                    }\n                }\n\n                return strHtmlTime;\n            };\n            // 3. 分钟主体\n            strHtml = `${strHtml}<div class=\"${CL.minute('body')}\">${getStrHtmlTime()}</div>`;\n\n            // 容器闭合标签\n            strHtml += '</div>';\n\n            // 设置当前时间选择类型\n            eleContainer.dataset.type = 'minute';\n            eleContainer.innerHTML = strHtml;\n\n            return this;\n        }\n\n        // 日期时间选择\n        datetime (container) {\n            // 元素\n            const eleContainer = container || this.element.target;\n\n            // 创建容器元素\n            eleContainer.dataset.type = 'datetime';\n            eleContainer.innerHTML = `<div class=\"${CL.datetime('x')}\"></div>`;\n\n            // 创建两个容器元素\n            const eleDateX = document.createElement('div');\n            const eleTimeX = document.createElement('div');\n            // 类名\n            eleDateX.className = CL.datetime('date');\n            eleTimeX.className = CL.datetime('time');\n            // append到容器中\n            eleContainer.querySelector('div').append(eleDateX, eleTimeX);\n\n            // 设置日期和时间内容\n            this.date(eleDateX);\n            this.time(eleTimeX);\n\n            return this;\n        }\n\n        ['datetime-local'] () {\n            return this.datetime();\n        }\n\n        /**\n         * 面板的定位\n         * @return 当前DOM元素对象\n         */\n        position () {\n            // 定位\n            this.follow();\n\n            return this;\n        }\n\n        /**\n         * 日期选择面板的显示\n         * @return {Object} 当前DOM元素对象\n         */\n        show () {\n            // 元素\n            const eleContainer = this.element.target;\n\n            if (this.disabled) {\n                return this;\n            }\n\n            // 根据value更新SELECTED\n            this.format();\n\n            // 不同的类名显示不同的内容\n            if (this.params.type == 'date-range') {\n                // 存储当前日期范围数据，以便取消的时候可以正确还原\n                if (!this.dataRangeSelected) {\n                    this.dataRangeSelected = this[SELECTED];\n                }\n                this['date-range']();\n            } else if (this.params.type == 'month-range') {\n                // 存储当前日期范围数据，以便取消的时候可以正确还原\n                if (!this.dataRangeSelected) {\n                    this.dataRangeSelected = this[SELECTED];\n                }\n                this['month-range']();\n            } else if (this[this.params.type]) {\n                this[this.params.type]();\n            } else {\n                this.date();\n            }\n\n            // 如果面板对象在内存中，非文档中，则载入\n            if (document.body.contains(eleContainer) == false) {\n                document.body.appendChild(eleContainer);\n                // DOM准备完毕\n                this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n            }\n\n            eleContainer.style.display = 'inline-block';\n            this.classList.add(ACTIVE);\n\n            // 定位\n            this.position();\n\n            // 改变显示与隐藏的标志量\n            this.display = true;\n\n            // 选中的元素进入视区\n            let eleTimeSelectedAll = null;\n            if (this.params.type == 'time') {\n                eleTimeSelectedAll = eleContainer.querySelectorAll('.' + SELECTED);\n            } else if (this.params.type.includes('datetime')) {\n                eleTimeSelectedAll = eleContainer.querySelectorAll('[data-type=\"time\"] .' + SELECTED);\n            }\n\n            if (eleTimeSelectedAll) {\n                eleTimeSelectedAll.forEach((item, index) => {\n                    if (item.scrollIntoViewIfNeeded) {\n                        item.scrollIntoViewIfNeeded();\n                    } else if (item.offsetTop - 5 > item.parentElement.scrollTop + item.parentElement.clientHeight || item.offsetTop - 5 < item.parentElement.scrollTop) {\n                        // firefox尚未支持scrollIntoViewIfNeeded()\n                        item.parentElement.scrollTop = item.offsetTop - 5;\n                    }\n                    if (index == 0) {\n                        item.focus({\n                            preventScroll: true\n                        });\n                    }\n                });\n            }\n\n            // 触发自定义事件 - show\n            this.dispatchEvent(new CustomEvent('show', {\n                detail: {\n                    type: 'ui-datetime'\n                }\n            }));\n\n            return this;\n        }\n\n        /**\n         * 日期选择面板的隐藏\n         * @return {Object} 当前DOM元素对象\n         */\n        hide () {\n            // 元素\n            const eleContainer = this.element.target;\n\n            if (this.display == true) {\n                eleContainer.style.display = 'none';\n                this.classList.remove(ACTIVE);\n\n                // 焦点位置还原\n                if (document.activeElement == document.body || eleContainer.contains(document.activeElement)) {\n                    this.focus();\n                    this.blur();\n                }\n            }\n\n            // 改变显示与隐藏的标志量\n            this.display = false;\n\n            // 触发自定义事件 - hide\n            this.dispatchEvent(new CustomEvent('hide', {\n                detail: {\n                    type: 'ui-datetime'\n                }\n            }));\n\n            return this;\n        }\n\n        // 自定义组件进入页面时候\n        connectedCallback () {\n            if (this.isConnectedCallback) {\n                return;\n            }\n            // 普通文本类型变成日期类型\n            let strType = this.getAttribute('type');\n            if (['date', 'year', 'month', 'time', 'hour', 'minute', 'datetime', 'datetime-local', 'date-range', 'month-range'].includes(strType) == false) {\n                strType = 'date';\n\n                // 移除type属性可以和CSS中设置的尺寸的选择器匹配\n                if (strType) {\n                    this.removeAttribute('type');\n                }\n            }\n            // 关联的参数\n            this.params = this.params || {};\n            // 输入框应用的时间选择类型\n            this.params.type = strType;\n\n            // 容器元素\n            let eleContainer = null;\n\n            // readonly 文本输入框不可直接修改\n            this.setAttribute('readonly', 'readonly');\n            this.toggleAttribute('required', true);\n\n            let strId = this.id;\n            if (!strId) {\n                // 如果没有id, 创建随机id\n                strId = `lulu_${String(Math.random()).replace('0.', '')}`;\n                this.id = strId;\n            }\n\n            // 初始值\n            let strInitValue = this.getAttribute('value') || this.value;\n\n            // 初始值转换成时间值\n            switch (strType) {\n                case 'date': case 'year': case 'month': {\n                    // 日期\n                    const objInitDate = strInitValue.toDate();\n                    const arrDate = objInitDate.toArray();\n\n                    // 赋值\n                    if (strType == 'date') {\n                        this.value = arrDate.join('-');\n                    } else if (strType == 'year') {\n                        this.value = arrDate[0];\n                    } else if (strType == 'month') {\n                        this.value = arrDate.slice(0, 2).join('-');\n                    }\n\n                    // eg. [2015,07,20]\n                    this[SELECTED] = arrDate;\n\n                    break;\n                }\n                case 'time': {\n                    const arrTime = strInitValue.toTime();\n                    // 当前时分秒\n                    let dateCurrent = new Date();\n                    let numHour = dateCurrent.getHours();\n                    let numMinute = dateCurrent.getMinutes();\n                    let numSecond = dateCurrent.getSeconds();\n                    // 时间\n                    let strHour = String(arrTime[0] || numHour).padStart(2, '0');\n                    let strMinute = String(arrTime[1] || numMinute).padStart(2, '0');\n                    let strSecond = String(arrTime[2] || numSecond).padStart(2, '0');\n\n                    // 如果有设置合理的step值，且类型是time，则支持秒\n                    let numStep = this.step;\n\n                    if (strType == 'time' && ((!numStep && arrTime[2]) || (numStep > 0 && numStep <= 30))) {\n                        this.value = [strHour, strMinute, strSecond].join(':');\n                    } else {\n                        this.value = [strHour, strMinute].join(':');\n                    }\n\n                    this[SELECTED] = [strHour, strMinute, strSecond];\n\n                    break;\n                }\n                case 'hour': case 'minute': {\n                    const arrTime = strInitValue.toTime();\n                    // 当前时分秒\n                    let dateCurrent = new Date();\n                    let numHour = dateCurrent.getHours();\n                    let numMinute = dateCurrent.getMinutes();\n                    // 时间\n                    let strHour = String(arrTime[0] || numHour).padStart(2, '0');\n                    let strMinute = String(arrTime[1] || numMinute).padStart(2, '0');\n\n                    if (!arrTime[0] && strType == 'hour') {\n                        strMinute = '00';\n                    }\n\n                    this.value = [strHour, strMinute].join(':');\n\n                    this[SELECTED] = [strHour, strMinute];\n\n                    break;\n                }\n                case 'datetime': case 'datetime-local': {\n                    // 日期和时间\n                    const arrDateTime = strInitValue.split(/\\s+|T/);\n                    const arrPart1 = arrDateTime[0].toDate().toArray();\n                    // 默认的时间\n                    let dateCurrent = new Date();\n                    let arrPart2 = [String(dateCurrent.getHours()).padStart(2, '0'), String(dateCurrent.getMinutes()).padStart(2, '0')];\n                    if (arrDateTime[1] && arrDateTime[1].includes(':')) {\n                        arrPart2 = arrDateTime[1].toTime();\n                    }\n                    this.value = arrPart1.join('-') + ' ' + arrPart2.join(':');\n\n                    this[SELECTED] = [arrPart1, arrPart2];\n\n                    break;\n                }\n                case 'date-range': case 'month-range': {\n                    // 日期范围\n                    let objBeginDate = new Date();\n                    let objEndDate = new Date();\n                    // 前后时间字符串\n                    const arrRange = strInitValue.split(' ');\n                    // 有如下一些情况：\n                    // 1. 空，则选择范围就是今日\n                    // 2. 只有一个时间，则选择范围只这个时间到今天这个范围\n                    // 3. 其他就是正常的\n                    if (strInitValue != '' && arrRange.length == 1) {\n                        const someDate = arrRange[0].toDate();\n                        if (someDate.getTime() > objBeginDate.getTime()) {\n                            objEndDate = someDate;\n                        } else {\n                            objBeginDate = someDate;\n                        }\n                    } else {\n                        objBeginDate = arrRange[0].toDate();\n                        objEndDate = arrRange[arrRange.length - 1].toDate();\n                    }\n                    // 赋值\n                    const arrBegin = objBeginDate.toArray();\n                    const arrEnd = objEndDate.toArray();\n\n                    if (strType == 'date-range') {\n                        this.value = `${arrBegin.join('-')} 至 ${arrEnd.join('-')}`;\n                    } else {\n                        this.value = `${arrBegin.slice(0, 2).join('-')} 至 ${arrEnd.slice(0, 2).join('-')}`;\n                    }\n\n                    // 存储\n                    this[SELECTED] = [arrBegin, arrEnd];\n\n                    break;\n                }                \n            }\n\n            // time时间类型的是H:mm还是ah:mm的判断\n            if (/time/.test(strType)) {\n                // 默认是24小时类型，不支持time类型输入框的浏览器会使用此类型，例如Safari\n                this.datetimeformat = 'H:mm';\n\n                if (!strType.includes('datetime')) {\n                    // 根据尺寸判断\n                    let eleInputTmp = document.createElement('input');\n                    eleInputTmp.setAttribute('type', 'time');\n                    eleInputTmp.value = '00:00';\n                    document.body.append(eleInputTmp);\n                    // 默认不可见\n                    eleInputTmp.style.position = 'absolute';\n                    eleInputTmp.style.left = '-999px';\n                    eleInputTmp.style.fontFamily = 'revert';\n                    // 如果浏览器不支持time类型输入框，例如Safari，则使用H:mm格式\n                    if (eleInputTmp.type == 'time') {\n                        eleInputTmp.style.fontSize = '20px';\n                        // 获取此时输入框的尺寸\n                        let numWidthOrigin = eleInputTmp.clientWidth;\n                        // 修改尺寸\n                        eleInputTmp.style.fontSize = '30px';\n                        // 比较前后尺寸变化的差异\n                        let numDiffWidth = eleInputTmp.clientWidth - numWidthOrigin;\n                        // 可以判断输入框字符个数\n                        let numLetters = Math.ceil(numDiffWidth / 10);\n                        if (numLetters >= 5) {\n                            this.datetimeformat = 'ah:mm';\n                        }\n                        eleInputTmp.remove();\n                    }\n                }\n            }\n\n            // 容器元素的创建\n            if (!eleContainer) {\n                eleContainer = document.createElement('div');\n                eleContainer.classList.add(CL.date('container'));\n\n                // keyboard键盘无障碍访问需要\n                const strRandId = `lulu_${String(Math.random()).replace('0.', '')}`;\n                eleContainer.setAttribute('id', strRandId);\n                eleContainer.classList.add('ESC');\n                this.setAttribute('data-target', strRandId);\n                // 记录input的id\n                eleContainer.setAttribute('data-id', strId);\n            }\n\n            // 暴露的一些数据\n            // 关联的元素\n            this.element = this.element || {};\n            this.element.target = eleContainer;\n\n            this.events();\n\n            // 全局事件\n            this.dispatchEvent(new CustomEvent('connected', {\n                detail: {\n                    type: 'ui-datetime'\n                }\n            }));\n\n            this.isConnectedCallback = true;\n        }\n    }\n\n    return Component;\n})();\n\nif (!customElements.get('ui-datetime')) {\n    customElements.define('ui-datetime', DateTime, {\n        extends: 'input'\n    });\n}\n\n// export default DateTime;\n\n/**\n * @Validate.js\n * @author zhangxinxu\n * @version\n * Created: 15-08-19\n * @edited: 20-08-17 edit by wanghao\n */\n\n\n/**\n * 基于HTML5规范的表单验证方法\n * 根据原生属性:type, required, min, max, minlength, maxlength, step, pattern等属性进行验证\n * 使用原生checkValidity方法名，以及{\n    badInput: false\n    customError: false\n    patternMismatch: false\n    rangeOverflow: false\n    rangeUnderflow: false\n    stepMismatch: false\n    tooLong: false\n    tooShort: false\n    typeMismatch: false\n    valid: true\n    valueMissing: false\n   }\n   等参数名。\n * 支持new实例构造，例如：\n * new Validate(el, options);\n * 很多验证规则基于其他UI组件特征\n */\n\n// import './ErrorTip.js';\n\nconst Validate = (() => {\n    // 全角转半角方法\n    window.DBC2SBC = (str) => {\n        let result = '';\n        let i, code;\n        for (i = 0; i < str.length; i++) {\n            code = str.charCodeAt(i);\n            if (code >= 65281 && code <= 65373) {\n                result += String.fromCharCode(str.charCodeAt(i) - 65248);\n            } else if (code == 12288) {\n                result += String.fromCharCode(str.charCodeAt(i) - 12288 + 32);\n            } else {\n                result += str.charAt(i);\n            }\n        }\n\n        return result;\n    };\n\n    // 滚动到顶部缓动实现\n    // rate表示缓动速率，默认是2\n    window.scrollTopTo = (top, callback) => {\n        let scrollTop = document.scrollingElement.scrollTop;\n        const rate = 2;\n\n        const funTop = () => {\n            scrollTop = scrollTop + (top - scrollTop) / rate;\n\n            // 临界判断，终止动画\n            if (Math.abs(scrollTop - top) <= 1) {\n                document.scrollingElement.scrollTop = top;\n                callback && callback();\n                return;\n            }\n            document.scrollingElement.scrollTop = scrollTop;\n            // 动画gogogo!\n            requestAnimationFrame(funTop);\n        };\n        funTop();\n    };\n\n    // 一些全局的属性和方法\n    document.validate = (function () {\n        return {\n            reg: {\n                email: '^[a-z0-9._%-]+@([a-z0-9-]+\\\\.)+[a-z]{2,4}$',\n                number: '^\\\\-?\\\\d+(\\\\.\\\\d+)?$',\n                url: \"^(http|https)\\\\:\\\\/\\\\/[a-z0-9\\\\-\\\\.]+\\\\.[a-z]{2,3}(:[a-z0-9]*)?\\\\/?([a-z0-9\\\\-\\\\._\\\\:\\\\?\\\\,\\\\'\\\\/\\\\\\\\\\\\+&amp;%\\\\$#\\\\=~])*$\",\n                tel: '^1\\\\d{10}$',\n                zipcode: '^\\\\d{6}$',\n                date: '^\\\\d{4}\\\\-(0\\\\d|1[0-2])\\\\-([0-2]\\\\d|3[0-1])$',\n                time: '^[0-2]\\\\d\\\\:[0-5]\\\\d$',\n                hour: '^[0-2]\\\\d\\\\:00$',\n                minute: '^[0-2]\\\\d\\\\:[0-5]\\\\d$',\n                'date-range': '^\\\\d{4}(\\\\-\\\\d{2}){2}\\\\s至\\\\s\\\\d{4}(\\\\-\\\\d{2}){2}$',\n                'month-range': '^\\\\d{4}\\\\-\\\\d{2}\\\\s至\\\\s\\\\d{4}\\\\-\\\\d{2}$'\n            },\n\n            name: {\n                email: '邮箱',\n                tel: '手机号码',\n                url: '网址',\n                zipcode: '邮编',\n                password: '密码',\n                number: '数值',\n                range: '数值',\n                date: '日期',\n                year: '年份',\n                month: '月份',\n                hour: '小时',\n                minute: '分钟',\n                time: '时间',\n                datetime: '日期时间',\n                'date-range': '日期范围',\n                'month-range': '月份范围'\n            },\n\n            // 选中某范围文字内容的拓展方法\n            selectRange (element, start, end) {\n                if (!element) {\n                    return;\n                }\n                if (element.createTextRange) {\n                    const objRange = element.createTextRange();\n                    objRange.collapse(true);\n                    objRange.moveEnd('character', end);\n                    objRange.moveStart('character', start);\n                    objRange.select();\n                } else if (element.focus) {\n                    element.focus();\n                    element.setSelectionRange(start, end);\n                }\n            },\n\n            // 电话号码过滤成符合要求的号码，省去用户自己处理\n            // 例如我们从某个地方复制电话号码，可能是短横线相连\n            // 或者前面带+86\n            getTel (tel) {\n                let strTel = tel || '';\n                strTel = strTel.replace('+86', '');\n                // 如果此时剩余所有数字正好11位\n                if (strTel.match(/\\d/) && strTel.match(/\\d/g).length == 11) {\n                    strTel = strTel.replace(/\\D/g, '');\n                }\n                return strTel;\n            },\n\n            // 获得字符长度\n            // @element  Object   input/textarea表单控件元素\n            // @max  Number   返回满足最大值时候的真实字符长度\n            getLength (element, max) {\n                if (element.type == 'password') {\n                    return max ? max : element.value.length;\n                }\n                // 语言属性和trim后的值\n                const strAttrLang = element.getAttribute('lang');\n                const strValue = element.value.trim();\n                if (!strAttrLang) {\n                    return max ? max : strValue.length;\n                }\n                if (strValue == '') {\n                    return 0;\n                }\n\n                // 中文和英文计算字符个数的比例\n                let numRatioCh = 1;\n                let numRatioEn = 1;\n\n                if (/zh/i.test(strAttrLang)) {\n                    // 1个英文半个字符\n                    numRatioEn = 0.5;\n                } else if (/en/i.test(strAttrLang)) {\n                    // 1个中文2个字符\n                    numRatioCh = 2;\n                }\n\n                // 下面是中文或全角等字符正则\n                if (!max) {\n                    const lenOriginCh = strValue.replace(/[\\x00-\\xff]/g, '').length;\n                    const lenOriginEn = strValue.length - lenOriginCh;\n\n                    // 根据比例返回最终长度\n                    return Math.ceil(lenOriginEn * numRatioEn) + Math.ceil(lenOriginCh * numRatioCh);\n                }\n                let numStart = 0;\n                let lenMatch = max;\n\n                strValue.split('').forEach((letter, index) => {\n                    if (numStart >= max) {\n                        return;\n                    }\n                    if (/[\\x00-\\xff]/.test(letter)) {\n                        // 如果字符是中文或全角\n                        numStart += numRatioEn;\n                    } else {\n                        // 如果字符是英文\n                        numStart += numRatioCh;\n                    }\n\n                    if (numStart >= max) {\n                        lenMatch = index + 1;\n                    }\n                });\n\n                return lenMatch;\n            },\n\n            // 获得并重置type\n            getType (element) {\n                // 控件的类型\n                // 这里不能直接element.type获取，否则，类似email类型直接就是text类型\n                // 但是，有些元素的type是隐式的，例如textarea，因此element.type还是需要的\n                const strAttrType = element.getAttribute('type');\n                let strType = strAttrType || element.type || '';\n\n                if (strType == 'select-one') {\n                    strType = 'select';\n                }\n\n                return strType;\n            },\n\n            /**\n             * 返回对应的提示信息\n             * @param  {[type]} element 提示元素\n             * @return {String}         返回对应的提示信息\n             */\n            getReportText (element) {\n                const defaultPrompt = {\n                    name: this.name,\n                    badInput: '值无效',\n                    customError: '包含错误',\n                    patternMismatch: {\n                        pattern: '内容格式不符合要求',\n                        multiple: '某项内容格式不符合要求'\n                    },\n                    valueMissing: {\n                        radio: '请选择一个选项',\n                        checkbox: '如果要继续，请选中此框',\n                        select: '请选择列表中的一项',\n                        'select-one': '请选择列表中的一项',\n                        empty: '请填写此字段'\n                    },\n                    rangeOverflow: '值偏大',\n                    rangeUnderflow: '值偏小',\n                    stepMismatch: '值不在间隔要求范围内',\n                    tooLong: '内容长度偏大',\n                    tooShort: '内容长度偏小',\n                    typeMismatch: '值和输入框类型不匹配'\n                };\n\n                if (!element) {\n                    return '';\n                }\n\n                // 验证信息\n                const objValidateState = element.validity;\n\n                // 如果没有错误，没有任何返回\n                if (objValidateState.valid == true) {\n                    return '';\n                }\n\n                // 最终的提示文字\n                let strFinalText = '';\n\n                // 元素的id, type等\n                const strId = element.id;\n                const strType = this.getType(element);\n\n                // 元素上自定义的提示信息\n                // 元素存储的提示信息，主要是自定义方法返回的自定义提示\n                const customValidate = element.customValidate || {};\n                const optionPrompt = customValidate.report || {};\n\n                // 错误提示关键字\n                const strName = defaultPrompt.name[strType] || (function () {\n                    if (!customValidate.label || !strId || /checkbox|radio/.test(strType)) {\n                        return;\n                    }\n                    let strTextLabel = '';\n                    // 从label动态获取提示数据\n                    document.querySelectorAll('label[for=\"' + strId + '\"]').forEach(function (eleLabel) {\n                        const eleLabelClone = eleLabel.cloneNode(true);\n                        // 只使用裸露的文字作为提示关键字\n                        [].slice.call(eleLabelClone.children).forEach(function (eleChild) {\n                            eleChild.remove();\n                        });\n\n                        // 去除数字和冒号\n                        const strLabelCloneText = eleLabelClone.innerHTML.trim().replace(/\\d/g, '').replace('：', '');\n                        // 内容最长的那个元素作为提示文字\n                        if (strLabelCloneText.length > strTextLabel.length) {\n                            strTextLabel = strLabelCloneText;\n                        }\n                    });\n                    // 提示关键字显然不会小于2个字\n                    // 不会是纯数字\n                    if (strTextLabel.length >= 2) {\n                        return strTextLabel;\n                    }\n                })();\n\n                // 开始一个一个确认提示\n                if (objValidateState.valueMissing) {\n                    strFinalText = optionPrompt.valueMissing;\n                    // 如果没有对应的自定义提示\n                    if (!strFinalText) {\n                        // 则使用默认的提示：\n                        // 1. 根据类型关键字组装的提示\n                        if (strType && strName) {\n                            if (strType != 'select') {\n                                strFinalText = strName + '不能为空';\n                            } else {\n                                strFinalText = '您尚未选择' + strName;\n                            }\n                        } else {\n                            // 2. 默认的missing几个错误提示\n                            strFinalText = defaultPrompt.valueMissing[strType];\n                        }\n\n                        strFinalText = strFinalText || defaultPrompt.valueMissing.empty;\n                    }\n                } else if (objValidateState.patternMismatch) {\n                    // 首先，优先使用自定义提示是一样的\n                    strFinalText = optionPrompt.patternMismatch;\n\n                    if (!strFinalText) {\n                        // 然后确定是否是多值\n                        const isMultiple = element.hasAttribute('multiple') && element.value.split(',').length > 1;\n\n                        strFinalText = defaultPrompt.patternMismatch[isMultiple ? 'multiple' : 'pattern'];\n                        // 然后\n                        if (strType && strName) {\n                            // 1. 试试关键字提示\n                            strFinalText = strName + strFinalText;\n                        }\n                    }\n                } else if (objValidateState.badInput) {\n                    // 优先使用自定义提示是一样的\n                    strFinalText = optionPrompt.badInput;\n\n                    if (!strFinalText) {\n                        strFinalText = (strName || '') + defaultPrompt.badInput;\n                    }\n                } else if (objValidateState.typeMismatch) {\n                    // 优先使用自定义提示是一样的\n                    strFinalText = optionPrompt.typeMismatch;\n\n                    if (!strFinalText) {\n                        strFinalText = defaultPrompt.typeMismatch;\n                        if (strName) {\n                            strFinalText = strFinalText.replace('输入框', strName);\n                        }\n                    }\n                } else if (objValidateState.rangeUnderflow || objValidateState.rangeOverflow) {\n                    // 先看看有没有自定义的提示\n                    strFinalText = optionPrompt.rangeUnderflow || optionPrompt.rangeOverflow;\n\n                    if (!strFinalText && strType && strName) {\n                        let strMin = element.getAttribute('min');\n                        let strMax = element.getAttribute('max');\n\n                        if (strType == 'month-range') {\n                            strMin = strMin.slice(0, 7);\n                            strMax = strMax.slice(0, 7);\n                        }\n\n                        const strTextBigger = '必须要大于或等于' + strMin;\n                        const strTextSmall = '必须要小于或等于' + strMax;\n\n                        // 同时范围超出，一定是日期范围\n                        if (objValidateState.rangeUnderflow && objValidateState.rangeOverflow) {\n                            strFinalText = '起始日期' + strTextBigger + '，结束日期' + strTextSmall;\n                        } else if (objValidateState.rangeUnderflow) {\n                            strFinalText = strName + strTextBigger;\n                            // 如果是日期范围\n                            if (strType.slice(-6) == '-range') {\n                                strFinalText = '起始日期' + strTextBigger;\n                            }\n                        } else {\n                            strFinalText = strName + strTextSmall;\n                            // 如果是日期范围\n                            if (strType.slice(-6) == '-range') {\n                                strFinalText = '结束日期' + strTextSmall;\n                            }\n                        }\n                    }\n\n                    strFinalText = strFinalText || '值不在要求的范围内';\n                } else if (objValidateState.stepMismatch) {\n                    // 优先使用自定义提示是一样的\n                    strFinalText = optionPrompt.stepMismatch;\n\n                    if (!strFinalText) {\n                        const numMin = element.getAttribute('min') * 1;\n                        const numMax = element.getAttribute('max') * 1;\n                        const numStep = element.getAttribute('step') * 1 || 1;\n\n                        if (strType == 'number' || strType == 'range') {\n                            strFinalText = '请输入有效的值。两个最接近的有效值是' + (function () {\n                                const numValue = element.value.trim() * 1;\n                                let numClosest = numMin;\n                                for (let start = numMin; start < numMax; start += numStep) {\n                                    if (start < numValue && (start + numStep) > numValue) {\n                                        numClosest = start;\n                                        break;\n                                    }\n                                }\n\n                                return [numClosest, numClosest + numStep].join('和');\n                            })();\n                        } else {\n                            strFinalText = '请' + (element.hasAttribute('readonly') ? '选择' : '输入') + '有效的值。' + (strName || '') + '间隔是' + numStep;\n                        }\n                    }\n\n                    strFinalText = strFinalText || defaultPrompt.stepMismatch;\n                } else if (objValidateState.tooLong || objValidateState.tooShort) {\n                    // 输入内容太多或太少\n                    const strAttrLang = element.getAttribute('lang');\n                    let strTextCharLength = '';\n\n                    if (/zh/i.test(strAttrLang)) {\n                        strTextCharLength = '个汉字(2字母=1汉字)';\n                    } else if (/en/i.test(strAttrLang)) {\n                        strTextCharLength = '个字符(1汉字=2字符)';\n                    }\n\n                    if (objValidateState.tooLong) {\n                        // 先看看有没有自定义的提示\n                        strFinalText = optionPrompt.tooLong;\n\n                        if (!strFinalText) {\n                            const strMaxLength = element.maxlength || element.getAttribute('maxlength');\n\n                            strFinalText = (strName || '') + '内容长度不能大于' + strMaxLength.replace(/\\D/g, '') + strTextCharLength;\n                        }\n                    } else {\n                        // 先看看有没有自定义的提示\n                        strFinalText = optionPrompt.tooShort;\n                        if (!strFinalText) {\n                            const strMinLength = element.getAttribute('minlength');\n\n                            strFinalText = '内容长度不能小于' + strMinLength + strTextCharLength;\n                        }\n                    }\n                } else if (objValidateState.customError) {\n                    // 先看看有没有自定义的提示\n                    strFinalText = optionPrompt.customError || defaultPrompt.customError;\n                }\n\n                if (typeof strFinalText == 'function') {\n                    strFinalText = strFinalText.call(element, element);\n                }\n\n                return strFinalText;\n            },\n\n            /*\n            ** 验证一般包括下面几个个方向：\n            ** 1. 是否required同时值为空\n            ** 2. 是否数据匹配错误(pattern, type)\n            ** 3. 是否超出范围(min/max/step)\n            ** 4. 内容超出限制(minlength, maxlength)\n            ** 下面的这些方法就是上面3个方向判断\n            ** 其中，参数element为DOM对象\n            ** 返回数据规则如下：\n            ** 如果没有把柄，返回false;\n            ** 如果真的有误，则返回错误类别：{\n                  type: ''\n               }\n            */\n\n            /**\n             * 判断元素是否为空的验证\n             * @param  Element  element 验证的DOM元素\n             * @return Object           返回验证的状态对象\n             */\n            getMissingState (element) {\n                const objValidateState = {\n                    valueMissing: false\n                };\n\n                // 主要针对required必填或必选属性的验证\n                if (!element || element.disabled) {\n                    return objValidateState;\n                }\n\n                // 类型\n                const strType = this.getType(element);\n\n                // 此时的值才是准确的值（浏览器可能会忽略文本框中的值，例如number类型输入框中的不合法数值）\n                let strValue = element.value;\n\n                if (element.hasAttribute('required')) {\n                    // 根据控件类型进行验证\n                    // 1. 单复选框比较特殊，先处理下\n                    if (strType == 'radio') {\n                        // 单选框，只需验证是否必选，同一name单选组只有要一个设置required即可\n                        let eleRadios = [element];\n                        const eleForm = element.closest('form') || element.parentElement.parentElement;\n\n                        if (element.name && eleForm) {\n                            eleRadios = eleForm.querySelectorAll('input[type=\"radio\"][name=\"' + element.name + '\"]');\n                        }\n\n                        // 如果单选框们没有一个选中，则认为无视了required属性\n                        const isAtLeastOneRadioChecked = [].slice.call(eleRadios).some(function (eleRadio) {\n                            return eleRadio.checked;\n                        });\n\n                        if (isAtLeastOneRadioChecked == false) {\n                            // 没有一个单选框选中\n                            objValidateState.valueMissing = true;\n                        }\n\n                        return objValidateState;\n                    } else if (strType == 'checkbox') {\n                        // 复选框是每一个都必须选中\n                        if (element.checked == false) {\n                            objValidateState.valueMissing = true;\n                        }\n\n                        return objValidateState;\n                    } else if (strType != 'password') {\n                        strValue = strValue.trim();\n                    }\n\n                    if (strValue == '') {\n                        // 重新赋值\n                        element.value = '';\n\n                        // 返回验证结果\n                        objValidateState.valueMissing = true;\n                    }\n                }\n\n                return objValidateState;\n            },\n\n            /**\n             * 判断元素是否为空的验证\n             * @param  {Element}  element 验证的DOM元素\n             * @return {Boolean|Object} 返回验证通过布尔值或者出错信息对象\n             */\n            isMissing (element) {\n                return this.getMissingState(element).valueMissing;\n            },\n\n            /**\n             * 返回元素值的合法状态\n             * @param  {Element}  element 验证的DOM元素\n             * @param  {RegExp}  regex 验证的正则\n             * @return {Boolean|Object} 返回验证通过布尔值或者出错信息对象\n             */\n            getMismatchState (element, regex, params) {\n                const objValidateState = {\n                    patternMismatch: false,\n                    typeMismatch: false\n                };\n\n                // 禁用元素不参与验证\n                if (!element || element.disabled) {\n                    return false;\n                }\n\n                // 原始值和处理值\n                const strInputValue = element.value;\n                let strDealValue = strInputValue;\n\n                // 类型\n                const strType = this.getType(element);\n\n                // 特殊控件不参与验证\n                if (/^radio|checkbox|select$/i.test(strType)) {\n                    return objValidateState;\n                }\n\n                // 全角半角以及前后空格的处理\n                // 适用于type=url/email/tel/zipcode/number/date/time等\n                if (strType != 'password') {\n                    strDealValue = strInputValue.trim();\n                }\n                if (/^text|textarea|password$/i.test(strType) == false) {\n                    strDealValue = window.DBC2SBC(strDealValue);\n                }\n                if (strType == 'tel') {\n                    strDealValue = this.getTel(strDealValue);\n                }\n\n                // 文本框值改变，重新赋值\n                // 即时验证的时候，不赋值，否则，无法输入空格\n                if (document.validate.focusable !== false && document.validate.focusable !== 0 && strDealValue != strInputValue) {\n                    element.value = strDealValue;\n                }\n\n                // 如果没有值，则认为通过，没有错误\n                if (strDealValue == '') {\n                    return objValidateState;\n                }\n\n                // 获取正则表达式，pattern属性获取优先，然后通过type类型匹配。\n                // 注意，不处理为空的情况\n                regex = regex ||\n                    (function () {\n                        return element.getAttribute('pattern');\n                    })() ||\n                    (function () {\n                        // 文本框类型处理，可能有管道符——多类型重叠，如手机或邮箱\n                        return strType && strType.split('|').map(function (strTypeSplit) {\n                            const regMatch = document.validate.reg[strTypeSplit];\n                            if (regMatch) {\n                                return regMatch;\n                            }\n                        }).join('|');\n                    })();\n\n                // 如果没有正则匹配的表达式，就没有验证的说法，认为出错为false\n                if (!regex) {\n                    return objValidateState;\n                }\n\n                // multiple多数据的处理\n                const isMultiple = element.hasAttribute('multiple');\n                const regNew = new RegExp(regex, params || 'i');\n\n                // 正则验证标志量\n                let isAllPass = true;\n\n                // number,range等类型下multiple是无效的\n                if (isMultiple && /^number|range$/i.test(strType) == false) {\n                    strDealValue.split(',').forEach(function (partValue) {\n                        partValue = partValue.trim();\n                        if (isAllPass && !regNew.test(partValue)) {\n                            isAllPass = false;\n                        }\n                    });\n                } else {\n                    isAllPass = regNew.test(strDealValue);\n                }\n\n                // 根据pattern判断类型\n                if (isAllPass == false) {\n                    if (element.hasAttribute('pattern')) {\n                        objValidateState.patternMismatch = true;\n                    } else {\n                        objValidateState.typeMismatch = true;\n                    }\n                }\n\n                return objValidateState;\n            },\n\n\n            /**\n             * 判断元素值的合法性\n             * @param  {Element}  element 验证的DOM元素\n             * @param  {RegExp}  regex 验证的正则\n             * @return {Boolean|Object} 返回验证通过布尔值或者出错信息对象\n             */\n            isMismatch (element, regex, params) {\n                const objValidateState = this.getMismatchState(element, regex, params);\n\n                return objValidateState.patternMismatch || objValidateState.typeMismatch;\n            },\n\n            /**\n             * 判断数值或日期范围超出\n             * @param  {Element}  element 验证的DOM元素\n             * @return {Boolean|Object} 返回验证状态对象\n             */\n            getRangeState (element) {\n                const objValidateState = {\n                    badInput: false,\n                    rangeOverflow: false,\n                    rangeUnderflow: false,\n                    stepMismatch: false\n                };\n\n                // 是否数值或日期范围超出\n                if (!element || element.disabled) {\n                    return objValidateState;\n                }\n\n                // 类型和值\n                const strType = this.getType(element);\n                let strValue = element.value.trim();\n\n                if (/radio|checkbox|select|textarea/i.test(strType) || strValue == '') {\n                    return objValidateState;\n                }\n\n                let strAttrMin = element.getAttribute('min');\n                let strAttrMax = element.getAttribute('max');\n                const strAttrStep = Number(element.getAttribute('step')) || 1;\n\n\n                if ((strType == 'number' || strType == 'range') && !/[-+]?[0-9]/.test(strValue)) {\n                    objValidateState.badInput = true;\n                }\n\n                if (strType.slice(-6) != '-range') {\n                    if (strValue == '0' || Number(strValue) == strValue) {\n                        strValue = strValue * 1;\n                    }\n\n                    // 如果是日期选择\n                    if (strType.includes('datetime')) {\n                        strValue = strValue.replace('T', ' ');\n                        if (strAttrMin) {\n                            strAttrMin.replaceAll('/', '-').replace('T', ' ');\n                        }\n                        if (strAttrMax) {\n                            strAttrMax.replaceAll('/', '-').replace('T', ' ');\n                        }\n                    }\n\n                    if (strAttrMin && strValue < strAttrMin) {\n                        objValidateState.rangeUnderflow = true;\n                    }\n                    if (strAttrMax && strValue > strAttrMax) {\n                        objValidateState.rangeOverflow = true;\n                    }\n\n                    // number, range类型的范围\n                    if ((strType == 'number' || strType == 'range') && strAttrStep && strAttrMin &&\n                        !/^\\d+$/.test(Math.abs(strValue - strAttrMin) / strAttrStep)\n                    ) {\n                        objValidateState.stepMismatch = true;\n                    }\n                    // hour, minute, time类型的范围\n                    if ((strType == 'hour' || strType == 'minute' || strType == 'time') && strAttrMin && strAttrStep) {\n                        const minuteValue = strValue.split(':')[1];\n                        const minuteMin = strAttrMin.split(':')[1];\n\n                        if (strType == 'hour' && (minuteValue != minuteMin || (strValue.split(':')[0] - strAttrMin.split(':')[0]) % strAttrStep != 0)) {\n                            // 小时，则是分钟要一致，小时数正好step\n                            objValidateState.stepMismatch = true;\n                        } else if ((minuteValue - minuteMin) % strAttrStep !== 0) {\n                            objValidateState.stepMismatch = true;\n                        }\n                    }\n                } else {\n                    // 时间范围\n                    const arrSplitValue = strValue.split(' ');\n\n                    // 防止month-range时候，min/max设置的是完整时间，\n                    // 如2017-07-07，而不是2017-07\n                    if (strType == 'month-range') {\n                        strAttrMin = strAttrMin && strAttrMin.slice(0, 7);\n                        strAttrMax = strAttrMax && strAttrMax.slice(0, 7);\n                    }\n\n                    if (arrSplitValue.length == 3) {\n                        if (strAttrMin && arrSplitValue[0] < strAttrMin) {\n                            objValidateState.rangeUnderflow = true;\n                        }\n                        if (strAttrMax && arrSplitValue[2] > strAttrMax) {\n                            objValidateState.rangeOverflow = true;\n                        }\n                    }\n                }\n\n                return objValidateState;\n            },\n\n\n            /**\n             * 判断数值或日期范围超出\n             * @param  {Element}  element 验证的DOM元素\n             * @return {Boolean|Object} 返回验证通过布尔值或者出错信息对象\n             */\n            isOut (element) {\n                const objValidateState = this.getRangeState(element);\n\n                return objValidateState.badInput || objValidateState.rangeOverflow || objValidateState.rangeUnderflow || objValidateState.stepMismatch;\n            },\n\n            /**\n             * 内容是否超出长度限制的判断\n             * @param  {Element}  element   DOM元素对象\n             * @return {Boolean|Object} 返回验证通过布尔值或者出错信息对象\n             */\n            getLengthState (element) {\n                const objValidateState = {\n                    tooLong: false,\n                    tooShort: false\n                };\n                // 是否内容长度溢出的判断\n                if (!element || element.disabled || /^radio|checkbox|select$/i.test(element.type)) {\n                    return objValidateState;\n                }\n\n                //  大小限制\n                const strAttrMinLength = element.getAttribute('minlength');\n                let strAttrMaxLength = element.maxlength || element.getAttribute('maxlength');\n                // 值\n                const strValue = element.value;\n\n                if (strValue == '') {\n                    return objValidateState;\n                }\n\n                const numLength = this.getLength(element);\n\n                if (strAttrMinLength && numLength < strAttrMinLength) {\n                    objValidateState.tooShort = true;\n                }\n\n                if (strAttrMaxLength) {\n                    strAttrMaxLength = strAttrMaxLength.replace(/\\D/g, '');\n                    if (numLength > strAttrMaxLength) {\n                        objValidateState.tooLong = true;\n                    }\n                }\n\n                return objValidateState;\n            },\n\n            /**\n             * 是否范围超出\n             * @param  {[type]}  element [description]\n             * @return {Boolean}         [description]\n             */\n            isOverflow (element) {\n                const objValidateState = this.getLengthState(element);\n                return objValidateState.tooLong || objValidateState.tooShort;\n            },\n\n            /**\n             * 自定义验证状态\n             * @return {[type]} [description]\n             */\n            getCustomState (element) {\n                const objValidateState = {\n                    customError: false\n                };\n                const customValidate = element.customValidate;\n\n                if (customValidate && typeof customValidate.method == 'function') {\n                    const dataResult = customValidate.method.call(customValidate.owner, element);\n                    if (dataResult) {\n                        objValidateState.customError = true;\n                        // 记住自定义提示内容\n                        if (typeof dataResult == 'object' && dataResult.customError) {\n                            this.setCustomValidity(element, dataResult.customError);\n                        } else {\n                            this.setCustomValidity(element, dataResult);\n                        }\n                    }\n                }\n\n                return objValidateState;\n            },\n\n            /**\n             * 设置自定义提示内容\n             */\n            setCustomValidity (element, content) {\n                if (!content) {\n                    return;\n                }\n                if (!element.customValidate) {\n                    element.customValidate = {\n                        report: {}\n                    };\n                }\n                if (!element.customValidate.report) {\n                    element.customValidate.report = {};\n                }\n\n                element.customValidate.report.customError = content;\n            },\n\n            /**\n             * 判断元素验证通过与否\n             * @param  Element  element 输入框元素或者表单元素\n             * @return {[type]} [description]\n             */\n            checkValidity (element) {\n                // 1. 元素不存在不验证\n                // 2. 禁用态表单元素不参与验证\n                if (!element || element.disabled) {\n                    return true;\n                }\n\n                // 3. 提交、重置等元素不参与验证\n                const strType = element.getAttribute('type') || element.type;\n                const strTag = element.tagName.toLowerCase();\n\n                if (/^button|submit|reset|file|image$/.test(strType) == true || strTag == 'button') {\n                    return true;\n                }\n\n                if (element.matches('input, select, textarea') == false && element.children) {\n                    element = element.querySelectorAll('input, select, textarea');\n                }\n\n                if (element.nodeType == 1) {\n                    return this.getValidity(element).valid;\n                }\n\n                if (element.length) {\n                    return [].slice.call(element).every(function (ele) {\n                        return this.checkValidity(ele);\n                    }.bind(this));\n                }\n\n                return true;\n            },\n\n            /**\n             * 获取元素的验证状态\n             * @return {[type]} [description]\n             */\n            getValidity (element) {\n                // 性能优化\n                // 如果值不变，且之前已经验证过，\n                // 且不是单复选框，则直接返回\n                // 避免同一元素短时间多次验证\n                if (element.lastValidateState && element.lastValue === element.value && /radio|checkbox/.test(element.type) == false) {\n                    return element.lastValidateState;\n                }\n\n                // 浏览器原生的状态\n                let objValidateState = {\n                    badInput: false,\n                    customError: false,\n                    patternMismatch: false,\n                    rangeOverflow: false,\n                    rangeUnderflow: false,\n                    stepMismatch: false,\n                    tooLong: false,\n                    tooShort: false,\n                    typeMismatch: false,\n                    valid: true,\n                    valueMissing: false\n                };\n\n                // 但是，不足以满足实际需求\n                objValidateState = Object.assign({},\n                    objValidateState,\n                    this.getMissingState(element),\n                    this.getMismatchState(element),\n                    this.getRangeState(element),\n                    this.getLengthState(element),\n                    this.getCustomState(element)\n                );\n\n                let isSomeInvalid = false;\n\n                for (let keyValidate in objValidateState) {\n                    if (keyValidate != 'valid' && objValidateState[keyValidate] == true) {\n                        isSomeInvalid = true;\n                    }\n                }\n\n                objValidateState.valid = !isSomeInvalid;\n\n                element.lastValue = element.value;\n                element.lastValidateState = objValidateState;\n\n                setTimeout(function () {\n                    delete element.lastValidateState;\n                }, 1);\n\n                return objValidateState;\n            },\n\n            /**\n             * 验证并进行错误提示\n             * @param  {Element} element 需要显示提示信息的元素\n             * @param  {Object}  options 可选参数，主要包括label，以及自定义提示和验证方法\n             * @return {[type]}         [description]\n             */\n            reportValidity (element, content) {\n                // 验证并设置结果状态\n                content = content || this.getReportText(element);\n\n                // 提示\n                this.errorTip(element, content);\n\n                // 认为是成功，隐藏提示\n                if (content === '' && element.data && element.data.errorTip) {\n                    element.data.errorTip.hide();\n                }\n\n                const isPass = !content;\n\n                this.styleError(element, isPass);\n\n                // 根据提示内容判断验证结果\n                return isPass;\n            },\n\n            /**\n             * 出错还是成功的样式处理\n             * @param  {[type]} element [description]\n             * @param  {[type]} valid   [description]\n             * @return {[type]}         [description]\n             */\n            styleError (element, valid) {\n                // 是否有错\n                if (!element) {\n                    return this;\n                }\n\n                if (typeof valid == 'undefined') {\n                    valid = element.validity.valid;\n                } else {\n                    // 触发验证通过与否的自定义事件\n                    element.dispatchEvent(new CustomEvent(valid ? 'valid' : 'invalid'));\n                }\n\n                // 获取提示应该显示的元素\n                const eleTarget = this.getTarget(element);\n\n                if (!eleTarget) {\n                    return valid;\n                }\n\n                const eleForm = element.form || element.closest('form') || (element.customValidate && element.customValidate.owner);\n\n                if (element.type == 'radio' && element.name && eleForm) {\n                    // 单选框组是整体去除高亮\n                    eleForm.querySelectorAll('input[type=radio][name=' + element.name + ']').forEach(function (eleRadio) {\n                        const eleTargetRadio = this.getTarget(eleRadio);\n\n                        if (valid) {\n                            eleTargetRadio.removeAttribute('is-error');\n                            eleTargetRadio.removeAttribute('aria-label');\n                        } else {\n                            eleTargetRadio.setAttribute('is-error', '');\n                        }\n                    }.bind(this));\n                } else if (valid) {\n                    eleTarget.removeAttribute('is-error');\n                    eleTarget.removeAttribute('aria-label');\n                } else {\n                    eleTarget.setAttribute('is-error', '');\n                }\n\n                return valid;\n            },\n\n            /**\n             * 显示出错信息处理\n             * @param  {Object} element 出错提示原始元素（这里可能会进行转移）\n             * @param  {String} content 出错提示内容\n             * @return {Object}         返回当前上下文\n             */\n            errorTip (element, content) {\n                const eleTarget = this.getTarget(element);\n\n                if (!eleTarget || !content) {\n                    return this;\n                }\n\n                // 如果元素隐藏，也不提示\n                const objStyle = window.getComputedStyle(eleTarget);\n\n                if (objStyle.display == 'none' || objStyle.visibility == 'hidden') {\n                    return this;\n                }\n\n                // 出错显示逻辑\n                const funShow = function () {\n                    const eleControl = document.validate.errorTip.control;\n                    const eleTipTarget = document.validate.errorTip.target;\n\n                    eleTipTarget.errorTip(content, {\n                        onShow (eleTrigger, eleTips) {\n                            // 如果tips宽度比较小，居左定位\n                            // 否则，使用默认的居中\n                            const numOffsetX = 0.5 * (eleTips.clientWidth - eleTipTarget.clientWidth);\n\n                            if (numOffsetX < 0) {\n                                eleTips.style.marginLeft = 0.5 * (eleTips.clientWidth - eleTipTarget.clientWidth) + 'px';\n                            } else {\n                                eleTips.style.marginLeft = 0;\n                            }\n\n                            // 使提示出现时候不会闪\n                            if (document.validate.focusable === false) {\n                                eleTips.classList.add('none');\n                            } else {\n                                eleTips.classList.remove('none');\n                            }\n                        },\n                        onHide (eleTrigger, eleTips) {\n                            const eleForm = eleControl.form || eleControl.closest('form');\n\n                            if (!eleForm || !eleForm.isImmediated) {\n                                return;\n                            }\n\n                            // margin偏移还原，否则其他的出错提示会有定位问题\n                            eleTips.style.marginLeft = '';\n\n                            // 即时验证的时候，如果出错了，提示隐藏时候，红色仍然保留\n                            document.validate.styleError(eleControl);\n                        }\n                    });\n\n                    // 即时验证不需要focus与选中\n                    // input输入的时候focusable是false\n                    // focus时候focusable是0\n                    if (document.validate.focusable === false || document.validate.focusable === 0) {\n                        return;\n                    }\n\n                    // focus状态还原\n                    document.validate.focusable = null;\n\n                    if (!document.validate.getType(eleControl)) {\n                        return;\n                    }\n\n                    // 如果是内容超出，选中超出的文字内容\n                    if (content.indexOf('内容长度') != -1 && content.indexOf('大') != -1) {\n                        const strValue = eleControl.value;\n                        const numLength = strValue.length;\n                        // var lang = element.getAttribute('lang');\n                        // 中文和英文计算字符个数的比例\n                        // var numRatioCh = 1;\n                        // var numRatioEn = 1;\n                        // if (/zh/i.test(lang)) {\n                        //     // 1个英文半个字符\n                        //     numRatioEn = 0.5;\n                        // } else if (/en/i.test(lang)) {\n                        //     // 1个中文2个字符\n                        //     numRatioCh = 2;\n                        // }\n                        // 获得最大长度的索引位置\n                        const strAttrMaxLength = eleControl.maxlength || eleControl.getAttribute('maxlength').replace(/\\D/g, '');\n\n                        if (numLength && strAttrMaxLength) {\n                            document.validate.selectRange(element, document.validate.getLength(element, strAttrMaxLength), numLength);\n                        }\n                    } else if (eleControl.focus && eleControl.select) {\n                        eleControl.focus();\n                        eleControl.select();\n                    }\n                };\n\n                document.validate.errorTip.control = element;\n                document.validate.errorTip.target = eleTarget;\n\n                // 1. 首先，确保el在屏幕内，且需要预留tips的显示的足够距离，这里使用50像素\n                const objRect = eleTarget.getBoundingClientRect();\n                let numScrollTop = -1;\n                if (objRect.top < 50) {\n                    numScrollTop = window.pageYOffset - (50 - objRect.top);\n                } else if (objRect.bottom > window.innerHeight) {\n                    numScrollTop = window.pageYOffset + (objRect.bottom - window.innerHeight);\n                }\n\n                if (numScrollTop >= 0) {\n                    window.scrollTopTo(numScrollTop, funShow);\n                } else {\n                    funShow();\n                }\n\n                return this;\n            },\n\n            /**\n             * 获得对应展示的元素\n             * @param  {Object} el 元素\n             * @return {Object}    返回对应的展示元素（可能就是自身）\n             */\n            getTarget (element) {\n                if (!element) {\n                    return null;\n                }\n\n                let eleTarget = element;\n\n                // 根据原生控件元素，确定真实的自定义控件元素\n                // 这里的很多处理跟其他表单UI组件想耦合、关联\n                const strType = element.getAttribute('type') || element.type;\n                const strId = element.id;\n                const strTag = element.tagName.toLowerCase();\n\n                const objStyle = window.getComputedStyle(element);\n\n                // 1. 单复选框\n                if (strType == 'radio') {\n                    if (objStyle.opacity != '1') {\n                        eleTarget = element.parentElement.querySelector('label.ui-radio[for=\"' + strId + '\"]');\n                    }\n                } else if (strType == 'checkbox') {\n                    if (objStyle.opacity != '1') {\n                        eleTarget = element.parentElement.querySelector('label.ui-checkbox[for=\"' + strId + '\"]');\n                    }\n                    // 下拉框\n                } else if (strType == 'select' || strTag == 'select') {\n                    if (objStyle.opacity != '1') {\n                        eleTarget = element.nextElementSibling;\n                    }\n                    // range范围选择框\n                } else if (strType == 'range') {\n                    if (objStyle.display == 'none') {\n                        eleTarget = element.nextElementSibling;\n                    }\n                    // 隐藏元素的目标提示元素的转移\n                } else if (strType == 'hidden' || objStyle.display == 'none' || objStyle.visibility == 'hidden') {\n                    const eleTargetRel = document.getElementById(eleTarget.getAttribute('data-target')) || element.dataTarget;\n                    if (eleTargetRel) {\n                        eleTarget = document.validate.getTarget(eleTargetRel);\n                    }\n                } else if (strType == 'textarea' || strTag == 'textarea') {\n                    if (element.classList.contains('ui-textarea') == false && element.parentElement.querySelector('.ui-textarea')) {\n                        eleTarget = element.parentElement.querySelector('.ui-textarea');\n                    }\n                } else if (strTag == 'input') {\n                    if (element.classList.contains('ui-input') == false && element.parentElement.querySelector('.ui-input')) {\n                        eleTarget = element.parentElement.querySelector('.ui-input');\n                    }\n                }\n\n                return eleTarget;\n            }\n        };\n    })();\n\n    // 重置原生的validity属性和checkValidity方法\n    [HTMLInputElement.prototype, HTMLSelectElement.prototype, HTMLTextAreaElement.prototype].forEach(function (prop) {\n        Object.defineProperty(prop, 'validity', {\n            get () {\n                return document.validate.getValidity(this);\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(prop, 'validationMessage', {\n            get () {\n                return document.validate.getReportText(this);\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(prop, 'checkValidity', {\n            value () {\n                return this.validity.valid;\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(prop, 'reportValidity', {\n            value (content) {\n                return document.validate.reportValidity(this, content);\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(prop, 'setCustomValidity', {\n            value (content) {\n                if (!content) {\n                    return;\n                }\n\n                // 浏览器原生的状态\n                const arrValidateKey = [\n                    'badInput',\n                    'customError',\n                    'patternMismatch',\n                    'rangeOverflow',\n                    'rangeUnderflow',\n                    'stepMismatch',\n                    'tooLong',\n                    'tooShort',\n                    'typeMismatch',\n                    'valueMissing'\n                ];\n\n                if (!this.customValidate) {\n                    this.customValidate = {};\n                }\n                if (!this.customValidate.report) {\n                    this.customValidate.report = {};\n                }\n\n                // 如果content是字符串，则重置所有提示\n                if (typeof content == 'string') {\n                    arrValidateKey.forEach(function (key) {\n                        this.customValidate.report[key] = content;\n                    });\n                } else if (typeof content == 'object') {\n                    Object.assign(this.customValidate.report, content);\n                }\n            },\n            configurable: true\n        });\n    });\n\n    // 表单元素的checkValidity()方法支持\n    Object.defineProperty(HTMLFormElement.prototype, 'checkValidity', {\n        value () {\n            return document.validate.checkValidity(this);\n        },\n        configurable: true\n    });\n\n    class Component {\n\n        /**\n         * 验证实例方法主体\n         * @param {Object}   el       通常值验证的表单元素\n         * @param {Function} callback 可选，表示验证成功的回调，可以使用自定义 DOM 事件代替\n         * @param {Object}   options  可选参数\n         */\n        constructor (element, callback, options) {\n            if (typeof element == 'string') {\n                element = document.getElementById(element) || document.querySelector(element);\n            }\n            // el一般指的是form元素\n            if (!element) {\n                return this;\n            }\n\n            const eleForm = element;\n\n            if (eleForm.data && eleForm.data.validate) {\n                return eleForm.data.validate;\n            }\n\n            // 干掉浏览器默认的验证\n            eleForm.setAttribute('novalidate', 'novalidate');\n\n            const defaults = {\n                // 提交时候是全部出错红色高亮，还是仅第一个，默认是全部\n                multiple: true,\n                // 是否开启即时验证\n                immediate: true,\n                // 是否利用label关联元素的innerHTML作为提示关键字\n                label: true,\n                // 自定义验证提示与数据\n                validate: [\n                    // 下面为结构示意\n                    /*{\n                        id: '',\n                        report: {\n                            // 源自规范，详见：https://www.zhangxinxu.com/wordpress/?p=8895\n                            badInput: '该错误类型对应的提示'\n                            customError: '该错误类型对应的提示'\n                            patternMismatch: '该错误类型对应的提示'\n                            rangeOverflow: '该错误类型对应的提示'\n                            rangeUnderflow: '该错误类型对应的提示'\n                            stepMismatch: '该错误类型对应的提示'\n                            tooLong: '该错误类型对应的提示'\n                            tooShort: '该错误类型对应的提示'\n                            typeMismatch: '该错误类型对应的提示'\n                            valueMissing: '该错误类型对应的提示'\n                        },\n                        method: function () {}\n                    }*/\n                ]\n            };\n\n            if (typeof callback == 'object') {\n                options = callback;\n                // 下一行其实去掉也没什么事，\n                // 放着是防止以后有什么新逻辑，\n                // 没有这一行可能会导致报错\n                callback = null;\n            }\n\n            const objParams = Object.assign({}, defaults, options || {});\n\n            // 还原禁用的提交和关闭按钮\n            eleForm.querySelectorAll('[type=\"submit\"]:disabled, [type=\"image\"]:disabled').forEach(function (eleSubmit) {\n                eleSubmit.disabled = false;\n            });\n\n            // 干掉默认的提交\n            eleForm.addEventListener('submit', (event) => {\n                if (this.stopValidate) {\n                    return;\n                }\n                event.preventDefault();\n\n                if (this.checkValidity()) {\n                    if (typeof callback == 'function') {\n                        callback.call(this, eleForm);\n                    }\n                    eleForm.dispatchEvent(new CustomEvent('valid'));\n                }\n\n                return false;\n            });\n\n            // 暴露的数据\n            this.element = {\n                form: eleForm\n            };\n\n            this.params = {\n                multiple: objParams.multiple,\n                immediate: objParams.immediate,\n                label: objParams.label\n            };\n\n            // 设置自定义验证\n            this.setCustomValidity(objParams.validate);\n\n            // 计数效果\n            this.count();\n\n            // 手机号过滤等增强体验功能\n            this.enhance();\n\n            if (!eleForm.data) {\n                eleForm.data = {};\n            }\n\n            eleForm.data.validate = this;\n\n            return this;\n        }\n\n        /**\n         * 设置自定义提示内容\n         */\n        setCustomValidity (validate) {\n            // 自定义的验证绑定\n            let dataValidate = validate || this.dataValidate;\n            if (!dataValidate || !this.element || !this.element.form) {\n                return this;\n            }\n            if (typeof dataValidate == 'function') {\n                dataValidate = dataValidate();\n            }\n            // 确保是数组\n            if (dataValidate && !dataValidate.forEach && dataValidate.id) {\n                dataValidate = [dataValidate];\n            }\n\n            // 是否从<label>元素寻找提示关键字\n            const isLabel = this.params.label;\n\n            // 遍历元素并匹配\n            let eleFormCollection = this.element.form.elements || this.element.form.querySelectorAll('input, textarea, select');\n\n            if (!eleFormCollection.length) {\n                return this;\n            }\n\n            [...eleFormCollection].forEach(eleInput => {\n                const strId = eleInput.id;\n\n                // 是否使用自定义的验证和提示\n                let customValidate = {\n                    label: isLabel,\n                    owner: this\n                };\n\n                if (strId && dataValidate && dataValidate.length) {\n                    dataValidate.forEach(function (objValidate) {\n                        if (objValidate.id == strId) {\n                            // 最终的提示文字，是否借助label元素\n                            objValidate.label = isLabel;\n                            // 实例对象存储\n                            objValidate.owner = this;\n                            // 自定义验证参数\n                            customValidate = objValidate;\n                        }\n                    }.bind(this));\n                }\n\n                // 记住上一次的值\n                // 只在初次记住\n                if (!this.element.form.data || !this.element.form.data.validate) {\n                    eleInput.lastValue = eleInput.value || '';\n                }\n\n                // 绑定在元素上\n                eleInput.customValidate = customValidate;\n            });\n\n            this.dataValidate = validate;\n        }\n\n        /**\n         * 表单内有计数功能元素的处理\n         * 私有\n         * @return {Object} 返回当前实例\n         */\n        count () {\n            // 即时验证\n            const eleForm = this.element.form;\n            // 原生value属性描述符\n            const propsInput = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');\n            const propsTextarea = Object.getOwnPropertyDescriptor(HTMLTextAreaElement.prototype, 'value');\n            // 遍历计数元素\n            eleForm.querySelectorAll('input, textarea').forEach(function (element) {\n                // 对maxlength进行处理\n                let strAttrMaxLength = element.getAttribute('maxlength');\n                if (strAttrMaxLength) {\n                    // 给maxlength设置不合法的值，阻止默认的长度限制\n                    try {\n                        element.setAttribute('maxlength', '_' + strAttrMaxLength + '_');\n                    } catch (e) {\n                        // IE7不能设置不合法的maxlength值 %>_<%\n                        element.removeAttribute('maxlength');\n                        element.maxlength = strAttrMaxLength;\n                    }\n                }\n\n                // 获得限制大小\n                const strAttrMinLength = element.getAttribute('minlength');\n\n                if (!strAttrMaxLength) {\n                    return;\n                }\n                // 过滤非数值字符\n                if (strAttrMaxLength) {\n                    strAttrMaxLength = strAttrMaxLength.replace(/\\D/g, '');\n                }\n\n                // 标签名\n                const strTag = element.tagName.toLowerCase();\n                // 类名\n                const CL = {\n                    add () {\n                        return ['ui', strTag].concat([].slice.call(arguments)).join('-');\n                    },\n                    toString () {\n                        return 'ui-' + strTag;\n                    }\n                };\n\n                // 有没有label元素\n                let eleLabel = element.parentElement.querySelector('.' + CL.add('count')) || eleForm.querySelector('.' + CL.add('count') + '[for=\"' + element.id + '\"]');\n\n                // 如果没有对应label元素，同时不是适合创建label元素的HTML结构，则返回\n                if (!eleLabel && !element.parentElement.classList.contains(CL.add('x'))) {\n                    return;\n                }\n\n                // 元素id必须\n                let strId = element.id;\n                if (!strId) {\n                    // 没有id随机id\n                    strId = ('lulu_' + Math.random()).replace('0.', '');\n                    element.id = strId;\n                }\n\n                // 计数的<label>元素，有则查询，无则新建\n                if (!eleLabel) {\n                    // 生成并载入计数元素\n                    eleLabel = document.createElement('label');\n                    eleLabel.className = CL.add('count');\n                    eleLabel.setAttribute('for', strId);\n                    eleLabel.innerHTML = '<span>0</span><slash>/</slash><span>' + (strAttrMinLength ? strAttrMinLength + '-' : '') + strAttrMaxLength + '</span>';\n                    // 插入到后面\n                    element.parentElement.appendChild(eleLabel);\n                } else if (!eleLabel.hasAttribute('for')) {\n                    eleLabel.setAttribute('for', strId);\n                }\n\n                const eleMin = eleLabel.querySelector('span, output') || eleLabel;\n\n                // 计数，标红方法\n                const funCount = function () {\n                    const length = document.validate.getLength(element);\n                    // 实时更新现在的字符个数\n                    eleMin.innerHTML = length;\n\n                    // 超出范围或范围不足\n                    if (length != 0 && (length > strAttrMaxLength || (strAttrMinLength && length < strAttrMinLength))) {\n                        eleMin.classList.add('error');\n                        eleMin.toggleAttribute('is-error', true);\n                    } else {\n                        eleMin.classList.remove('error');\n                        eleMin.toggleAttribute('is-error', false);\n                    }\n                };\n                // 事件\n                element.count = funCount;\n                element.addEventListener('input', funCount);\n\n                if (strTag == 'input') {\n                    Object.defineProperty(element, 'value', {\n                        ...propsInput,\n                        set (value) {\n                            // 赋值\n                            propsInput.set.call(this, value);\n                            // 计数\n                            funCount();\n                        }\n                    });\n                } else if (strTag == 'textarea') {\n                    Object.defineProperty(element, 'value', {\n                        ...propsTextarea,\n                        set (value) {\n                            // 赋值\n                            propsTextarea.set.call(this, value);\n                            // 计数\n                            funCount();\n                        }\n                    });\n                }\n\n                // 一开始就计数\n                funCount();\n            });\n\n            // reset事件不会自动计数处理\n            eleForm.addEventListener('reset', function () {\n                this.querySelectorAll('input, textarea').forEach(function (element) {\n                    if (element.count) {\n                        setTimeout(() => {\n                            element.count();\n                        }, 1);\n                    }\n                });\n            });\n\n            return this;\n        }\n\n        /**\n         * 表单内一些元素体验增强处理\n         * 私有方法\n         * @return {Object} 返回当前实例\n         */\n        enhance () {\n            const eleForm = this.element.form;\n\n            eleForm.querySelectorAll('input, textarea').forEach(function (element) {\n                // 输入框类型\n                const strAttrType = document.validate.getType(element);\n\n                // 手机号码粘贴的优化处理\n                if (/^checkbox|radio|range$/i.test(strAttrType) == false) {\n                    ['paste', 'drop'].forEach(eventType => {\n                        element.addEventListener(eventType, function (event) {\n                            // 剪切板数据对象\n                            // 输入框类型\n                            const type = this.getAttribute('type') || this.type;\n                            // 剪切板数据对象\n                            const objPassData = event.clipboardData || event.dataTransfer;\n                            // 粘贴或拖拽内容\n                            let strPassText = '';\n                            // 剪切板对象可以获取\n                            if (!objPassData) {\n                                return;\n                            }\n                            // 如果设置了不增强处理，也忽略\n                            if (this.dataset.enhance == 'false') {\n                                return;\n                            }\n                            // 获取选中的文本内容\n                            let textSelected = this.value.slice(element.selectionStart, element.selectionEnd);\n\n                            // 只有输入框没有数据，或全选状态才处理\n                            if (this.value.trim() == '' || textSelected === this.value) {\n                                // 阻止冒泡和默认粘贴行为\n                                event.preventDefault();\n                                // 获取粘贴数据\n                                strPassText = objPassData.getData('text') || '';\n                                // 进行如下处理\n                                // 除非是password，其他都过滤前后空格\n                                if (type != 'password') {\n                                    strPassText = strPassText.trim();\n                                }\n                                // 邮箱处理，可能会使用#代替@避免被爬虫抓取\n                                if (type == 'email') {\n                                    strPassText = strPassText.replace('#', '@');\n                                } else if (type == 'tel') {\n                                    // 手机号处理\n                                    strPassText = document.validate.getTel(strPassText);\n                                }\n\n                                // 插入\n                                this.value = strPassText;\n\n                                // 触发input事件\n                                element.dispatchEvent(new CustomEvent('input'));\n                            }\n                        });\n                    });\n                }\n            });\n        }\n\n        /**\n         * 表单即时验证的细节处理\n         * @return {Object} 返回当前实例\n         */\n        immediate () {\n            // 即时验证\n            const eleForm = this.element.form;\n\n            if (eleForm.isImmediated) {\n                return this;\n            }\n\n            // 下面三个是不同事件的验证提示\n            const funReportValidity = (event) => {\n                if (this.params.immediate == false) {\n                    return;\n                }\n                this.reportValidity(event.target);\n            };\n\n            const funReportFocus = (event) => {\n                if (this.params.immediate) {\n                    setTimeout(function () {\n                        document.validate.focusable = 0;\n\n                        this.reportValidity(event.target);\n                    }.bind(this), 20);\n                }\n            };\n\n            const funReportInput = (event) => {\n                if (this.params.immediate == false) {\n                    return;\n                }\n\n                document.validate.focusable = false;\n                this.reportValidity(event.target);\n                event.target.lastValue = event.target.value;\n            };\n\n            eleForm.querySelectorAll('input, select, textarea').forEach(function (element) {\n                // type类型筛选\n                let strType = element.type;\n                let strAttrType = element.getAttribute('type');\n                // 给每个控件绑定即时验证\n                if (strType == 'button' || strType == 'submit' || strType == 'reset' || strType == 'file' || strType == 'image') {\n                    return;\n                }\n\n                // 不同类别不同事件\n                if (strType == 'radio' || strType == 'checkbox') {\n                    element.addEventListener('click', funReportValidity);\n                } else if (/select/.test(strType) || /range|date|time|hour|minute|hidden/.test(strAttrType)) {\n                    element.addEventListener('change', funReportValidity);\n                } else {\n                    // 输入\n                    element.addEventListener('focus', funReportFocus);\n                    element.addEventListener('input', funReportInput);\n                }\n            });\n\n            eleForm.isImmediated = true;\n\n            // 如果表单重置，移除所有的即时验证绑定\n            const funRemoveValidate = function () {\n                [...eleForm.elements].forEach(element => {\n                    // type类型筛选\n                    let strType = element.type;\n                    // 给每个控件绑定即时验证\n                    if (['button', 'submit', 'reset', 'file', 'image'].includes(strType)) {\n                        return;\n                    }\n\n                    let strAttrType = element.getAttribute('type');\n                    // 不同类别不同事件\n                    if (strType == 'radio' || strType == 'checkbox') {\n                        element.removeEventListener('click', funReportValidity);\n                    } else if (/select/.test(strType) || /range|date|time|hour|minute|hidden/.test(strAttrType)) {\n                        element.removeEventListener('change', funReportValidity);\n                    } else {\n                        // 输入\n                        element.removeEventListener('focus', funReportFocus);\n                        element.removeEventListener('input', funReportInput);\n                    }\n                });\n\n                [...eleForm.querySelectorAll('.valided')].forEach(element => {\n                    element.classList.remove('valided');\n                });\n                [...eleForm.querySelectorAll('[is-error]')].forEach(element => {\n                    // 因此可能的提错误示\n                    let objErrorTip = element.data && element.data.errorTip;\n                    if (objErrorTip) {\n                        objErrorTip.hide();\n                    }\n\n                    element.removeAttribute('is-error');\n                });\n\n                eleForm.isImmediated = false;\n\n                eleForm.removeEventListener('reset', funRemoveValidate);\n            };\n            eleForm.addEventListener('reset', funRemoveValidate);\n\n            return this;\n        }\n\n        /**\n         * 表单所有元素验证通过的判断处理\n         * @return {Boolean} 是否表单所有元素验证通过\n         */\n        checkValidity () {\n            const eleForm = this.element.form;\n\n            let isAllPass = true;\n\n            document.validate.focusable = true;\n\n            eleForm.querySelectorAll('input, select, textarea').forEach(element => {\n                // 还没有出现不合法的验证\n                if (isAllPass == true || this.params.multiple) {\n                    // multiple参数为true的时候，其他都要标红，但提示仅出现在第一个错误元素上\n                    const isPass = element.validity.valid;\n\n                    if (isAllPass == true && isPass == false) {\n                        // reportValidity方法也会执行styleError\n                        // 因此 styleError 这句在 else 中执行\n                        this.reportValidity(element);\n                        isAllPass = false;\n                    } else {\n                        document.validate.styleError(element, isPass);\n                    }\n                }\n            });\n\n            // 当有过一次提交之后，开启即时验证\n            if (!eleForm.isImmediated && this.params.immediate) {\n                this.immediate();\n            }\n\n            return isAllPass;\n        }\n\n        /**\n         * 出错提示显示\n         * @return {[type]} [description]\n         */\n        reportValidity (element, content) {\n            if (element) {\n                document.validate.reportValidity(element, content);\n            }\n        }\n    }\n\n    return Component;\n})();\n\n// 为了直接使用\nwindow.Validate = Validate;\n\n\n/**\n * 给任意 <form> 元素 注入 validate 方法\n */\nHTMLFormElement.prototype.validate = function () {\n    new Validate(this);\n\n    return this;\n};\n\n// 观察is-validate属性，并认为绑定验证\n(function () {\n    const initAllValidate = (ele) => {\n        const eleValidates = ele || document.querySelectorAll('[is-validate]');\n\n        eleValidates.forEach(item => {\n            item.validate();\n            item.dispatchEvent(new CustomEvent('connected', {\n                detail: {\n                    type: 'ui-validate'\n                }\n            }));\n            item.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n        });\n    };\n\n    /**\n     * 初始化并监听页面包含is-pagination属性的DOM节点变化\n     */\n    const autoInitAndWatchingValidate = () => {\n        // 先实例化已有is-pagination属性的DOM节点，再监听后续的节点变化\n        initAllValidate();\n        const observer = new MutationObserver(mutationsList => {\n            mutationsList.forEach(mutation => {\n                mutation.addedNodes && mutation.addedNodes.forEach(eleAdd => {\n                    if (!eleAdd.tagName) {\n                        return;\n                    }\n                    if (eleAdd.hasAttribute('is-validate')) {\n                        initAllValidate([eleAdd]);\n                    } else {\n                        initAllValidate(eleAdd.querySelectorAll('[is-validate]'));\n                    }\n                });\n            });\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    };\n\n    if (document.readyState != 'loading') {\n        autoInitAndWatchingValidate();\n    } else {\n        window.addEventListener('DOMContentLoaded', autoInitAndWatchingValidate);\n    }\n})();\n\n// export default Validate;\n\n/**\n * @Pagination.js\n * @author XboxYan(yanwenbin)\n * @version\n * @Created: 20-04-22\n * @edit:    20-04-22\n */\n\nclass Pagination extends HTMLElement {\n\n    static get observedAttributes () {\n        return ['per', 'total', 'current', 'loading'];\n    }\n\n    constructor ({per, total, current, loading, href, container = null, onChange = () => {}} = {}) {\n        super();\n        const shadowRoot = this.attachShadow({\n            mode: 'open'\n        });\n        const isLink = href || this.href;\n        const el = isLink ? 'a' : 'button';\n        if (per) {\n            this.per = per;\n        }\n        if (total) {\n            this.total = total;\n        }\n        if (current) {\n            this.setAttribute('current', current);\n        }\n        this.loading = loading;\n        this.onchange = onChange;\n        shadowRoot.innerHTML = `\n        <style>\n        :host {\n            display: flex;\n            font-size: 14px;\n            height: 30px;\n            align-items: center;\n        }\n\n        .ui-page {\n            display: inline-flex;\n            min-width: 18px;\n            padding: 0 var(--ui-page-padding, 2px);\n            margin: 0 5px;\n            height: var(--ui-page-height, 28px);\n            border: 1px solid transparent;\n            border-radius: var(--ui-page-radius, 0);\n            color: var(--ui-gray, #a2a9b6);\n            font-size: var(--ui-font, 14px);\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n            transition: border-color var(--ui-animate-time, .2s), background-color var(--ui-animate-time, .2s);\n            text-decoration: none;\n            user-select: none;\n            position: relative;\n            justify-content: center;\n            align-items: center;\n            background: none;\n            box-sizing: content-box;\n        }\n\n        .ui-page:not(:focus-visible){\n            outline: 0;\n        }\n\n        .ui-page[current] {\n            cursor: default;\n        }\n\n        .ui-page:not([current]):not([disabled]):not(:disabled):hover {\n            border-color: #b6bbc6;\n            color: var(--ui-gray, #a2a9b6);\n            cursor: pointer;\n        }\n\n        .ui-page:disabled {\n            color: #ccd0d7;\n            cursor: default;\n        }\n\n        .ui-page > svg {\n            width: 20px;\n            height: 20px;\n        }\n\n        .ui-page-prev,\n        .ui-page-next {\n            text-align: center;\n            fill: currentColor;\n            overflow: hidden;\n        }\n\n        /* 当前不可点的按钮颜色 */\n        span.ui-page-prev,\n        span.ui-page-next {\n            color: var(--ui-diabled, #ccd0d7);\n        }\n\n        .ui-page-next svg {\n            transform: scaleX(-1);\n        }\n\n        .ui-page-prev {\n            margin-left: 0;\n        }\n\n        .ui-page-next {\n            margin-right: 0;\n        }\n\n        .ui-page-ellipsis {\n            display: inline-block;\n        }\n\n        :host(:not([loading]):not([data-loading=true])) .ui-page[current] {\n            color: var(--ui-white, #ffffff);\n            background-color: var(--ui-blue, #2a80eb);\n        }\n\n        .ui-page-text {\n            color: var(--ui-dark, #4c5161);\n        }\n\n        .ui-page.loading > svg {\n            visibility: hidden;\n        }\n\n        :host([loading]) .ui-page[current]::before,\n        :host([data-loading=true]) .ui-page[current]::before {\n            content: \"\";\n            position: absolute;\n            left: 0;\n            top: 0;\n            right: 0;\n            bottom: 0;\n            background-repeat: no-repeat;\n            width: 20px;\n            height: 20px;\n            background: url(\"data:image/svg+xml,%3Csvg viewBox='0 0 1024 1024' xmlns='http://www.w3.org/2000/svg' width='200' height='200'%3E%3Cpath d='M512 1024q-104 0-199-40-92-39-163-110T40 711Q0 616 0 512q0-15 10.5-25.5T36 476t25.5 10.5T72 512q0 90 35 171 33 79 94 140t140 95q81 34 171 34t171-35q79-33 140-94t95-140q34-81 34-171t-35-171q-33-79-94-140t-140-95q-81-34-171-34-15 0-25.5-10.5T476 36t10.5-25.5T512 0q104 0 199 40 92 39 163 110t110 163q40 95 40 199t-40 199q-39 92-110 163T711 984q-95 40-199 40z' fill='%232a80eb'/%3E%3C/svg%3E\")\n                no-repeat center;\n            background-size: 20px 20px;\n            margin: auto;\n            animation: spin 1s linear infinite;\n        }\n\n        @keyframes spin {\n            from {\n                transform: rotate(0);\n            }\n            to {\n                transform: rotate(360deg);\n            }\n        }\n\n        .simple-page {\n            width: auto;\n            padding: 0 .625em;\n            pointer-events: none;\n            color: #4c5161;\n        }\n        .page {\n            display: inline-flex;\n            height: 100%;\n            align-items: center;\n        }\n        .pagination-wrap {\n            display: contents;\n            visibility: var(--ui-visibility, initial);\n        }\n        @media (prefers-reduced-motion: reduce) {\n            .ui-page {\n                transition: none;\n            }\n        }\n        </style>\n        <fieldset id=\"wrap\" class=\"pagination-wrap\">\n            <${el} class=\"ui-page ui-page-prev\" id=\"left\">\n                <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\" viewBox=\"0 0 200 200\"><path d=\"M85.876,100.5l49.537-50.526c4.089-4.215,4.089-11.049,0-15.262 c-4.089-4.218-10.719-4.218-14.808,0L63.586,92.868c-4.089,4.215-4.089,11.049,0,15.264l57.018,58.156 c4.089,4.215,10.719,4.215,14.808,0c4.089-4.215,4.089-11.049,0-15.262L85.876,100.5z\"></path></svg>\n            </${el}>\n            <div class=\"page\" id=\"page\"></div>\n            <${el} class=\"ui-page ui-page-next\" id=\"right\">\n                <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\" viewBox=\"0 0 200 200\"><path d=\"M85.876,100.5l49.537-50.526c4.089-4.215,4.089-11.049,0-15.262 c-4.089-4.218-10.719-4.218-14.808,0L63.586,92.868c-4.089,4.215-4.089,11.049,0,15.264l57.018,58.156 c4.089,4.215,10.719,4.215,14.808,0c4.089-4.215,4.089-11.049,0-15.262L85.876,100.5z\"></path></svg>\n            </${el}>\n        </fieldset>\n        `;\n        // trigger元素的获取\n        this.element = new Proxy({}, {\n            get: (target, prop) => {\n                if (prop == 'trigger') {\n                    return this.htmlFor && document.getElementById(this.htmlFor);\n                }\n            }\n        });\n\n        // 如果存在容器，就append进去\n        if (typeof container == 'string') {\n            container = document.querySelector(container);\n        }\n        if (container) {\n            container.append(this);\n        }\n    }\n\n    get per () {\n        return Number(this.getAttribute('per')) || 15;\n    }\n\n    get simple () {\n        return this.getAttribute('mode') === 'short';\n    }\n\n    get total () {\n        return Number(this.getAttribute('total')) || 0;\n    }\n\n    get current () {\n        return Number(this.getAttribute('current')) || 1;\n    }\n\n    get loading () {\n        return this.getAttribute('loading') !== null;\n    }\n\n    get href () {\n        //?page=1\n        return this.getAttribute('href');\n    }\n\n    set current (value) {\n        this.setAttribute('current', Math.min(Math.max(1, value), this.count));\n    }\n\n    set per (value) {\n        this.setAttribute('per', value);\n    }\n\n    set total (value) {\n        this.setAttribute('total', value);\n    }\n\n    set loading (value) {\n        if (!value) {\n            this.removeAttribute('loading');\n        } else {\n            this.setAttribute('loading', '');\n        }\n    }\n\n    get htmlFor () {\n        return this.getAttribute('for');\n    }\n    set htmlFor (value) {\n        this.setAttribute('for', value);\n    }\n\n    render (per, total) {\n        const item = this.href ? 'a' : 'button';\n        this.count = Math.ceil(total / per) || 1;\n        const current = Math.min(Math.max(1, this.current), this.count);\n        if (this.simple) {\n            const html = `<div class=\"simple-page ui-page\" >${current} / ${this.count}</div>`;\n            this.page.innerHTML = html;\n        } else {\n            // 生成一个长度为count，且最大长度为10的数组 [undefined,undefined,undefined,undefined,undefined,...]\n            const arr = Array.from({length: this.count}).splice(0, 9);\n            // 将数组映射成每一页的节点\n            const html = arr.map((el, index) => {\n                // <button class=\"ui-page\" data-current=\"2\" aria-label=\"第2页，共20页\">2</button>\n                return `<${item} class=\"ui-page\" data-current=\"${index + 1}\" aria-label=\"第${index + 1}页，共${this.count}页\">${index + 1}</${item}>`;\n            }).join('');\n            this.page.innerHTML = html;\n        }\n\n        // 存在同时改变多个自定义元素属性的情况，此时应该执行一次\n        clearTimeout(this.timerRender);\n        this.timerRender = setTimeout(() => {\n            this.updatePage(current);\n        });\n    }\n\n    updatePage (current = this.current) {\n        if (current == 1) {\n            this.left.setAttribute('disabled', true);\n            this.left.setAttribute('aria-label', '已经是第一页了');\n            this.left.removeAttribute('href');\n        } else {\n            this.left.removeAttribute('disabled');\n            this.left.setAttribute('aria-label', `上一页，当前第${current}页`);\n            this.left.href = this.href ? this.href.replace(/\\${current}/g, current - 1) : 'javascript:;';\n        }\n        if (current == this.count) {\n            this.right.setAttribute('disabled', true);\n            this.right.setAttribute('aria-label', '已经是最后一页了');\n            this.right.removeAttribute('href');\n        } else {\n            this.right.removeAttribute('disabled');\n            this.right.setAttribute('aria-label', `下一页，当前第${current}页`);\n            this.right.href = this.href ? this.href.replace(/\\${current}/g, current + 1) : 'javascript:;';\n        }\n        if (this.simple) {\n            this.page.querySelector('.simple-page').textContent = current + ' / ' + this.count;\n        } else if (this.count > 9) {\n            let place = [];\n            switch (current) {\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                    place = [1, 2, 3, 4, 5, 6, 7, 'next', this.count];\n                    break;\n                case this.count:\n                case this.count - 1:\n                case this.count - 2:\n                case this.count - 3:\n                case this.count - 4:\n                    place = [1, 'pre', this.count - 6, this.count - 5, this.count - 4, this.count - 3, this.count - 2, this.count - 1, this.count];\n                    break;\n                default:\n                    place = [1, 'pre', current - 2, current - 1, current, current + 1, current + 2, 'next', this.count];\n                    break;\n            }\n            this.page.querySelectorAll('.ui-page').forEach((el, i) => {\n                if (typeof place[i] === 'number') {\n                    el.dataset.current = place[i];\n                    el.textContent = place[i];\n                    el.disabled = false;\n                    el.href = 'javascript:;';\n                    if (place[i] == current) {\n                        el.setAttribute('current', '');\n                        if (this.isKeepFocusIn) {\n                            el.focus({\n                                preventScroll: true\n                            });\n                        }\n                    } else {\n                        el.removeAttribute('current');\n                    }\n                    el.removeAttribute('disabled');\n                    el.setAttribute('aria-label', `第${place[i]}页，共${this.count}页`);\n                    if (this.href) {\n                        el.href = this.href.replace(/\\${current}/g, el.dataset.current);\n                    }\n                } else {\n                    el.textContent = '...';\n                    el.removeAttribute('current');\n                    el.removeAttribute('data-current');\n                    el.removeAttribute('aria-label');\n                    el.setAttribute('disabled', true);\n                    el.removeAttribute('href');\n                }\n            });\n        } else {\n            this.page.querySelectorAll('.ui-page').forEach((el) => {\n                if (el.dataset.current == current) {\n                    el.setAttribute('current', '');\n                    if (this.isKeepFocusIn) {\n                        el.focus({\n                            preventScroll: true\n                        });\n                    }\n                } else {\n                    el.removeAttribute('current');\n                }\n                if (this.href) {\n                    el.href = this.href.replace(/\\${current}/g, el.dataset.current);\n                }\n            });\n        }\n    }\n\n    // 上一个聚焦元素\n    focusPrev () {\n        const current = this.shadowRoot.activeElement;\n        if (current === this.right) {\n            if (this.simple) {\n                this.left.focus();\n            } else {\n                this.page.lastElementChild.focus();\n            }\n        } else {\n            const prev = current.previousElementSibling;\n            if (prev) {\n                if (!prev.disabled) {\n                    prev.focus();\n                } else {\n                    prev.previousElementSibling.focus();\n                }\n            } else {\n                this.left.focus();\n            }\n        }\n    }\n\n    // 下一个聚焦元素\n    focusNext () {\n        const current = this.shadowRoot.activeElement;\n        if (current === this.left) {\n            if (this.simple) {\n                this.right.focus();\n            } else {\n                this.page.firstElementChild.focus();\n            }\n        } else {\n            const next = current.nextElementSibling;\n            if (next) {\n                if (!next.disabled) {\n                    next.focus();\n                } else {\n                    next.nextElementSibling.focus();\n                }\n            } else {\n                this.right.focus();\n            }\n        }\n    }\n\n    connectedCallback () {\n        if (this.isConnectedCallback) {\n            return this;\n        }\n        this.page = this.shadowRoot.getElementById('page');\n        this.left = this.shadowRoot.getElementById('left');\n        this.right = this.shadowRoot.getElementById('right');\n        this.wrap = this.shadowRoot.getElementById('wrap');\n\n        this.render(this.per, this.total);\n        this.page.addEventListener('click', (ev) => {\n            const item = ev.target.closest('.ui-page');\n            if (item) {\n                this.nativeClick = true;\n                this.current = Number(item.dataset.current);\n            }\n        });\n        this.page.addEventListener('focusin', () => {\n            this.isKeepFocusIn = true;\n        });\n        this.addEventListener('keydown', (ev) => {\n            if (this.loading) {\n                return;\n            }\n            switch (ev.key) {\n                case 'ArrowDown':\n                case 'PageDown':\n                    ev.preventDefault();\n                    this.nativeClick = true;\n                    this.current--;\n                    break;\n                case 'ArrowUp':\n                case 'PageUp':\n                    ev.preventDefault();\n                    this.nativeClick = true;\n                    this.current++;\n                    break;\n                case 'ArrowLeft':\n                    this.focusPrev();\n                    break;\n                case 'ArrowRight':\n                    this.focusNext();\n                    break;\n                default:\n                    break;\n            }\n        });\n        this.left.addEventListener('click', () => {\n            this.nativeClick = true;\n            this.current--;\n            this.left.focus();\n        });\n        this.right.addEventListener('click', () => {\n            this.nativeClick = true;\n            this.current++;\n            this.right.focus();\n        });\n\n        // 全局事件\n        this.dispatchEvent(new CustomEvent('connected', {\n            detail: {\n                type: 'ui-pagination'\n            }\n        }));\n\n        this.isConnectedCallback = true;\n\n        // 分页内容准备完毕\n        this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n    }\n\n    attributeChangedCallback (name, oldValue, newValue) {\n        if (!this.page || oldValue === newValue) {\n            return;\n        }\n        let eleTrigger = this.element && this.element.trigger;\n\n        if (name == 'per') {\n            this.render(newValue, this.total);\n            // 普通元素分页数据per数据同步\n            if (eleTrigger) {\n                eleTrigger.dataset.per = newValue;\n            }\n        } else if (name == 'total') {\n            this.render(this.per, newValue);\n            // 普通元素分页数据total数据同步\n            if (eleTrigger) {\n                eleTrigger.dataset.total = newValue;\n            }\n        } else if (name == 'loading') {\n            this.wrap.disabled = newValue !== null;\n\n            // 普通元素分页数据loading状态同步\n            if (eleTrigger) {\n                eleTrigger.dataset.loading = newValue !== null;\n            }\n        } else if (name == 'current' && oldValue !== newValue) {\n            // 一定程度上避免冗余的渲染\n            clearTimeout(this.timerRender);\n            this.timerRender = setTimeout(() => {\n                this.updatePage(Number(newValue));\n            });\n\n            // 普通元素分页数据信息的实时同步\n            if (eleTrigger) {\n                eleTrigger.dataset.current = newValue;\n            }\n            if (this.nativeClick) {\n                this.nativeClick = false;\n                this.dispatchEvent(new CustomEvent('change', {\n                    detail: {\n                        current: Number(newValue),\n                        per: this.per,\n                        total: this.total\n                    }\n                }));\n\n                if (eleTrigger && eleTrigger != this) {\n                    eleTrigger.dispatchEvent(new CustomEvent('change', {\n                        detail: {\n                            current: Number(newValue),\n                            per: this.per,\n                            total: this.total\n                        }\n                    }));\n                }\n            }\n        }\n    }\n}\n\nif (!customElements.get('ui-pagination')) {\n    customElements.define('ui-pagination', Pagination);\n}\n\nwindow.Pagination = Pagination;\n\n// 给 HTML 元素扩展 pagination 方法\nHTMLElement.prototype.pagination = function (options) {\n    if (this.matches('ui-pagination') || this['ui-pagination']) {\n        return this;\n    }\n\n    const {\n        total = 0,\n        current = 1,\n        per = 15,\n        href = null,\n        loading = false\n    } = this.dataset;\n\n    let objParams = Object.assign({}, {\n        per,\n        total,\n        href,\n        loading\n    }, options || {});\n\n    const pagination = new Pagination(objParams);\n\n    const strId = this.id || ('lulu_' + Math.random()).replace('0.', '');\n    this.innerHTML = '';\n    this.id = strId;\n    this['ui-pagination'] = pagination;\n    pagination.htmlFor = strId;\n    pagination.setAttribute('current', current);\n    // 删除自定义元素，隐藏不必要的细节\n    pagination.addEventListener('connected', () => {\n        // 所有普通元素也触发 connected 生命周期事件\n        this.dispatchEvent(new CustomEvent('connected', {\n            detail: {\n                type: 'ui-pagination'\n            }\n        }));\n\n        // 原分页从页面中删除\n        pagination.remove();\n\n        // DOM 执行完毕\n        this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n    });\n    document.body.append(pagination);\n    // 转移shadow dom\n    const shadowRoot = this.attachShadow({\n        mode: 'open'\n    });\n    shadowRoot.append(pagination.shadowRoot);\n\n    // 设置定义完毕标志量\n    this.setAttribute('defined', '');\n\n    return this;\n};\n\n(function () {\n    const initAllPagination = (ele) => {\n        const elePaginations = ele || document.querySelectorAll('[is-pagination]');\n\n        elePaginations.forEach(item => {\n            item.pagination();\n        });\n    };\n\n    /**\n     * 初始化并监听页面包含is-pagination属性的DOM节点变化\n     */\n    const autoInitAndWatchingIsPaginationAttr = () => {\n        // 先实例化已有is-pagination属性的DOM节点，再监听后续的节点变化\n        initAllPagination();\n        const observer = new MutationObserver(mutationsList => {\n            mutationsList.forEach(mutation => {\n                mutation.addedNodes && mutation.addedNodes.forEach(eleAdd => {\n                    if (!eleAdd.tagName) {\n                        return;\n                    }\n                    if (eleAdd.hasAttribute('is-pagination')) {\n                        initAllPagination([eleAdd]);\n                    } else {\n                        initAllPagination(eleAdd.querySelectorAll('[is-pagination]'));\n                    }\n                });\n            });\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    };\n\n    if (document.readyState != 'loading') {\n        autoInitAndWatchingIsPaginationAttr();\n    } else {\n        window.addEventListener('DOMContentLoaded', autoInitAndWatchingIsPaginationAttr);\n    }\n})();\n\n// export default Pagination;\n\n/**\n * @Table.js\n * @author   zhangxinxu\n * @version\n * @created  15-06-28\n * @edited   17-07-18 非模块化使用支持\n *           19-12-03 ES5原生语法支持\n *           21-01-08 Web Components\n**/\n// import '../ui/Drop.js';\n// import '../ui/Pagination.js';\n// import Validate from '../ui/Validate.js';\n\nconst Table = (function () {\n\n    /**\n     * 项目表格组件\n     */\n\n    let CHECKED = 'checked';\n    let SELECTED = 'selected';\n\n    // 一些元素类名\n    let CL = {\n        // 容器\n        container: 'table-x',\n        // 为空\n        empty: 'table-null-x',\n        // 错误\n        error: 'table-error-x',\n        // 分页容器类名\n        page: 'table-page',\n        // 复选框选择器\n        checkbox: '[type=\"checkbox\"]'\n    };\n\n    class Table extends HTMLTableElement {\n        static get defaultKeyMap () {\n            return {\n                key: '',\n                total: 'total',\n                per: 'per',\n                current: 'current'\n            };\n        }\n\n        // 滚动到顶部缓动实现\n        // rate表示缓动速率，默认是2\n        static scrollTopTo (top, callback) {\n            let scrollTop = document.scrollingElement.scrollTop;\n            let rate = 2;\n\n            let funTop = function () {\n                scrollTop = scrollTop + (top - scrollTop) / rate;\n\n                // 临界判断，终止动画\n                if (Math.abs(scrollTop - top) <= 1) {\n                    document.scrollingElement.scrollTop = top;\n                    callback && callback();\n                    return;\n                }\n                document.scrollingElement.scrollTop = scrollTop;\n                // 动画gogogo!\n                requestAnimationFrame(funTop);\n            };\n            funTop();\n        }\n\n        constructor () {\n            super();\n\n            this.params = this.params || {};\n            this.element = this.element || {};\n\n            // 内置的固定参数\n            this.params.parse = (data) => {\n                // 如果有模板，按照模板和内置的ES6模板字符串语法进行渲染\n                if (this.params.template) {\n                    return this.params.template.interpolate(data);\n                }\n\n                return '';\n            };\n\n            // 其他参数的设置\n            this.params.ajax = {};\n            this.params.form = {};\n            this.params.list = [15, 30, 50];\n            this.params.page = {\n                // 总数据量\n                total: 0,\n                // 每页显示数目\n                per: 15,\n                // 当前的页数\n                current: 1,\n\n                // 与后台交互时候UI分页需要的参数和后台分页参数对应关系\n                // 下面注释的是起点个人中心的接口对应关系\n                // 其中key表示后台分页数据在那个接口名称下，例如，下面注释内容表示的JSON数据结构是：\n                // {\n                //     \"code\": 0,\n                //     \"data\": {\n                //         \"pageInfo\": {\n                //             \"pageIndex\": 1,\n                //             \"pageSize\": 20,\n                //             \"pageMax\": 6,\n                //             \"totalCount\": 113\n                //          }\n                //     }\n                // }\n                // keyMap: {\n                //     key: 'pageInfo',\n                //     total: 'totalCount',\n                //     per: 'pageSize',\n                //     current: 'pageIndex'\n                // }\n                // 下面这里未注释的是默认设定\n                keyMap: Table.defaultKeyMap\n            };\n        }\n\n        setParams (options) {\n            options = options || {};\n\n            // 分页数据中的keyMap也是一个可选参数对象\n            // 为了支持嵌套合并，这里提前处理下\n            let objPageOption = options.page;\n            if (objPageOption) {\n                objPageOption.keyMap = Object.assign({}, this.params.page.keyMap || Table.defaultKeyMap, objPageOption.keyMap || {});\n            }\n\n            this.params = Object.assign(this.params, options);\n\n            return this;\n        }\n\n        /**\n         * 列表解决方案中的事件处理\n         * @return {[type]} [description]\n         */\n        events () {\n            // 实例暴露的参数\n            let objParams = this.params;\n            let objElement = this.element;\n\n            // 一些事件\n            // 单复选框选中效果\n            this.addEventListener('click', function (event) {\n                let eleCheckbox = event.target;\n\n                if (!eleCheckbox || eleCheckbox.type != 'checkbox') {\n                    return;\n                }\n\n                let eleTr = eleCheckbox.closest('tr');\n\n                // 如果不是第一td中的checkbox，忽略\n                if (eleTr.querySelector(':first-child ' + CL.checkbox) !== eleCheckbox) {\n                    return;\n                }\n\n                // 获取所有的td标签中的复选框\n                // 需要tr单元行显示，需要第一个子元素，需要可用\n                let eleAllTdCheckbox = [];\n\n                this.querySelectorAll('tr').forEach(function (tr) {\n                    if (tr.clientWidth == 0) {\n                        return;\n                    }\n                    // 所有非禁用复选框\n                    let eleTdCheckbox = tr.querySelector('td:first-child ' + CL.checkbox + ':enabled');\n                    if (eleTdCheckbox) {\n                        eleAllTdCheckbox.push(eleTdCheckbox);\n                    }\n                });\n\n                // 全选和非全选标志量\n                let isAllChecked = false;\n                let isAllUnchecked = false;\n                // 全选\n                let eleTh = eleCheckbox.closest('th');\n                // 点击的是全选复选框\n                if (eleTh) {\n                    isAllChecked = eleCheckbox[CHECKED];\n                    isAllUnchecked = !isAllChecked;\n                    // 下面所有的td复选框同步\n                    eleAllTdCheckbox.forEach(function (eleTdCheckbox) {\n                        eleTdCheckbox[CHECKED] = isAllChecked;\n                    });\n                } else {\n                    let numLengthChecked = [].slice.call(eleAllTdCheckbox).filter(function (eleTdCheckbox) {\n                        return eleTdCheckbox[CHECKED];\n                    }).length;\n                    // 是否取消全选\n                    isAllChecked = (eleAllTdCheckbox.length == numLengthChecked);\n                    // 是否全部非选\n                    isAllUnchecked = (numLengthChecked == 0);\n                }\n                // 改变全选复选框的状态\n                let eleThCheckbox = this.querySelector('th:first-child ' + CL.checkbox);\n                if (eleThCheckbox) {\n                    eleThCheckbox[CHECKED] = isAllChecked;\n                }\n\n                // 根据复选框状态决定表格行样式\n                eleAllTdCheckbox.forEach(function (eleTdCheckbox) {\n                    eleTdCheckbox.closest('tr').classList[eleTdCheckbox[CHECKED] ? 'add' : 'remove'](SELECTED);\n                });\n\n                // 回调\n                this.dispatchEvent(new CustomEvent('check', {\n                    detail: {\n                        isAllChecked: isAllChecked,\n                        isAllUnchecked: isAllUnchecked,\n                        target: eleCheckbox,\n                        allEnabledCheckbox: eleAllTdCheckbox\n                    }\n                }));\n            });\n\n            // 点击列表，只有不是a元素或者是复选框本身，选中当前复选框\n            this.addEventListener('click', function (event) {\n                let eleTarget = event.target;\n                let eleCheckbox = null;\n\n                if (eleTarget && /^(?:a|input|textarea|tbody|i|select|label|th)$/i.test(eleTarget.tagName) == false) {\n                    eleCheckbox = eleTarget.closest('tr') && eleTarget.closest('tr').querySelector('td:first-child ' + CL.checkbox + ':enabled');\n                    if (eleCheckbox) {\n                        eleCheckbox.click();\n                    }\n                }\n            });\n\n            // 分页选择的事件处理\n            let elePagination = this.element.pagination;\n            if (elePagination) {\n                elePagination.addEventListener('change', event => {\n                    let numCurrent = event.detail.current;\n                    // 更新分页\n                    objParams.page.current = numCurrent;\n                    // 显示小loading\n                    elePagination.loading = true;\n                    // ajax再次\n                    this.ajax();\n                });\n            }\n\n            // 切换每页数目的dropList\n            // 求得当前选中的分页数\n            // 优先本地存储\n            let strStoreId = this.id;\n            let numCurrentPer = objParams.page.per;\n            let elePer = objElement.drop;\n\n            // 触发分页数量的下拉元素\n            if (elePer && elePer.list) {\n                if (strStoreId && localStorage[strStoreId]) {\n                    numCurrentPer = localStorage[strStoreId];\n                    objParams.page.per = Number(numCurrentPer);\n                }\n                // 赋值\n                elePer.textContent = numCurrentPer;\n\n                // 下拉\n                elePer.list(() => {\n                    return objParams.list.map(function (number) {\n                        return {\n                            value: number\n                        };\n                    });\n                }, {\n                    width: 60,\n                    onSelect: (data) => {\n                        let numPerNew = data.value;\n\n                        // 记住当前选择的分页数\n                        if (strStoreId) {\n                            localStorage[strStoreId] = numPerNew;\n                        }\n\n                        // 如果分页有变\n                        if (objParams.page.per != numPerNew) {\n                            // 改变分页数目\n                            objParams.page.per = numPerNew;\n                            // 当前页重置为1\n                            objParams.page.current = 1;\n                            // 重新刷新\n                            this.ajax();\n                        }\n                    }\n                });\n            }\n\n            // 关联表单的行为处理\n            let eleForm = this.form;\n            if (eleForm) {\n                new Validate(eleForm, () => {\n                    objParams.page.current = 1;\n                    this.ajax({\n                        data: this.params.form.data || {}\n                    });\n                }, {\n                    validate: () => {\n                        return this.params.form.validate || [];\n                    }\n                });\n            }\n        }\n\n        /**\n         * 列表数据请求\n         * @param  {[type]} options [description]\n         * @return {[type]}         [description]\n         */\n        ajax (options) {\n            options = options || {};\n\n            // 暴露的参数和元素\n            let objParams = this.params;\n            let objElement = this.element;\n\n            // 避免重复请求\n            if (this.getAttribute('aria-busy') == 'true') {\n                return this;\n            }\n\n            // 列表容器元素\n            let eleContainer = this.parentElement;\n            let eleTbody = this.querySelector('tbody');\n            let eleForm = this.form;\n\n            // ajax请求参数\n            // 可以从4处获取\n            // 1. options直接传参\n            // 2. this.setParams()传参，此参数可以多次使用，只要不被重置\n            // 3. 关联form元素中的参数\n            // 4. <table>元素上data-*获取，但是只能获取url参数\n            // 以上优先级越往后越低\n\n            // eleForm元素与参数获取\n            let objAjaxForm = {\n                data: {}\n            };\n            if (eleForm) {\n                let strAttrAction = eleForm.getAttribute('action');\n                if (strAttrAction) {\n                    objAjaxForm.url = strAttrAction;\n                }\n                eleForm.querySelectorAll('input[name]:enabled, select[name]:enabled, textarea[name]:enabled').forEach(ele => {\n                    if (/^(?:submit|image|file)$/.test(ele.type)) {\n                        return;\n                    }\n                    objAjaxForm.data[ele.name] = ele.value;\n                });\n            }\n\n            let objAjax = Object.assign({}, this.dataset, objAjaxForm, objParams.ajax, options);\n\n            // ajax地址是必需项\n            if (!objAjax.url) {\n                if (this.element.pagination) {\n                    this.element.pagination.loading = false;\n                }\n\n                return this;\n            }\n\n            // 补充协议头\n            if (/^\\/\\//.test(objAjax.url)) {\n                objAjax.url = location.protocol + objAjax.url;\n            }\n\n            // 1. ajax发送的data数据走合并策略\n            let data = options.data || {};\n            let dataForm = objAjaxForm.data;\n            let dataOptions = objParams.ajax.data || {};\n\n            if (typeof dataOptions == 'function') {\n                dataOptions = dataOptions() || {};\n            }\n            if (typeof dataForm == 'function') {\n                dataForm = dataForm() || {};\n            }\n            if (typeof data == 'function') {\n                data = data() || {};\n            }\n\n            // 发送给后台的分页数据的键值对\n            let dataPage = {};\n            let objKeyMap = objParams.page.keyMap;\n\n            if (objKeyMap) {\n                dataPage[objKeyMap['current']] = objParams.page.current;\n                dataPage[objKeyMap['per']] = objParams.page.per;\n            }\n\n            // current和per数据的更新\n            let objDataSend = Object.assign({}, dataPage, dataForm, dataOptions, data);\n\n            if (objKeyMap) {\n                objParams.page.current = objDataSend[objKeyMap['current']];\n                objParams.page.per = objDataSend[objKeyMap['per']];\n            }\n\n            // 2. url get请求地址合并\n            let objAjaxParams = new URLSearchParams(objDataSend);\n            // URL处理\n            let strUrlAjax = objAjax.url;\n\n            // 查询字符串的处理\n            let strUrlSearch = '?';\n            if (strUrlAjax.split('?').length > 1) {\n                strUrlSearch = strUrlSearch + strUrlAjax.split('?')[1] + '&';\n            }\n\n            // URL拼接\n            strUrlAjax = strUrlAjax.split('?')[0] + strUrlSearch + objAjaxParams.toString();\n\n            // 3. 回调方法的处理\n            // ajax发生错误的处理\n            let funError = (content) => {\n                let eleError = objElement.error || eleContainer.querySelector('.' + CL.error);\n\n                if (!eleError) {\n                    eleError = document.createElement('div');\n                    eleError.className = CL.error;\n                    // 创建的错误元素插到列表的后面\n                    this.insertAdjacentElement('afterend', eleError);\n\n                    objElement.error = eleError;\n                }\n                eleError.style.display = 'flex';\n                eleError.innerHTML = content || '数据没有获取成功';\n\n                if (typeof objAjax.error == 'function') {\n                    objAjax.error();\n                }\n            };\n            // 请求完成的事件处理\n            let funComplete = () => {\n                // 请求结束标志量\n                this.removeAttribute('aria-busy');\n                // 去除中间的大loading\n                if (objElement.loading) {\n                    objElement.loading.style.display = 'none';\n                }\n\n                // 去掉分页的小loading\n                if (objElement.pagination) {\n                    objElement.pagination.loading = false;\n                }\n                if (typeof objAjax.complete == 'function') {\n                    objAjax.complete();\n                }\n\n                // 列表内容呈现\n                this.show();\n            };\n\n            // 执行Ajax请求的方法\n            let funAjax = () => {\n                let xhr = new XMLHttpRequest();\n\n                xhr.open('GET', strUrlAjax);\n\n                xhr.onload = () => {\n                    let json = {};\n\n                    try {\n                        json = JSON.parse(xhr.responseText) || {};\n                    } catch (event) {\n                        funError('解析异常，请稍后重试');\n                        return;\n                    }\n\n                    // 出错处理\n                    // 0认为是成功\n                    // 关键字支持code或者error\n                    // { code: 0 } 或 { error: 0 } 都认为成功\n                    if (json.code !== 0 && json.error !== 0) {\n                        funError(json.msg || '返回数据格式不符合要求');\n\n                        return;\n                    }\n\n                    let strHtml = objParams.parse(json);\n\n                    // 如果解析后无数据，显示空提示信息\n                    eleTbody.innerHTML = strHtml || '';\n\n                    let eleEmpty = objElement.empty;\n\n                    if (!strHtml || !strHtml.trim()) {\n                        if (!eleEmpty) {\n                            eleEmpty = document.querySelector('.' + CL.empty) || document.createElement('div');\n                            eleEmpty.className = CL.empty;\n                            // 插入到列表元素后面\n                            this.insertAdjacentElement('afterend', eleEmpty);\n\n                            objElement.empty = eleEmpty;\n                        }\n                        eleEmpty.style.display = 'flex';\n                    }\n\n                    // 获得后端返回的分页总数\n                    let jsonKey = objKeyMap.key;\n                    // 总数目\n                    let numTotal;\n\n                    if (jsonKey) {\n                        numTotal = json.data[jsonKey][objKeyMap['total']];\n                    } else {\n                        numTotal = json.data[objKeyMap['total']];\n                    }\n\n                    // 修改总数值并显示\n                    if (numTotal || numTotal == 0) {\n                        eleContainer.querySelectorAll('output[data-type=\"total\"]').forEach(function (eleTotal) {\n                            eleTotal.innerHTML = numTotal;\n                        });\n\n                        objParams.page.total = numTotal;\n                    }\n\n                    this.page();\n\n                    if (typeof objAjax.success == 'function') {\n                        objAjax.success(json);\n                    }\n                };\n\n                xhr.onerror = () => {\n                    funError('网络异常，数据没有获取成功，您可以稍后重试！');\n\n                };\n\n                xhr.onloadend = () => {\n                    funComplete();\n                };\n\n                xhr.send();\n\n                // 标记输入框忙碌状态\n                this.setAttribute('aria-busy', 'true');\n            };\n\n            // 滚动到表格上边缘\n            let numScrollTop = window.pageYOffset;\n\n            // loading元素\n            let eleLoading = objElement.loading;\n            if (!eleLoading) {\n                eleLoading = document.createElement('ui-loading');\n                eleLoading.setAttribute('rows', 15);\n                // 插入到列表元素后面\n                this.insertAdjacentElement('afterend', eleLoading);\n\n                objElement.loading = eleLoading;\n            }\n\n            // 显示loading\n            eleLoading.style.paddingBottom = '';\n\n            if (window.getComputedStyle(eleLoading).display == 'none') {\n                let eleThead = this.querySelector('thead');\n\n                eleLoading.style.height = (this.clientHeight - (eleThead ? eleThead.clientHeight : 0)) + 'px';\n\n                if (eleTbody.innerHTML.trim() == '') {\n                    eleLoading.style.height = '';\n                }\n            }\n\n            // 微调圈圈的位置\n            let numDistance = parseFloat(eleLoading.style.height) - window.innerHeight;\n\n            // loading尺寸比浏览器窗口还大\n            // 微调未知，使在窗体居中位置\n            if (numDistance > 0) {\n                eleLoading.style.paddingBottom = numDistance + 'px';\n            }\n\n            // loading显示\n            eleLoading.style.display = 'block';\n\n            // 其他元素隐藏\n            if (objElement.empty) {\n                objElement.empty.style.display = 'none';\n            }\n            if (objElement.error) {\n                objElement.error.style.display = 'none';\n            }\n\n            eleTbody.innerHTML = '';\n\n            // 请求走起\n            // 判断是否需要先滚动\n            let objBound = this.getBoundingClientRect();\n            // 第一次不定位\n            if (!this.isFirstAjax && objBound.top < 0) {\n                numScrollTop = objBound.top + numScrollTop;\n                Table.scrollTopTo(numScrollTop, funAjax);\n            } else if (!this.isFirstAjax && objBound.top > window.innerHeight) {\n                numScrollTop = numScrollTop - objBound.top;\n                Table.scrollTopTo(numScrollTop, funAjax);\n            } else {\n                funAjax();\n\n                this.isFirstAjax = false;\n            }\n\n            return this;\n        }\n\n        /**\n         * 分页的处理\n         * @param  {[type]} total [description]\n         * @return {[type]}       [description]\n         */\n        page (total) {\n            let objPage = this.params.page;\n\n            // 分页元素\n            let elePagination = this.element.pagination;\n\n            // 显示分页\n            if (!elePagination) {\n                return;\n            }\n\n            // 分页数据的设置\n            let objParamPage = {\n                total: total || objPage.total,\n                current: objPage.current,\n                per: objPage.per,\n                mode: objPage.mode || 'long'\n            };\n\n            // 分页数据赋值\n            for (let key in objParamPage) {\n                elePagination[key] = objParamPage[key];\n            }\n        }\n\n        /**\n         * 列表请求完毕显示的方法\n         * @return {[type]} [description]\n         */\n        show () {\n            // 显示loading\n            if (this.element.loading) {\n                this.element.loading.style.paddingBottom = '';\n            }\n\n            //没有全选\n            let eleThCheckbox = this.querySelector('th:first-child ' + CL.checkbox);\n            if (eleThCheckbox) {\n                eleThCheckbox[CHECKED] = false;\n            }\n\n            // 显示的回调\n            this.dispatchEvent(new CustomEvent('show', {\n                detail: {\n                    type: 'ui-table'\n                }\n            }));\n\n            return this;\n        }\n\n        // 元素进入页面时候的生命周期函数执行\n        connectedCallback () {\n            // 获得数据\n            let eleTbody = this.querySelector('tbody');\n            if (!eleTbody) {\n                eleTbody = document.createElement('tbody');\n                this.append(eleTbody);\n            }\n\n            // 模板元素\n            let eleTemplate = this.querySelector('template');\n            if (eleTemplate) {\n                this.params.template = eleTemplate.innerHTML;\n            }\n\n            // 容器\n            let eleContainer = this.closest('.' + CL.container);\n\n            // 分页元素\n            let elePagination = null;\n            if (eleContainer) {\n                elePagination = eleContainer.querySelector('ui-pagination');\n\n                if (elePagination) {\n                    this.element.pagination = elePagination;\n\n                    // 设置分页的参数\n                    this.setParams({\n                        page: {\n                            current: elePagination.current,\n                            total: elePagination.total,\n                            per: elePagination.per\n                        }\n                    });\n                } else {\n                    // 创建一个分页元素\n                    elePagination = document.createElement('ui-pagination');\n                    this.element.pagination = elePagination;\n                    // 分页内容显示\n                    let elePage = eleContainer.querySelector('.' + CL.page);\n                    if (elePage) {\n                        elePage.appendChild(elePagination);\n                    }\n                }\n\n                // loading元素\n                let eleLoading = eleContainer.querySelector('ui-loading');\n                if (eleLoading) {\n                    this.element.loading = eleLoading;\n                }\n\n                // 下拉列表，切换分页元素\n                let eleDrop = eleContainer.querySelector('ui-drop[data-type=\"per\"]');\n                if (eleDrop) {\n                    this.element.drop = eleDrop;\n                }\n            }\n\n            // 为了动态呈现的列表可以先设置参数，后执行，这里延后\n            setTimeout(() => {\n                // 事件绑定和处理\n                this.events();\n\n                // 基于tbody内容决定首次交互的行为\n                if (eleTbody.textContent.trim() == '') {\n                    this.isFirstAjax = true;\n                    this.ajax();\n                } else {\n                    // 认为是列表第一页直出，\n                    // 这样的交互可以有更好体验\n                    this.page();\n                }\n            }, 1);\n\n            // 全局事件\n            this.dispatchEvent(new CustomEvent('connected', {\n                detail: {\n                    type: 'ui-table'\n                }\n            }));\n\n            this.isConnectedCallback = true;\n\n            this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n        }\n    }\n\n    if (!('').interpolate) {\n        // 字符串转模板字符串 https://www.zhangxinxu.com/wordpress/2020/10/es6-html-template-literal/\n        String.prototype.interpolate = function (params) {\n            const names = Object.keys(params);\n            const vals = Object.values(params);\n            return new Function(...names, `return \\`${(function (str) {\n                return str.replace(/&(lt|gt|amp|quot);/ig, function (all, t) {\n                    return ({\n                        'lt': '<',\n                        'gt': '>',\n                        'amp': '&',\n                        'quot': '\"'\n                    })[t];\n                });\n            })(this)}\\`;`)(...vals);\n        };\n    }\n\n    return Table;\n})();\n\n// 给<table>元素扩展form属性\nObject.defineProperty(HTMLTableElement.prototype, 'form', {\n    get () {\n        let attrForm = this.getAttribute('form');\n        if (!attrForm) {\n            return null;\n        }\n        return document.getElementById(attrForm);\n    }\n});\n\nif (!customElements.get('ui-table')) {\n    customElements.define('ui-table', Table, {\n        extends: 'table'\n    });\n}\n\n/**\n * @Form.js\n * @author zhangxinxu\n * @version\n * @created  16-03-01\n * @edited   19-12-02    ES5原生语法支持\n */\n\n/**\n * 表单解决方案组件\n * @使用示例\n *  <form is=\"ui-form\">\n */\n\n// import LightTip from '../ui/LightTip.js';\n// import Validate from '../ui/Validate.js';\n// import '../ui/Loading.js';\n\n// 表单\nclass Form extends HTMLFormElement {\n    constructor () {\n        super();\n\n        this.element = this.element || {};\n        this.params = this.params || {\n            // 验证成功之后，请求发送前的条件约束\n            // avoidSend: function () {}\n        };\n        // 回调方法们\n        this.callback = this.callback || {};\n\n        Object.defineProperty(this.params, 'validate', {\n            set (value) {\n                if (this.validate) {\n                    this.validate.setCustomValidity(value);\n                }\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * 表单提交的处理\n     * @return {[type]} [description]\n     */\n    ajax () {\n        // 回调\n        // optionCallback可以是对象也可以直接是成功回调\n        /*\n            optionCallback = {\n                success: function () {},\n                error: function () {},\n                complete: function () {}\n            };\n        */\n        let optionCallback = this.callback;\n        optionCallback = optionCallback || function () {};\n        if (typeof optionCallback == 'function') {\n            optionCallback = {\n                success: optionCallback\n            };\n        }\n\n        // 表单提交按钮元素的获取\n        let eleSubmit = [...this.elements].filter(function (control) {\n            return control.type && /^(?:submit|image)$/i.test(control.type);\n        })[0] || this.querySelector('button:nth-last-of-type(1)');\n\n        if (!eleSubmit) {\n            eleSubmit = (() => {\n                let ele = document.createElement('button');\n                ele.type = 'submit';\n                ele.setAttribute('hidden', '');\n                this.appendChild(ele);\n\n                return ele;\n            })();\n        }\n\n        this.element.submit = eleSubmit;\n\n        // 按钮元素\n        let eleButton = null;\n\n        // 我们肉眼所见的按钮，进行一些状态控制\n        eleButton = eleSubmit.id && document.querySelector('label[for=' + eleSubmit.id + ']');\n        if (!eleButton) {\n            eleButton = eleSubmit;\n        }\n        this.element.button = eleButton;\n\n        // 请求地址\n        let strUrl = this.action.split('#')[0] || location.href.split('#')[0];\n        // 请求类型\n        let strMethod = this.method || 'POST';\n        let strEnctype = this.getAttribute('enctype') || this.enctype;\n\n        // 提交数据\n        // 1. 菊花转起来\n        eleButton.loading = true;\n        // 2. 提交按钮禁用\n        eleSubmit.setAttribute('disabled', 'disabled');\n\n        // 3. 数据\n        let objFormData = new FormData(this);\n        // 支持外部传入额外的请求参数\n        if (this.params.data) {\n            Object.keys(this.params.data).forEach(key => {\n                objFormData.append(key, this.params.data[key]);\n            });\n        }\n\n        // 请求类型不同，数据地址也不一样\n        let strSearchParams = new URLSearchParams(objFormData).toString();\n\n        if (strMethod.toLowerCase() == 'get') {\n            if (strUrl.split('?').length > 1) {\n                strUrl = strUrl + '&' + strSearchParams;\n            } else {\n                strUrl = strUrl + '?' + strSearchParams;\n            }\n        }\n\n        // 4. 请求走起来\n        let xhr = new XMLHttpRequest();\n        xhr.open(strMethod, strUrl);\n\n        if (optionCallback.beforeSend) {\n            optionCallback.beforeSend.call(this, xhr, objFormData);\n        }\n\n        // 请求结束\n        xhr.onload = () => {\n            let json = {};\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch (event) {\n                new LightTip('返回数据解析出错。', 'error');\n                // 回调\n                if (optionCallback.error) {\n                    optionCallback.error.call(this, event);\n                }\n\n                // 触发出错自定义事件\n                this.dispatchEvent(new CustomEvent('error', {\n                    detail: {\n                        data: {\n                            code: -1,\n                            msg: '解析出错'\n                        }\n                    }\n                }));\n\n                return;\n            }\n\n            if (json && (json.code === 0 || json.error === 0)) {\n                // 成功回调\n                if (optionCallback.success) {\n                    optionCallback.success.call(this, json);\n                } else {\n                    // 如果没有成功回调，组件自己提示成功\n                    new LightTip(json.msg || '操作成功。', 'success');\n                    // 表单重置\n                    this.reset();\n                }\n\n                // 支持绑定success事件\n                this.dispatchEvent(new CustomEvent('success', {\n                    detail: {\n                        data: json\n                    }\n                }));\n            } else {\n                new LightTip((json && json.msg) || '返回数据格式不符合要求。', 'error');\n\n                // 失败回调\n                if (optionCallback.error) {\n                    optionCallback.error.call(this, json);\n                }\n\n                // 触发出错自定义事件\n                this.dispatchEvent(new CustomEvent('error', {\n                    detail: {\n                        data: json\n                    }\n                }));\n            }\n        };\n\n        // 请求错误\n        xhr.onerror = () => {\n            new LightTip('网络异常，刚才的操作没有成功，您可以稍后重试。', 'error');\n            // 回调\n            if (optionCallback.error) {\n                optionCallback.error.apply(this, arguments);\n            }\n            // 触发出错自定义事件\n            this.dispatchEvent(new CustomEvent('error', {\n                detail: {\n                    code: -1,\n                    msg: '网络异常'\n                }\n            }));\n        };\n\n        // 请求结束，无论成功还是失败\n        xhr.onloadend = () => {\n            // 菊花关闭\n            eleButton.loading = false;\n            // 表单恢复提交\n            eleSubmit.removeAttribute('disabled');\n            // 回调\n            if (optionCallback.complete) {\n                optionCallback.complete.apply(this, arguments);\n            }\n\n            // 支持绑定complete事件\n            this.dispatchEvent(new CustomEvent('complete'));\n        };\n\n        if (strEnctype && strEnctype.toLowerCase() === 'application/x-www-form-urlencoded') {\n            xhr.send(strSearchParams);\n        } else if (strEnctype == 'application/json') {\n            xhr.setRequestHeader('Content-Type', strEnctype);\n            const objSend = {};\n            objFormData.forEach(function(value, key){\n                objSend[key] = value;\n            });\n            xhr.send(JSON.stringify(objSend));\n        } else {\n            xhr.send(objFormData);\n        }\n    }\n\n    connectedCallback () {\n        // 绑定表单验证\n        this.validate = new Validate(this, () => {\n            let funAvoidSend = this.params.avoidSend || this.callback.avoidSend;\n            // 验证成功之后\n            if (!funAvoidSend || !funAvoidSend(this)) {\n                this.ajax();\n            }\n        }, this.params.validate || {});\n\n        // 全局事件\n        this.dispatchEvent(new CustomEvent('connected', {\n            detail: {\n                type: 'ui-form'\n            }\n        }));\n\n        this.isConnectedCallback = true;\n\n        this.dispatchEvent(new CustomEvent('DOMContentLoaded'));\n    }\n}\n\nif (!customElements.get('ui-form')) {\n    customElements.define('ui-form', Form, {\n        extends: 'form'\n    });\n}"],
  "mappings": "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",
  "names": ["key", "eleTrigger", "location", "eleTab", "eleCombobox", "eleDatalist", "props", "eleTarget", "strMatchIndex", "arrListData", "p", "q", "eleClose", "eleBody", "eleDialog", "Datalist", "value", "arrHourMin", "arrMonthDay", "strTypeButton", "Table"]
}
